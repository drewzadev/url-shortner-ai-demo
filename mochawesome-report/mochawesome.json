{
  "stats": {
    "suites": 51,
    "tests": 204,
    "passes": 93,
    "pending": 0,
    "failures": 111,
    "start": "2025-06-05T14:54:17.373Z",
    "end": "2025-06-05T14:54:17.602Z",
    "duration": 229,
    "testsRegistered": 204,
    "passPercent": 45.588235294117645,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "fe70acc0-55dd-4fd5-a5ae-faab4a25444b",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "4031472f-b95a-4c96-8ee2-fd51b7f08911",
          "title": "API Bulk Operations Integration Tests",
          "fullFile": "/Users/andrew/Dev/url-shortner-ai-demo/test/integration/api-bulk-operations.test.js",
          "file": "/test/integration/api-bulk-operations.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"API Bulk Operations Integration Tests\"",
              "fullTitle": "API Bulk Operations Integration Tests \"before all\" hook in \"API Bulk Operations Integration Tests\"",
              "timedOut": false,
              "duration": 2,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sandbox = sinon.createSandbox()\n\n// Create Express app\napp = express()\napp.use(express.json({ limit: '10mb' })) // Increase limit for bulk testing\n// Mock services\nmockDatabaseService = {\n  getClient: sandbox.stub().returns({\n    url: {\n      create: sandbox.stub(),\n      findUnique: sandbox.stub(),\n      findMany: sandbox.stub(),\n      delete: sandbox.stub(),\n      update: sandbox.stub()\n    },\n    $transaction: sandbox.stub()\n  }),\n  healthCheck: sandbox.stub().resolves(true)\n}\nmockRedisService = {\n  getShortCode: sandbox.stub(),\n  cacheUrl: sandbox.stub(),\n  getCachedUrl: sandbox.stub(),\n  removeCachedUrl: sandbox.stub(),\n  isHealthy: sandbox.stub().returns(true)\n}\nmockLogger = {\n  debug: sandbox.stub(),\n  info: sandbox.stub(),\n  warn: sandbox.stub(),\n  error: sandbox.stub(),\n  fatal: sandbox.stub()\n}\n// Use test routes with mocked dependencies\napp.use('/api', createApiRoutes(mockDatabaseService, mockRedisService, mockLogger))",
              "err": {},
              "uuid": "78c81646-13b3-44e9-8409-bf9de4b7fa5d",
              "parentUUID": "4031472f-b95a-4c96-8ee2-fd51b7f08911",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook in \"API Bulk Operations Integration Tests\"",
              "fullTitle": "API Bulk Operations Integration Tests \"before each\" hook in \"API Bulk Operations Integration Tests\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sandbox.resetHistory()\n// Set up default mocks for short code generation\nmockRedisService.getShortCode.callsFake(() => {\n  const codes = ['abc123', 'def456', 'ghi789', 'jkl012', 'mno345']\n  return Promise.resolve(codes[Math.floor(Math.random() * codes.length)])\n})\nmockRedisService.cacheUrl.resolves()",
              "err": {},
              "uuid": "70511d05-ab7e-4f1b-9b7a-16980071525e",
              "parentUUID": "4031472f-b95a-4c96-8ee2-fd51b7f08911",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"API Bulk Operations Integration Tests\"",
              "fullTitle": "API Bulk Operations Integration Tests \"after all\" hook in \"API Bulk Operations Integration Tests\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sandbox.restore()",
              "err": {},
              "uuid": "75240814-0790-4aca-a8d0-d9d3aae490c5",
              "parentUUID": "4031472f-b95a-4c96-8ee2-fd51b7f08911",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook in \"API Bulk Operations Integration Tests\"",
              "fullTitle": "API Bulk Operations Integration Tests \"after each\" hook in \"API Bulk Operations Integration Tests\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sandbox.resetHistory()",
              "err": {},
              "uuid": "86274966-3693-49d3-a774-93605529f751",
              "parentUUID": "4031472f-b95a-4c96-8ee2-fd51b7f08911",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "69ce6004-39cb-4819-9411-f62f4f51a87f",
              "title": "POST /api/shorten/bulk - Payload Size Tests",
              "fullFile": "/Users/andrew/Dev/url-shortner-ai-demo/test/integration/api-bulk-operations.test.js",
              "file": "/test/integration/api-bulk-operations.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should handle minimum payload (1 URL)",
                  "fullTitle": "API Bulk Operations Integration Tests POST /api/shorten/bulk - Payload Size Tests should handle minimum payload (1 URL)",
                  "timedOut": false,
                  "duration": 21,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const urls = ['https://example.com/single']\n\nconst mockDbResults = [{\n  id: 'test-id-1',\n  originalUrl: urls[0],\n  shortCode: 'abc123',\n  createdAt: new Date('2024-01-15T10:30:00Z'),\n  expiresAt: new Date('2024-07-15T10:30:00Z'),\n  clickCount: 0\n}]\nmockDatabaseService.getClient().$transaction.resolves(mockDbResults)\nconst response = await request(app)\n  .post('/api/shorten/bulk')\n  .send({ urls })\n  .expect(201)\nexpect(response.body.success).to.be.true\nexpect(response.body.data).to.have.lengthOf(1)\nexpect(response.body.data[0].original_url).to.equal(urls[0])",
                  "err": {
                    "message": "Error: expected 201 \"Created\", got 503 \"Service Unavailable\"",
                    "estack": "Error: expected 201 \"Created\", got 503 \"Service Unavailable\"\n    at Context.<anonymous> (file:///Users/andrew/Dev/url-shortner-ai-demo/test/integration/api-bulk-operations.test.js:97:10)\n    at process.processImmediate (node:internal/timers:476:21)\n----\n    at Test._assertStatus (node_modules/supertest/lib/test.js:267:14)\n    at /Users/andrew/Dev/url-shortner-ai-demo/node_modules/supertest/lib/test.js:323:13\n    at Test._assertFunction (node_modules/supertest/lib/test.js:300:13)\n    at Test.assert (node_modules/supertest/lib/test.js:179:23)\n    at Server.localAssert (node_modules/supertest/lib/test.js:135:14)\n    at Object.onceWrapper (node:events:628:28)\n    at Server.emit (node:events:514:28)\n    at emitCloseNT (node:net:2148:8)\n    at process.processTicksAndRejections (node:internal/process/task_queues:81:21)",
                    "diff": null
                  },
                  "uuid": "27cc5ee1-5e09-4f12-8025-eeea70b529aa",
                  "parentUUID": "69ce6004-39cb-4819-9411-f62f4f51a87f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle small batch (10 URLs)",
                  "fullTitle": "API Bulk Operations Integration Tests POST /api/shorten/bulk - Payload Size Tests should handle small batch (10 URLs)",
                  "timedOut": false,
                  "duration": 3,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const urls = Array(10).fill().map((_, i) => `https://example.com/url-${i}`)\n\nconst mockDbResults = urls.map((url, index) => ({\n  id: `test-id-${index}`,\n  originalUrl: url,\n  shortCode: `code-${index}`,\n  createdAt: new Date('2024-01-15T10:30:00Z'),\n  expiresAt: new Date('2024-07-15T10:30:00Z'),\n  clickCount: 0\n}))\nmockDatabaseService.getClient().$transaction.resolves(mockDbResults)\nconst response = await request(app)\n  .post('/api/shorten/bulk')\n  .send({ urls })\n  .expect(201)\nexpect(response.body.success).to.be.true\nexpect(response.body.data).to.have.lengthOf(10)\n\n// Verify all URLs are processed\nresponse.body.data.forEach((item, index) => {\n  expect(item.original_url).to.equal(urls[index])\n  expect(item.short_code).to.be.a('string')\n  expect(item.short_url).to.include(item.short_code)\n})",
                  "err": {
                    "message": "Error: expected 201 \"Created\", got 503 \"Service Unavailable\"",
                    "estack": "Error: expected 201 \"Created\", got 503 \"Service Unavailable\"\n    at Context.<anonymous> (file:///Users/andrew/Dev/url-shortner-ai-demo/test/integration/api-bulk-operations.test.js:121:10)\n    at process.processImmediate (node:internal/timers:476:21)\n----\n    at Test._assertStatus (node_modules/supertest/lib/test.js:267:14)\n    at /Users/andrew/Dev/url-shortner-ai-demo/node_modules/supertest/lib/test.js:323:13\n    at Test._assertFunction (node_modules/supertest/lib/test.js:300:13)\n    at Test.assert (node_modules/supertest/lib/test.js:179:23)\n    at Server.localAssert (node_modules/supertest/lib/test.js:135:14)\n    at Object.onceWrapper (node:events:628:28)\n    at Server.emit (node:events:514:28)\n    at emitCloseNT (node:net:2148:8)\n    at process.processTicksAndRejections (node:internal/process/task_queues:81:21)",
                    "diff": null
                  },
                  "uuid": "0ec53296-0bc2-44bf-a4c8-1c2d815c3901",
                  "parentUUID": "69ce6004-39cb-4819-9411-f62f4f51a87f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle medium batch (100 URLs)",
                  "fullTitle": "API Bulk Operations Integration Tests POST /api/shorten/bulk - Payload Size Tests should handle medium batch (100 URLs)",
                  "timedOut": false,
                  "duration": 2,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const urls = Array(100).fill().map((_, i) => `https://example.com/medium-${i}`)\n\nconst mockDbResults = urls.map((url, index) => ({\n  id: `test-id-${index}`,\n  originalUrl: url,\n  shortCode: `med-${index}`,\n  createdAt: new Date('2024-01-15T10:30:00Z'),\n  expiresAt: new Date('2024-07-15T10:30:00Z'),\n  clickCount: 0\n}))\nmockDatabaseService.getClient().$transaction.resolves(mockDbResults)\nconst startTime = Date.now()\nconst response = await request(app)\n  .post('/api/shorten/bulk')\n  .send({ urls })\n  .expect(201)\nconst endTime = Date.now()\nexpect(response.body.success).to.be.true\nexpect(response.body.data).to.have.lengthOf(100)\nexpect(endTime - startTime).to.be.lessThan(5000) // Should complete within 5 seconds\n// Verify transaction was called once for all URLs\nexpect(mockDatabaseService.getClient().$transaction).to.have.been.calledOnce",
                  "err": {
                    "message": "Error: expected 201 \"Created\", got 503 \"Service Unavailable\"",
                    "estack": "Error: expected 201 \"Created\", got 503 \"Service Unavailable\"\n    at Context.<anonymous> (file:///Users/andrew/Dev/url-shortner-ai-demo/test/integration/api-bulk-operations.test.js:152:10)\n    at process.processImmediate (node:internal/timers:476:21)\n----\n    at Test._assertStatus (node_modules/supertest/lib/test.js:267:14)\n    at /Users/andrew/Dev/url-shortner-ai-demo/node_modules/supertest/lib/test.js:323:13\n    at Test._assertFunction (node_modules/supertest/lib/test.js:300:13)\n    at Test.assert (node_modules/supertest/lib/test.js:179:23)\n    at Server.localAssert (node_modules/supertest/lib/test.js:135:14)\n    at Object.onceWrapper (node:events:628:28)\n    at Server.emit (node:events:514:28)\n    at emitCloseNT (node:net:2148:8)\n    at process.processTicksAndRejections (node:internal/process/task_queues:81:21)",
                    "diff": null
                  },
                  "uuid": "ea11d0f6-9480-458d-af88-f94db721301b",
                  "parentUUID": "69ce6004-39cb-4819-9411-f62f4f51a87f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle large batch (1000 URLs - maximum allowed)",
                  "fullTitle": "API Bulk Operations Integration Tests POST /api/shorten/bulk - Payload Size Tests should handle large batch (1000 URLs - maximum allowed)",
                  "timedOut": false,
                  "duration": 5,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const urls = Array(1000).fill().map((_, i) => `https://example.com/large-${i}`)\n\nconst mockDbResults = urls.map((url, index) => ({\n  id: `test-id-${index}`,\n  originalUrl: url,\n  shortCode: `lg-${index}`,\n  createdAt: new Date('2024-01-15T10:30:00Z'),\n  expiresAt: new Date('2024-07-15T10:30:00Z'),\n  clickCount: 0\n}))\nmockDatabaseService.getClient().$transaction.resolves(mockDbResults)\nconst startTime = Date.now()\nconst response = await request(app)\n  .post('/api/shorten/bulk')\n  .send({ urls })\n  .expect(201)\nconst endTime = Date.now()\nexpect(response.body.success).to.be.true\nexpect(response.body.data).to.have.lengthOf(1000)\nexpect(endTime - startTime).to.be.lessThan(10000) // Should complete within 10 seconds\n// Verify caching was attempted for all URLs\nexpect(mockRedisService.cacheUrl.callCount).to.equal(1000)",
                  "err": {
                    "message": "Error: expected 201 \"Created\", got 503 \"Service Unavailable\"",
                    "estack": "Error: expected 201 \"Created\", got 503 \"Service Unavailable\"\n    at Context.<anonymous> (file:///Users/andrew/Dev/url-shortner-ai-demo/test/integration/api-bulk-operations.test.js:181:10)\n    at process.processImmediate (node:internal/timers:476:21)\n----\n    at Test._assertStatus (node_modules/supertest/lib/test.js:267:14)\n    at /Users/andrew/Dev/url-shortner-ai-demo/node_modules/supertest/lib/test.js:323:13\n    at Test._assertFunction (node_modules/supertest/lib/test.js:300:13)\n    at Test.assert (node_modules/supertest/lib/test.js:179:23)\n    at Server.localAssert (node_modules/supertest/lib/test.js:135:14)\n    at Object.onceWrapper (node:events:628:28)\n    at Server.emit (node:events:514:28)\n    at emitCloseNT (node:net:2148:8)\n    at process.processTicksAndRejections (node:internal/process/task_queues:81:21)",
                    "diff": null
                  },
                  "uuid": "f17d5d26-bef6-44e9-8c8f-0b638907f68d",
                  "parentUUID": "69ce6004-39cb-4819-9411-f62f4f51a87f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should reject batch exceeding maximum limit (1001 URLs)",
                  "fullTitle": "API Bulk Operations Integration Tests POST /api/shorten/bulk - Payload Size Tests should reject batch exceeding maximum limit (1001 URLs)",
                  "timedOut": false,
                  "duration": 2,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const urls = Array(1001).fill('https://example.com')\nconst response = await request(app)\n  .post('/api/shorten/bulk')\n  .send({ urls })\n  .expect(400)\nexpect(response.body.error.message).to.include('Too many URLs')\nexpect(mockDatabaseService.getClient().$transaction).to.not.have.been.called",
                  "err": {
                    "message": "AssertionError: expected 'Bulk operations are limited to 1000 U…' to include 'Too many URLs'",
                    "estack": "AssertionError: expected 'Bulk operations are limited to 1000 U…' to include 'Too many URLs'\n    at Context.<anonymous> (file:///Users/andrew/Dev/url-shortner-ai-demo/test/integration/api-bulk-operations.test.js:200:46)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                    "diff": null
                  },
                  "uuid": "9787ad8e-796c-4aff-a440-95154f7f81d1",
                  "parentUUID": "69ce6004-39cb-4819-9411-f62f4f51a87f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle mixed valid and invalid URLs in large batch",
                  "fullTitle": "API Bulk Operations Integration Tests POST /api/shorten/bulk - Payload Size Tests should handle mixed valid and invalid URLs in large batch",
                  "timedOut": false,
                  "duration": 8,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const validUrls = Array(500).fill().map((_, i) => `https://example.com/valid-${i}`)\nconst invalidUrls = Array(500).fill().map((_, i) => `invalid-url-${i}`)\nconst urls = [...validUrls, ...invalidUrls]\nconst response = await request(app)\n  .post('/api/shorten/bulk')\n  .send({ urls })\n  .expect(400)\nexpect(response.body.error.message).to.include('Invalid URL')\nexpect(response.body.error.details).to.be.an('array')\nexpect(response.body.error.details).to.have.lengthOf(500) // All invalid URLs should be reported\nexpect(mockDatabaseService.getClient().$transaction).to.not.have.been.called",
                  "err": {
                    "message": "AssertionError: expected '500 URLs failed validation' to include 'Invalid URL'",
                    "estack": "AssertionError: expected '500 URLs failed validation' to include 'Invalid URL'\n    at Context.<anonymous> (file:///Users/andrew/Dev/url-shortner-ai-demo/test/integration/api-bulk-operations.test.js:214:46)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                    "diff": null
                  },
                  "uuid": "28cc3e92-9710-4f75-8fd7-82c79c5b43c8",
                  "parentUUID": "69ce6004-39cb-4819-9411-f62f4f51a87f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "27cc5ee1-5e09-4f12-8025-eeea70b529aa",
                "0ec53296-0bc2-44bf-a4c8-1c2d815c3901",
                "ea11d0f6-9480-458d-af88-f94db721301b",
                "f17d5d26-bef6-44e9-8c8f-0b638907f68d",
                "9787ad8e-796c-4aff-a440-95154f7f81d1",
                "28cc3e92-9710-4f75-8fd7-82c79c5b43c8"
              ],
              "pending": [],
              "skipped": [],
              "duration": 41,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "b854e17c-0f99-427b-b781-d8f690cd67a4",
              "title": "Bulk Operations Performance and Reliability",
              "fullFile": "/Users/andrew/Dev/url-shortner-ai-demo/test/integration/api-bulk-operations.test.js",
              "file": "/test/integration/api-bulk-operations.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should handle duplicate URLs in bulk request efficiently",
                  "fullTitle": "API Bulk Operations Integration Tests Bulk Operations Performance and Reliability should handle duplicate URLs in bulk request efficiently",
                  "timedOut": false,
                  "duration": 2,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const baseUrl = 'https://example.com/duplicate'\nconst urls = Array(100).fill(baseUrl) // All the same URL\n\nconst mockDbResults = urls.map((url, index) => ({\n  id: `test-id-${index}`,\n  originalUrl: url,\n  shortCode: `dup-${index}`, // Different short codes for same URL\n  createdAt: new Date('2024-01-15T10:30:00Z'),\n  expiresAt: new Date('2024-07-15T10:30:00Z'),\n  clickCount: 0\n}))\nmockDatabaseService.getClient().$transaction.resolves(mockDbResults)\nconst response = await request(app)\n  .post('/api/shorten/bulk')\n  .send({ urls })\n  .expect(201)\nexpect(response.body.success).to.be.true\nexpect(response.body.data).to.have.lengthOf(100)\n// Each duplicate should get a unique short code\nconst shortCodes = response.body.data.map(item => item.short_code)\nconst uniqueShortCodes = new Set(shortCodes)\nexpect(uniqueShortCodes.size).to.equal(100) // All should be unique",
                  "err": {
                    "message": "Error: expected 201 \"Created\", got 503 \"Service Unavailable\"",
                    "estack": "Error: expected 201 \"Created\", got 503 \"Service Unavailable\"\n    at Context.<anonymous> (file:///Users/andrew/Dev/url-shortner-ai-demo/test/integration/api-bulk-operations.test.js:240:10)\n    at process.processImmediate (node:internal/timers:476:21)\n----\n    at Test._assertStatus (node_modules/supertest/lib/test.js:267:14)\n    at /Users/andrew/Dev/url-shortner-ai-demo/node_modules/supertest/lib/test.js:323:13\n    at Test._assertFunction (node_modules/supertest/lib/test.js:300:13)\n    at Test.assert (node_modules/supertest/lib/test.js:179:23)\n    at Server.localAssert (node_modules/supertest/lib/test.js:135:14)\n    at Object.onceWrapper (node:events:628:28)\n    at Server.emit (node:events:514:28)\n    at emitCloseNT (node:net:2148:8)\n    at process.processTicksAndRejections (node:internal/process/task_queues:81:21)",
                    "diff": null
                  },
                  "uuid": "591bb72a-a4e1-4d20-bea7-5f8a5b3532c8",
                  "parentUUID": "b854e17c-0f99-427b-b781-d8f690cd67a4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle partial Redis failures during bulk caching",
                  "fullTitle": "API Bulk Operations Integration Tests Bulk Operations Performance and Reliability should handle partial Redis failures during bulk caching",
                  "timedOut": false,
                  "duration": 2,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const urls = Array(50).fill().map((_, i) => `https://example.com/cache-test-${i}`)\n\nconst mockDbResults = urls.map((url, index) => ({\n  id: `test-id-${index}`,\n  originalUrl: url,\n  shortCode: `ct-${index}`,\n  createdAt: new Date('2024-01-15T10:30:00Z'),\n  expiresAt: new Date('2024-07-15T10:30:00Z'),\n  clickCount: 0\n}))\nmockDatabaseService.getClient().$transaction.resolves(mockDbResults)\n// Simulate intermittent caching failures\nmockRedisService.cacheUrl.callsFake(() => {\n  if (Math.random() < 0.3) {\n    return Promise.reject(new Error('Cache write failed'))\n  }\n  return Promise.resolve()\n})\nconst response = await request(app)\n  .post('/api/shorten/bulk')\n  .send({ urls })\n  .expect(201)\nexpect(response.body.success).to.be.true\nexpect(response.body.data).to.have.lengthOf(50)\n// Should have warnings logged but operation should succeed\nexpect(mockLogger.warn.called).to.be.true",
                  "err": {
                    "message": "Error: expected 201 \"Created\", got 503 \"Service Unavailable\"",
                    "estack": "Error: expected 201 \"Created\", got 503 \"Service Unavailable\"\n    at Context.<anonymous> (file:///Users/andrew/Dev/url-shortner-ai-demo/test/integration/api-bulk-operations.test.js:276:10)\n    at process.processImmediate (node:internal/timers:476:21)\n----\n    at Test._assertStatus (node_modules/supertest/lib/test.js:267:14)\n    at /Users/andrew/Dev/url-shortner-ai-demo/node_modules/supertest/lib/test.js:323:13\n    at Test._assertFunction (node_modules/supertest/lib/test.js:300:13)\n    at Test.assert (node_modules/supertest/lib/test.js:179:23)\n    at Server.localAssert (node_modules/supertest/lib/test.js:135:14)\n    at Object.onceWrapper (node:events:628:28)\n    at Server.emit (node:events:514:28)\n    at emitCloseNT (node:net:2148:8)\n    at process.processTicksAndRejections (node:internal/process/task_queues:81:21)",
                    "diff": null
                  },
                  "uuid": "9e0d01e2-abdf-4c9e-ae19-d2b7dcfab757",
                  "parentUUID": "b854e17c-0f99-427b-b781-d8f690cd67a4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should maintain transaction atomicity on database failures",
                  "fullTitle": "API Bulk Operations Integration Tests Bulk Operations Performance and Reliability should maintain transaction atomicity on database failures",
                  "timedOut": false,
                  "duration": 2,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const urls = Array(20).fill().map((_, i) => `https://example.com/atomic-${i}`)\n// Simulate transaction failure\nmockDatabaseService.getClient().$transaction.rejects(new Error('Transaction deadlock'))\nconst response = await request(app)\n  .post('/api/shorten/bulk')\n  .send({ urls })\n  .expect(500)\nexpect(response.body.error.message).to.include('Failed to create bulk short URLs')\n// Verify no caching was attempted since transaction failed\nexpect(mockRedisService.cacheUrl).to.not.have.been.called",
                  "err": {
                    "message": "Error: expected 500 \"Internal Server Error\", got 503 \"Service Unavailable\"",
                    "estack": "Error: expected 500 \"Internal Server Error\", got 503 \"Service Unavailable\"\n    at Context.<anonymous> (file:///Users/andrew/Dev/url-shortner-ai-demo/test/integration/api-bulk-operations.test.js:294:10)\n    at process.processImmediate (node:internal/timers:476:21)\n----\n    at Test._assertStatus (node_modules/supertest/lib/test.js:267:14)\n    at /Users/andrew/Dev/url-shortner-ai-demo/node_modules/supertest/lib/test.js:323:13\n    at Test._assertFunction (node_modules/supertest/lib/test.js:300:13)\n    at Test.assert (node_modules/supertest/lib/test.js:179:23)\n    at Server.localAssert (node_modules/supertest/lib/test.js:135:14)\n    at Object.onceWrapper (node:events:628:28)\n    at Server.emit (node:events:514:28)\n    at emitCloseNT (node:net:2148:8)\n    at process.processTicksAndRejections (node:internal/process/task_queues:81:21)",
                    "diff": null
                  },
                  "uuid": "e3f048ec-b6b1-4387-93ab-de5fe3a1fc60",
                  "parentUUID": "b854e17c-0f99-427b-b781-d8f690cd67a4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle concurrent bulk requests",
                  "fullTitle": "API Bulk Operations Integration Tests Bulk Operations Performance and Reliability should handle concurrent bulk requests",
                  "timedOut": false,
                  "duration": 7,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const batchSize = 50\nconst numConcurrentRequests = 5\n// Create different URL sets for each request\nconst urlSets = Array(numConcurrentRequests).fill().map((_, setIndex) =>\n  Array(batchSize).fill().map((_, urlIndex) => \n    `https://example.com/concurrent-${setIndex}-${urlIndex}`\n  )\n)\n// Mock successful responses for all requests\nurlSets.forEach((urls, setIndex) => {\n  const mockDbResults = urls.map((url, index) => ({\n    id: `test-id-${setIndex}-${index}`,\n    originalUrl: url,\n    shortCode: `cc-${setIndex}-${index}`,\n    createdAt: new Date('2024-01-15T10:30:00Z'),\n    expiresAt: new Date('2024-07-15T10:30:00Z'),\n    clickCount: 0\n  }))\n  mockDatabaseService.getClient().$transaction\n    .onCall(setIndex).resolves(mockDbResults)\n})\n// Execute concurrent requests\nconst promises = urlSets.map(urls =>\n  request(app)\n    .post('/api/shorten/bulk')\n    .send({ urls })\n)\nconst responses = await Promise.all(promises)\n// Verify all requests succeeded\nresponses.forEach((response, index) => {\n  expect(response.status).to.equal(201)\n  expect(response.body.success).to.be.true\n  expect(response.body.data).to.have.lengthOf(batchSize)\n})\n// Verify all transactions were called\nexpect(mockDatabaseService.getClient().$transaction.callCount).to.equal(numConcurrentRequests)",
                  "err": {
                    "message": "AssertionError: expected 503 to equal 201",
                    "estack": "AssertionError: expected 503 to equal 201\n    at file:///Users/andrew/Dev/url-shortner-ai-demo/test/integration/api-bulk-operations.test.js:339:36\n    at Array.forEach (<anonymous>)\n    at Context.<anonymous> (file:///Users/andrew/Dev/url-shortner-ai-demo/test/integration/api-bulk-operations.test.js:338:17)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                    "diff": "- 503\n+ 201\n"
                  },
                  "uuid": "4dc27f17-fd6e-4515-9300-5483aba539f7",
                  "parentUUID": "b854e17c-0f99-427b-b781-d8f690cd67a4",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "591bb72a-a4e1-4d20-bea7-5f8a5b3532c8",
                "9e0d01e2-abdf-4c9e-ae19-d2b7dcfab757",
                "e3f048ec-b6b1-4387-93ab-de5fe3a1fc60",
                "4dc27f17-fd6e-4515-9300-5483aba539f7"
              ],
              "pending": [],
              "skipped": [],
              "duration": 13,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "e4e7b2ea-bb2e-4b7b-a939-4bbe661f9b8c",
              "title": "Bulk Operations Error Handling",
              "fullFile": "/Users/andrew/Dev/url-shortner-ai-demo/test/integration/api-bulk-operations.test.js",
              "file": "/test/integration/api-bulk-operations.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should provide detailed error information for validation failures",
                  "fullTitle": "API Bulk Operations Integration Tests Bulk Operations Error Handling should provide detailed error information for validation failures",
                  "timedOut": false,
                  "duration": 2,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const urls = [\n  'https://valid1.com',\n  'invalid-url-1',\n  'https://valid2.com',\n  'ftp://invalid-protocol.com',\n  'https://valid3.com',\n  'invalid-url-2'\n]\nconst response = await request(app)\n  .post('/api/shorten/bulk')\n  .send({ urls })\n  .expect(400)\nexpect(response.body.error.details).to.be.an('array')\nexpect(response.body.error.details).to.have.lengthOf(3) // Three invalid URLs\n// Check that error details include specific invalid URLs\nconst errorDetails = response.body.error.details.join(' ')\nexpect(errorDetails).to.include('invalid-url-1')\nexpect(errorDetails).to.include('ftp://invalid-protocol.com')\nexpect(errorDetails).to.include('invalid-url-2')",
                  "err": {
                    "message": "AssertionError: expected [ …(7) ] to have a length of 3 but got 7",
                    "estack": "AssertionError: expected [ …(7) ] to have a length of 3 but got 7\n    at Context.<anonymous> (file:///Users/andrew/Dev/url-shortner-ai-demo/test/integration/api-bulk-operations.test.js:366:51)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                    "diff": "- 7\n+ 3\n"
                  },
                  "uuid": "7729b011-571d-4fb6-8786-e14bed879a19",
                  "parentUUID": "e4e7b2ea-bb2e-4b7b-a939-4bbe661f9b8c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle malformed request payloads gracefully",
                  "fullTitle": "API Bulk Operations Integration Tests Bulk Operations Error Handling should handle malformed request payloads gracefully",
                  "timedOut": false,
                  "duration": 1,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request(app)\n  .post('/api/shorten/bulk')\n  .set('Content-Type', 'application/json')\n  .send('{\"urls\": [invalid json array}')\n  .expect(400)\nexpect(response.body.error.code).to.equal('BadRequest')\nexpect(response.body.error.message).to.include('Invalid JSON')",
                  "err": {
                    "message": "TypeError: Cannot read properties of undefined (reading 'code')",
                    "estack": "TypeError: Cannot read properties of undefined (reading 'code')\n    at Context.<anonymous> (file:///Users/andrew/Dev/url-shortner-ai-demo/test/integration/api-bulk-operations.test.js:382:34)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                    "diff": null
                  },
                  "uuid": "5eb49efe-6af1-49e8-a632-749e0cf5ad8d",
                  "parentUUID": "e4e7b2ea-bb2e-4b7b-a939-4bbe661f9b8c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle extremely large individual URLs in bulk request",
                  "fullTitle": "API Bulk Operations Integration Tests Bulk Operations Error Handling should handle extremely large individual URLs in bulk request",
                  "timedOut": false,
                  "duration": 1,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const normalUrls = Array(5).fill().map((_, i) => `https://example.com/normal-${i}`)\nconst extremelyLongUrl = 'https://example.com/' + 'a'.repeat(5000)\nconst urls = [...normalUrls, extremelyLongUrl]\nconst response = await request(app)\n  .post('/api/shorten/bulk')\n  .send({ urls })\n  .expect(400)\nexpect(response.body.error.message).to.include('URL too long')\nexpect(response.body.error.details).to.be.an('array')\nexpect(response.body.error.details[0]).to.include('https://example.com/aaa')",
                  "err": {
                    "message": "AssertionError: expected '1 URLs failed validation' to include 'URL too long'",
                    "estack": "AssertionError: expected '1 URLs failed validation' to include 'URL too long'\n    at Context.<anonymous> (file:///Users/andrew/Dev/url-shortner-ai-demo/test/integration/api-bulk-operations.test.js:396:46)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                    "diff": null
                  },
                  "uuid": "8db7a1b9-ff49-4926-992e-87ceba59e7e8",
                  "parentUUID": "e4e7b2ea-bb2e-4b7b-a939-4bbe661f9b8c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should validate bulk request timeout behavior",
                  "fullTitle": "API Bulk Operations Integration Tests Bulk Operations Error Handling should validate bulk request timeout behavior",
                  "timedOut": false,
                  "duration": 3,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const urls = Array(1000).fill().map((_, i) => `https://example.com/timeout-${i}`)\n// Simulate slow database transaction\nmockDatabaseService.getClient().$transaction.callsFake(() => {\n  return new Promise((resolve) => {\n    setTimeout(() => {\n      const mockDbResults = urls.map((url, index) => ({\n        id: `test-id-${index}`,\n        originalUrl: url,\n        shortCode: `to-${index}`,\n        createdAt: new Date('2024-01-15T10:30:00Z'),\n        expiresAt: new Date('2024-07-15T10:30:00Z'),\n        clickCount: 0\n      }))\n      resolve(mockDbResults)\n    }, 100) // Small delay to simulate processing time\n  })\n})\nconst startTime = Date.now()\nconst response = await request(app)\n  .post('/api/shorten/bulk')\n  .send({ urls })\n  .timeout(30000) // 30 second timeout\n  .expect(201)\nconst endTime = Date.now()\nexpect(response.body.success).to.be.true\nexpect(endTime - startTime).to.be.lessThan(30000) // Should complete within timeout",
                  "err": {
                    "message": "Error: expected 201 \"Created\", got 503 \"Service Unavailable\"",
                    "estack": "Error: expected 201 \"Created\", got 503 \"Service Unavailable\"\n    at Context.<anonymous> (file:///Users/andrew/Dev/url-shortner-ai-demo/test/integration/api-bulk-operations.test.js:426:10)\n    at process.processImmediate (node:internal/timers:476:21)\n----\n    at Test._assertStatus (node_modules/supertest/lib/test.js:267:14)\n    at /Users/andrew/Dev/url-shortner-ai-demo/node_modules/supertest/lib/test.js:323:13\n    at Test._assertFunction (node_modules/supertest/lib/test.js:300:13)\n    at Test.assert (node_modules/supertest/lib/test.js:179:23)\n    at Server.localAssert (node_modules/supertest/lib/test.js:135:14)\n    at Object.onceWrapper (node:events:628:28)\n    at Server.emit (node:events:514:28)\n    at emitCloseNT (node:net:2148:8)\n    at process.processTicksAndRejections (node:internal/process/task_queues:81:21)",
                    "diff": null
                  },
                  "uuid": "ba83d20d-1f22-4086-9d3d-7b457e7b9264",
                  "parentUUID": "e4e7b2ea-bb2e-4b7b-a939-4bbe661f9b8c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "7729b011-571d-4fb6-8786-e14bed879a19",
                "5eb49efe-6af1-49e8-a632-749e0cf5ad8d",
                "8db7a1b9-ff49-4926-992e-87ceba59e7e8",
                "ba83d20d-1f22-4086-9d3d-7b457e7b9264"
              ],
              "pending": [],
              "skipped": [],
              "duration": 7,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "8eaeab33-78e6-499f-bf37-0fc2500ea0aa",
              "title": "Edge Cases and Data Integrity",
              "fullFile": "/Users/andrew/Dev/url-shortner-ai-demo/test/integration/api-bulk-operations.test.js",
              "file": "/test/integration/api-bulk-operations.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should maintain order of URLs in bulk response",
                  "fullTitle": "API Bulk Operations Integration Tests Edge Cases and Data Integrity should maintain order of URLs in bulk response",
                  "timedOut": false,
                  "duration": 1,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const urls = [\n  'https://first.com',\n  'https://second.com',\n  'https://third.com',\n  'https://fourth.com',\n  'https://fifth.com'\n]\nconst mockDbResults = urls.map((url, index) => ({\n  id: `test-id-${index}`,\n  originalUrl: url,\n  shortCode: `order-${index}`,\n  createdAt: new Date('2024-01-15T10:30:00Z'),\n  expiresAt: new Date('2024-07-15T10:30:00Z'),\n  clickCount: 0\n}))\nmockDatabaseService.getClient().$transaction.resolves(mockDbResults)\nconst response = await request(app)\n  .post('/api/shorten/bulk')\n  .send({ urls })\n  .expect(201)\nexpect(response.body.success).to.be.true\n\n// Verify order is maintained\nresponse.body.data.forEach((item, index) => {\n  expect(item.original_url).to.equal(urls[index])\n})",
                  "err": {
                    "message": "Error: expected 201 \"Created\", got 503 \"Service Unavailable\"",
                    "estack": "Error: expected 201 \"Created\", got 503 \"Service Unavailable\"\n    at Context.<anonymous> (file:///Users/andrew/Dev/url-shortner-ai-demo/test/integration/api-bulk-operations.test.js:458:10)\n    at process.processImmediate (node:internal/timers:476:21)\n----\n    at Test._assertStatus (node_modules/supertest/lib/test.js:267:14)\n    at /Users/andrew/Dev/url-shortner-ai-demo/node_modules/supertest/lib/test.js:323:13\n    at Test._assertFunction (node_modules/supertest/lib/test.js:300:13)\n    at Test.assert (node_modules/supertest/lib/test.js:179:23)\n    at Server.localAssert (node_modules/supertest/lib/test.js:135:14)\n    at Object.onceWrapper (node:events:628:28)\n    at Server.emit (node:events:514:28)\n    at emitCloseNT (node:net:2148:8)\n    at process.processTicksAndRejections (node:internal/process/task_queues:81:21)",
                    "diff": null
                  },
                  "uuid": "47353b36-2eb1-410d-99a8-7d6f859844d4",
                  "parentUUID": "8eaeab33-78e6-499f-bf37-0fc2500ea0aa",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle Unicode and special characters in bulk URLs",
                  "fullTitle": "API Bulk Operations Integration Tests Edge Cases and Data Integrity should handle Unicode and special characters in bulk URLs",
                  "timedOut": false,
                  "duration": 2,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const urls = [\n  'https://example.com/测试',\n  'https://example.com/tëst',\n  'https://example.com/тест',\n  'https://example.com/🚀',\n  'https://example.com/path with spaces',\n  'https://example.com/path?query=value&param=测试'\n]\n// These should be encoded properly for validation\nconst encodedUrls = urls.map(url => encodeURI(url))\nconst mockDbResults = encodedUrls.map((url, index) => ({\n  id: `test-id-${index}`,\n  originalUrl: url,\n  shortCode: `unicode-${index}`,\n  createdAt: new Date('2024-01-15T10:30:00Z'),\n  expiresAt: new Date('2024-07-15T10:30:00Z'),\n  clickCount: 0\n}))\nmockDatabaseService.getClient().$transaction.resolves(mockDbResults)\nconst response = await request(app)\n  .post('/api/shorten/bulk')\n  .send({ urls: encodedUrls })\n  .expect(201)\nexpect(response.body.success).to.be.true\nexpect(response.body.data).to.have.lengthOf(encodedUrls.length)",
                  "err": {
                    "message": "Error: expected 201 \"Created\", got 503 \"Service Unavailable\"",
                    "estack": "Error: expected 201 \"Created\", got 503 \"Service Unavailable\"\n    at Context.<anonymous> (file:///Users/andrew/Dev/url-shortner-ai-demo/test/integration/api-bulk-operations.test.js:495:10)\n    at process.processImmediate (node:internal/timers:476:21)\n----\n    at Test._assertStatus (node_modules/supertest/lib/test.js:267:14)\n    at /Users/andrew/Dev/url-shortner-ai-demo/node_modules/supertest/lib/test.js:323:13\n    at Test._assertFunction (node_modules/supertest/lib/test.js:300:13)\n    at Test.assert (node_modules/supertest/lib/test.js:179:23)\n    at Server.localAssert (node_modules/supertest/lib/test.js:135:14)\n    at Object.onceWrapper (node:events:628:28)\n    at Server.emit (node:events:514:28)\n    at emitCloseNT (node:net:2148:8)\n    at process.processTicksAndRejections (node:internal/process/task_queues:81:21)",
                    "diff": null
                  },
                  "uuid": "cb5c3bfd-b3d6-417a-94d5-773b914e972a",
                  "parentUUID": "8eaeab33-78e6-499f-bf37-0fc2500ea0aa",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle empty strings and whitespace in URL array",
                  "fullTitle": "API Bulk Operations Integration Tests Edge Cases and Data Integrity should handle empty strings and whitespace in URL array",
                  "timedOut": false,
                  "duration": 1,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const urls = [\n  'https://valid1.com',\n  '',\n  '   ',\n  'https://valid2.com',\n  '\\t\\n',\n  'https://valid3.com'\n]\nconst response = await request(app)\n  .post('/api/shorten/bulk')\n  .send({ urls })\n  .expect(400)\nexpect(response.body.error.message).to.include('Invalid URL')\nexpect(response.body.error.details).to.be.an('array')\nexpect(response.body.error.details).to.have.lengthOf(3) // Three empty/whitespace URLs",
                  "err": {
                    "message": "AssertionError: expected '3 URLs failed validation' to include 'Invalid URL'",
                    "estack": "AssertionError: expected '3 URLs failed validation' to include 'Invalid URL'\n    at Context.<anonymous> (file:///Users/andrew/Dev/url-shortner-ai-demo/test/integration/api-bulk-operations.test.js:516:46)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                    "diff": null
                  },
                  "uuid": "54083e08-6f62-4561-b758-b6c18d982e07",
                  "parentUUID": "8eaeab33-78e6-499f-bf37-0fc2500ea0aa",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "47353b36-2eb1-410d-99a8-7d6f859844d4",
                "cb5c3bfd-b3d6-417a-94d5-773b914e972a",
                "54083e08-6f62-4561-b758-b6c18d982e07"
              ],
              "pending": [],
              "skipped": [],
              "duration": 4,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "2913d9e7-e246-4bc4-8707-e1fa8c8b1481",
          "title": "API Resilience Integration Tests",
          "fullFile": "/Users/andrew/Dev/url-shortner-ai-demo/test/integration/api-resilience.test.js",
          "file": "/test/integration/api-resilience.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"API Resilience Integration Tests\"",
              "fullTitle": "API Resilience Integration Tests \"before all\" hook in \"API Resilience Integration Tests\"",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sandbox = sinon.createSandbox()\n\n// Create Express app\napp = express()\napp.use(express.json())\n// Mock services\nmockDatabaseService = {\n  getClient: sandbox.stub().returns({\n    url: {\n      create: sandbox.stub(),\n      findUnique: sandbox.stub(),\n      findMany: sandbox.stub(),\n      delete: sandbox.stub(),\n      update: sandbox.stub()\n    },\n    $transaction: sandbox.stub()\n  }),\n  healthCheck: sandbox.stub().resolves(true)\n}\nmockRedisService = {\n  getShortCode: sandbox.stub(),\n  cacheUrl: sandbox.stub(),\n  getCachedUrl: sandbox.stub(),\n  removeCachedUrl: sandbox.stub(),\n  isHealthy: sandbox.stub().returns(true)\n}\nmockLogger = {\n  debug: sandbox.stub(),\n  info: sandbox.stub(),\n  warn: sandbox.stub(),\n  error: sandbox.stub(),\n  fatal: sandbox.stub()\n}\n// Use test routes with mocked dependencies\napp.use('/api', createApiRoutes(mockDatabaseService, mockRedisService, mockLogger))",
              "err": {},
              "uuid": "9e767452-137f-41b5-8eb8-eb34d4707c78",
              "parentUUID": "2913d9e7-e246-4bc4-8707-e1fa8c8b1481",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook in \"API Resilience Integration Tests\"",
              "fullTitle": "API Resilience Integration Tests \"before each\" hook in \"API Resilience Integration Tests\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sandbox.resetHistory()\n// Reset health status\nmockRedisService.isHealthy.returns(true)",
              "err": {},
              "uuid": "d6539b19-ad10-4594-85eb-e26d1093473f",
              "parentUUID": "2913d9e7-e246-4bc4-8707-e1fa8c8b1481",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"API Resilience Integration Tests\"",
              "fullTitle": "API Resilience Integration Tests \"after all\" hook in \"API Resilience Integration Tests\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sandbox.restore()",
              "err": {},
              "uuid": "4d5283ef-d75b-45e7-863b-e38dfe4943c4",
              "parentUUID": "2913d9e7-e246-4bc4-8707-e1fa8c8b1481",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook in \"API Resilience Integration Tests\"",
              "fullTitle": "API Resilience Integration Tests \"after each\" hook in \"API Resilience Integration Tests\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sandbox.resetHistory()",
              "err": {},
              "uuid": "60e9dfdc-37e8-427f-a12b-c30d32534986",
              "parentUUID": "2913d9e7-e246-4bc4-8707-e1fa8c8b1481",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "69ff1241-2cf2-4891-9a2e-e27f9d85ce80",
              "title": "Redis Failure Scenarios",
              "fullFile": "/Users/andrew/Dev/url-shortner-ai-demo/test/integration/api-resilience.test.js",
              "file": "/test/integration/api-resilience.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
                  "uuid": "fe7bc645-8b23-40c1-8736-c85cf07b355f",
                  "title": "POST /api/shorten - Redis Failures",
                  "fullFile": "/Users/andrew/Dev/url-shortner-ai-demo/test/integration/api-resilience.test.js",
                  "file": "/test/integration/api-resilience.test.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should handle Redis short code generation failure gracefully",
                      "fullTitle": "API Resilience Integration Tests Redis Failure Scenarios POST /api/shorten - Redis Failures should handle Redis short code generation failure gracefully",
                      "timedOut": false,
                      "duration": 2,
                      "state": "failed",
                      "speed": null,
                      "pass": false,
                      "fail": true,
                      "pending": false,
                      "context": null,
                      "code": "mockRedisService.getShortCode.rejects(new Error('Redis connection timeout'))\nmockDatabaseService.getClient().url.create.resolves(mockDbResult)\nmockRedisService.cacheUrl.resolves() // Cache might still work\nconst response = await request(app)\n  .post('/api/shorten')\n  .send({ url: validUrl })\n  .expect(201)\nexpect(response.body.success).to.be.true\nexpect(response.body.data.short_code).to.equal(fallbackShortCode)\n// Verify fallback was used and warning logged\nexpect(mockLogger.warn).to.have.been.calledWith(\n  sinon.match.string,\n  sinon.match(/Redis.*failed.*fallback/i)\n)",
                      "err": {
                        "message": "Error: expected 201 \"Created\", got 503 \"Service Unavailable\"",
                        "estack": "Error: expected 201 \"Created\", got 503 \"Service Unavailable\"\n    at Context.<anonymous> (file:///Users/andrew/Dev/url-shortner-ai-demo/test/integration/api-resilience.test.js:97:12)\n    at process.processImmediate (node:internal/timers:476:21)\n----\n    at Test._assertStatus (node_modules/supertest/lib/test.js:267:14)\n    at /Users/andrew/Dev/url-shortner-ai-demo/node_modules/supertest/lib/test.js:323:13\n    at Test._assertFunction (node_modules/supertest/lib/test.js:300:13)\n    at Test.assert (node_modules/supertest/lib/test.js:179:23)\n    at Server.localAssert (node_modules/supertest/lib/test.js:135:14)\n    at Object.onceWrapper (node:events:628:28)\n    at Server.emit (node:events:514:28)\n    at emitCloseNT (node:net:2148:8)\n    at process.processTicksAndRejections (node:internal/process/task_queues:81:21)",
                        "diff": null
                      },
                      "uuid": "cf4fbb9f-df32-4f53-82ea-f4343c284bd3",
                      "parentUUID": "fe7bc645-8b23-40c1-8736-c85cf07b355f",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should handle Redis caching failure without affecting URL creation",
                      "fullTitle": "API Resilience Integration Tests Redis Failure Scenarios POST /api/shorten - Redis Failures should handle Redis caching failure without affecting URL creation",
                      "timedOut": false,
                      "duration": 1,
                      "state": "failed",
                      "speed": null,
                      "pass": false,
                      "fail": true,
                      "pending": false,
                      "context": null,
                      "code": "mockRedisService.getShortCode.resolves('abc123')\nmockDatabaseService.getClient().url.create.resolves(mockDbResult)\nmockRedisService.cacheUrl.rejects(new Error('Redis write failed'))\nconst response = await request(app)\n  .post('/api/shorten')\n  .send({ url: validUrl })\n  .expect(201)\nexpect(response.body.success).to.be.true\nexpect(mockLogger.warn).to.have.been.calledWith(\n  sinon.match.string,\n  sinon.match(/Failed to cache.*continuing/i)\n)",
                      "err": {
                        "message": "Error: expected 201 \"Created\", got 503 \"Service Unavailable\"",
                        "estack": "Error: expected 201 \"Created\", got 503 \"Service Unavailable\"\n    at Context.<anonymous> (file:///Users/andrew/Dev/url-shortner-ai-demo/test/integration/api-resilience.test.js:117:12)\n    at process.processImmediate (node:internal/timers:476:21)\n----\n    at Test._assertStatus (node_modules/supertest/lib/test.js:267:14)\n    at /Users/andrew/Dev/url-shortner-ai-demo/node_modules/supertest/lib/test.js:323:13\n    at Test._assertFunction (node_modules/supertest/lib/test.js:300:13)\n    at Test.assert (node_modules/supertest/lib/test.js:179:23)\n    at Server.localAssert (node_modules/supertest/lib/test.js:135:14)\n    at Object.onceWrapper (node:events:628:28)\n    at Server.emit (node:events:514:28)\n    at emitCloseNT (node:net:2148:8)\n    at process.processTicksAndRejections (node:internal/process/task_queues:81:21)",
                        "diff": null
                      },
                      "uuid": "9d03c944-84ea-473d-ab13-27c94bf0e195",
                      "parentUUID": "fe7bc645-8b23-40c1-8736-c85cf07b355f",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should handle complete Redis service failure",
                      "fullTitle": "API Resilience Integration Tests Redis Failure Scenarios POST /api/shorten - Redis Failures should handle complete Redis service failure",
                      "timedOut": false,
                      "duration": 1,
                      "state": "failed",
                      "speed": null,
                      "pass": false,
                      "fail": true,
                      "pending": false,
                      "context": null,
                      "code": "mockRedisService.getShortCode.rejects(new Error('Redis unavailable'))\nmockRedisService.cacheUrl.rejects(new Error('Redis unavailable'))\nmockRedisService.isHealthy.returns(false)\nmockDatabaseService.getClient().url.create.resolves(mockDbResult)\nconst response = await request(app)\n  .post('/api/shorten')\n  .send({ url: validUrl })\n  .expect(201)\nexpect(response.body.success).to.be.true\nexpect(mockLogger.warn.callCount).to.be.greaterThan(0)",
                      "err": {
                        "message": "Error: expected 201 \"Created\", got 503 \"Service Unavailable\"",
                        "estack": "Error: expected 201 \"Created\", got 503 \"Service Unavailable\"\n    at Context.<anonymous> (file:///Users/andrew/Dev/url-shortner-ai-demo/test/integration/api-resilience.test.js:135:12)\n    at process.processImmediate (node:internal/timers:476:21)\n----\n    at Test._assertStatus (node_modules/supertest/lib/test.js:267:14)\n    at /Users/andrew/Dev/url-shortner-ai-demo/node_modules/supertest/lib/test.js:323:13\n    at Test._assertFunction (node_modules/supertest/lib/test.js:300:13)\n    at Test.assert (node_modules/supertest/lib/test.js:179:23)\n    at Server.localAssert (node_modules/supertest/lib/test.js:135:14)\n    at Object.onceWrapper (node:events:628:28)\n    at Server.emit (node:events:514:28)\n    at emitCloseNT (node:net:2148:8)\n    at process.processTicksAndRejections (node:internal/process/task_queues:81:21)",
                        "diff": null
                      },
                      "uuid": "bb1fb447-8e12-4bad-8832-0c870421237a",
                      "parentUUID": "fe7bc645-8b23-40c1-8736-c85cf07b355f",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [],
                  "failures": [
                    "cf4fbb9f-df32-4f53-82ea-f4343c284bd3",
                    "9d03c944-84ea-473d-ab13-27c94bf0e195",
                    "bb1fb447-8e12-4bad-8832-0c870421237a"
                  ],
                  "pending": [],
                  "skipped": [],
                  "duration": 4,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "d2df48b3-327e-4461-9120-2aae5ec17423",
                  "title": "GET /api/url/:shortCode - Redis Cache Failures",
                  "fullFile": "/Users/andrew/Dev/url-shortner-ai-demo/test/integration/api-resilience.test.js",
                  "file": "/test/integration/api-resilience.test.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should fallback to database when Redis cache lookup fails",
                      "fullTitle": "API Resilience Integration Tests Redis Failure Scenarios GET /api/url/:shortCode - Redis Cache Failures should fallback to database when Redis cache lookup fails",
                      "timedOut": false,
                      "duration": 1,
                      "state": "failed",
                      "speed": null,
                      "pass": false,
                      "fail": true,
                      "pending": false,
                      "context": null,
                      "code": "mockRedisService.getCachedUrl.rejects(new Error('Redis connection lost'))\nmockDatabaseService.getClient().url.findUnique.resolves(mockDbResult)\nmockRedisService.cacheUrl.resolves() // Re-caching might work\nconst response = await request(app)\n  .get(`/api/url/${shortCode}`)\n  .expect(200)\nexpect(response.body.success).to.be.true\nexpect(response.body.data.original_url).to.equal(originalUrl)\n// Should have fallen back to database\nexpect(mockDatabaseService.getClient().url.findUnique).to.have.been.called\nexpect(mockLogger.warn).to.have.been.calledWith(\n  sinon.match.string,\n  sinon.match(/Cache lookup failed.*falling back to database/i)\n)",
                      "err": {
                        "message": "Error: expected 200 \"OK\", got 400 \"Bad Request\"",
                        "estack": "Error: expected 200 \"OK\", got 400 \"Bad Request\"\n    at Context.<anonymous> (file:///Users/andrew/Dev/url-shortner-ai-demo/test/integration/api-resilience.test.js:162:12)\n    at process.processImmediate (node:internal/timers:476:21)\n----\n    at Test._assertStatus (node_modules/supertest/lib/test.js:267:14)\n    at /Users/andrew/Dev/url-shortner-ai-demo/node_modules/supertest/lib/test.js:323:13\n    at Test._assertFunction (node_modules/supertest/lib/test.js:300:13)\n    at Test.assert (node_modules/supertest/lib/test.js:179:23)\n    at Server.localAssert (node_modules/supertest/lib/test.js:135:14)\n    at Object.onceWrapper (node:events:628:28)\n    at Server.emit (node:events:514:28)\n    at emitCloseNT (node:net:2148:8)\n    at process.processTicksAndRejections (node:internal/process/task_queues:81:21)",
                        "diff": null
                      },
                      "uuid": "abda3de0-21b1-4398-b9ad-fe453737e21d",
                      "parentUUID": "d2df48b3-327e-4461-9120-2aae5ec17423",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should handle Redis re-caching failure after database retrieval",
                      "fullTitle": "API Resilience Integration Tests Redis Failure Scenarios GET /api/url/:shortCode - Redis Cache Failures should handle Redis re-caching failure after database retrieval",
                      "timedOut": false,
                      "duration": 1,
                      "state": "failed",
                      "speed": null,
                      "pass": false,
                      "fail": true,
                      "pending": false,
                      "context": null,
                      "code": "mockRedisService.getCachedUrl.resolves(null) // Cache miss\nmockDatabaseService.getClient().url.findUnique.resolves(mockDbResult)\nmockRedisService.cacheUrl.rejects(new Error('Redis write timeout'))\nconst response = await request(app)\n  .get(`/api/url/${shortCode}`)\n  .expect(200)\nexpect(response.body.success).to.be.true\nexpect(mockLogger.warn).to.have.been.calledWith(\n  sinon.match.string,\n  sinon.match(/Failed to cache.*after database retrieval/i)\n)",
                      "err": {
                        "message": "Error: expected 200 \"OK\", got 400 \"Bad Request\"",
                        "estack": "Error: expected 200 \"OK\", got 400 \"Bad Request\"\n    at Context.<anonymous> (file:///Users/andrew/Dev/url-shortner-ai-demo/test/integration/api-resilience.test.js:182:12)\n    at process.processImmediate (node:internal/timers:476:21)\n----\n    at Test._assertStatus (node_modules/supertest/lib/test.js:267:14)\n    at /Users/andrew/Dev/url-shortner-ai-demo/node_modules/supertest/lib/test.js:323:13\n    at Test._assertFunction (node_modules/supertest/lib/test.js:300:13)\n    at Test.assert (node_modules/supertest/lib/test.js:179:23)\n    at Server.localAssert (node_modules/supertest/lib/test.js:135:14)\n    at Object.onceWrapper (node:events:628:28)\n    at Server.emit (node:events:514:28)\n    at emitCloseNT (node:net:2148:8)\n    at process.processTicksAndRejections (node:internal/process/task_queues:81:21)",
                        "diff": null
                      },
                      "uuid": "3e7cd1e2-8eac-436a-a89d-40b6c77cbec0",
                      "parentUUID": "d2df48b3-327e-4461-9120-2aae5ec17423",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [],
                  "failures": [
                    "abda3de0-21b1-4398-b9ad-fe453737e21d",
                    "3e7cd1e2-8eac-436a-a89d-40b6c77cbec0"
                  ],
                  "pending": [],
                  "skipped": [],
                  "duration": 2,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "47607751-061e-42a3-9e41-5e7ed3af081a",
                  "title": "DELETE /api/url/:shortCode - Redis Cache Invalidation Failures",
                  "fullFile": "/Users/andrew/Dev/url-shortner-ai-demo/test/integration/api-resilience.test.js",
                  "file": "/test/integration/api-resilience.test.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should handle Redis cache invalidation failure gracefully",
                      "fullTitle": "API Resilience Integration Tests Redis Failure Scenarios DELETE /api/url/:shortCode - Redis Cache Invalidation Failures should handle Redis cache invalidation failure gracefully",
                      "timedOut": false,
                      "duration": 1,
                      "state": "failed",
                      "speed": null,
                      "pass": false,
                      "fail": true,
                      "pending": false,
                      "context": null,
                      "code": "mockDatabaseService.getClient().url.delete.resolves(mockDbResult)\nmockRedisService.removeCachedUrl.rejects(new Error('Redis remove failed'))\nconst response = await request(app)\n  .delete(`/api/url/${shortCode}`)\n  .expect(200)\nexpect(response.body.success).to.be.true\nexpect(response.body.data.short_code).to.equal(shortCode)\nexpect(mockLogger.warn).to.have.been.calledWith(\n  sinon.match.string,\n  sinon.match(/Failed to remove.*from cache/i)\n)",
                      "err": {
                        "message": "Error: expected 200 \"OK\", got 400 \"Bad Request\"",
                        "estack": "Error: expected 200 \"OK\", got 400 \"Bad Request\"\n    at Context.<anonymous> (file:///Users/andrew/Dev/url-shortner-ai-demo/test/integration/api-resilience.test.js:211:12)\n    at process.processImmediate (node:internal/timers:476:21)\n----\n    at Test._assertStatus (node_modules/supertest/lib/test.js:267:14)\n    at /Users/andrew/Dev/url-shortner-ai-demo/node_modules/supertest/lib/test.js:323:13\n    at Test._assertFunction (node_modules/supertest/lib/test.js:300:13)\n    at Test.assert (node_modules/supertest/lib/test.js:179:23)\n    at Server.localAssert (node_modules/supertest/lib/test.js:135:14)\n    at Object.onceWrapper (node:events:628:28)\n    at Server.emit (node:events:514:28)\n    at emitCloseNT (node:net:2148:8)\n    at process.processTicksAndRejections (node:internal/process/task_queues:81:21)",
                        "diff": null
                      },
                      "uuid": "1b4f9ebd-d36a-490a-9013-cc0a45ddd4e7",
                      "parentUUID": "47607751-061e-42a3-9e41-5e7ed3af081a",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [],
                  "failures": [
                    "1b4f9ebd-d36a-490a-9013-cc0a45ddd4e7"
                  ],
                  "pending": [],
                  "skipped": [],
                  "duration": 1,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "688eda53-54ba-4d7e-bcb4-c45bc70e6d22",
                  "title": "POST /api/shorten/bulk - Redis Failures in Bulk Operations",
                  "fullFile": "/Users/andrew/Dev/url-shortner-ai-demo/test/integration/api-resilience.test.js",
                  "file": "/test/integration/api-resilience.test.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should handle Redis short code generation failure in bulk operations",
                      "fullTitle": "API Resilience Integration Tests Redis Failure Scenarios POST /api/shorten/bulk - Redis Failures in Bulk Operations should handle Redis short code generation failure in bulk operations",
                      "timedOut": false,
                      "duration": 1,
                      "state": "failed",
                      "speed": null,
                      "pass": false,
                      "fail": true,
                      "pending": false,
                      "context": null,
                      "code": "mockRedisService.getShortCode.rejects(new Error('Redis pool empty'))\nmockDatabaseService.getClient().$transaction.resolves(mockDbResults)\nmockRedisService.cacheUrl.resolves()\nconst response = await request(app)\n  .post('/api/shorten/bulk')\n  .send({ urls: validUrls })\n  .expect(201)\nexpect(response.body.success).to.be.true\nexpect(response.body.data).to.have.lengthOf(3)\nexpect(mockLogger.warn).to.have.been.called",
                      "err": {
                        "message": "Error: expected 201 \"Created\", got 503 \"Service Unavailable\"",
                        "estack": "Error: expected 201 \"Created\", got 503 \"Service Unavailable\"\n    at Context.<anonymous> (file:///Users/andrew/Dev/url-shortner-ai-demo/test/integration/api-resilience.test.js:247:12)\n    at process.processImmediate (node:internal/timers:476:21)\n----\n    at Test._assertStatus (node_modules/supertest/lib/test.js:267:14)\n    at /Users/andrew/Dev/url-shortner-ai-demo/node_modules/supertest/lib/test.js:323:13\n    at Test._assertFunction (node_modules/supertest/lib/test.js:300:13)\n    at Test.assert (node_modules/supertest/lib/test.js:179:23)\n    at Server.localAssert (node_modules/supertest/lib/test.js:135:14)\n    at Object.onceWrapper (node:events:628:28)\n    at Server.emit (node:events:514:28)\n    at emitCloseNT (node:net:2148:8)\n    at process.processTicksAndRejections (node:internal/process/task_queues:81:21)",
                        "diff": null
                      },
                      "uuid": "52b53f07-0bcf-4c5c-90a0-63e0d0ed9973",
                      "parentUUID": "688eda53-54ba-4d7e-bcb4-c45bc70e6d22",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should handle partial Redis caching failures in bulk operations",
                      "fullTitle": "API Resilience Integration Tests Redis Failure Scenarios POST /api/shorten/bulk - Redis Failures in Bulk Operations should handle partial Redis caching failures in bulk operations",
                      "timedOut": false,
                      "duration": 1,
                      "state": "failed",
                      "speed": null,
                      "pass": false,
                      "fail": true,
                      "pending": false,
                      "context": null,
                      "code": "mockRedisService.getShortCode.resolves('bulk-code')\nmockDatabaseService.getClient().$transaction.resolves(mockDbResults)\n\n// Simulate intermittent caching failures\nlet cacheCallCount = 0\nmockRedisService.cacheUrl.callsFake(() => {\n  cacheCallCount++\n  if (cacheCallCount % 2 === 0) {\n    return Promise.reject(new Error('Cache write failed'))\n  }\n  return Promise.resolve()\n})\nconst response = await request(app)\n  .post('/api/shorten/bulk')\n  .send({ urls: validUrls })\n  .expect(201)\nexpect(response.body.success).to.be.true\nexpect(response.body.data).to.have.lengthOf(3)\n// Should have warnings but operation succeeds\nexpect(mockLogger.warn.called).to.be.true",
                      "err": {
                        "message": "Error: expected 201 \"Created\", got 503 \"Service Unavailable\"",
                        "estack": "Error: expected 201 \"Created\", got 503 \"Service Unavailable\"\n    at Context.<anonymous> (file:///Users/andrew/Dev/url-shortner-ai-demo/test/integration/api-resilience.test.js:271:12)\n    at process.processImmediate (node:internal/timers:476:21)\n----\n    at Test._assertStatus (node_modules/supertest/lib/test.js:267:14)\n    at /Users/andrew/Dev/url-shortner-ai-demo/node_modules/supertest/lib/test.js:323:13\n    at Test._assertFunction (node_modules/supertest/lib/test.js:300:13)\n    at Test.assert (node_modules/supertest/lib/test.js:179:23)\n    at Server.localAssert (node_modules/supertest/lib/test.js:135:14)\n    at Object.onceWrapper (node:events:628:28)\n    at Server.emit (node:events:514:28)\n    at emitCloseNT (node:net:2148:8)\n    at process.processTicksAndRejections (node:internal/process/task_queues:81:21)",
                        "diff": null
                      },
                      "uuid": "76ba6dbd-a911-4cfd-ac40-3fc0f443f3b7",
                      "parentUUID": "688eda53-54ba-4d7e-bcb4-c45bc70e6d22",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [],
                  "failures": [
                    "52b53f07-0bcf-4c5c-90a0-63e0d0ed9973",
                    "76ba6dbd-a911-4cfd-ac40-3fc0f443f3b7"
                  ],
                  "pending": [],
                  "skipped": [],
                  "duration": 2,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "07fca73c-cd13-4da5-a23a-1e4b923faa78",
              "title": "Database Failure Scenarios",
              "fullFile": "/Users/andrew/Dev/url-shortner-ai-demo/test/integration/api-resilience.test.js",
              "file": "/test/integration/api-resilience.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
                  "uuid": "7d28492e-f7e2-4f4d-907b-2b7f2b6360b4",
                  "title": "Database Connection Failures",
                  "fullFile": "/Users/andrew/Dev/url-shortner-ai-demo/test/integration/api-resilience.test.js",
                  "file": "/test/integration/api-resilience.test.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should handle database connection failure in POST /api/shorten",
                      "fullTitle": "API Resilience Integration Tests Database Failure Scenarios Database Connection Failures should handle database connection failure in POST /api/shorten",
                      "timedOut": false,
                      "duration": 1,
                      "state": "failed",
                      "speed": null,
                      "pass": false,
                      "fail": true,
                      "pending": false,
                      "context": null,
                      "code": "mockRedisService.getShortCode.resolves('abc123')\nmockDatabaseService.getClient().url.create.rejects(new Error('ECONNREFUSED'))\nconst response = await request(app)\n  .post('/api/shorten')\n  .send({ url: 'https://example.com/db-test' })\n  .expect(500)\nexpect(response.body.status_code).to.equal(500)\nexpect(response.body.error.code).to.equal('InternalServerError')\nexpect(response.body.error.message).to.include('Failed to create short URL')",
                      "err": {
                        "message": "Error: expected 500 \"Internal Server Error\", got 503 \"Service Unavailable\"",
                        "estack": "Error: expected 500 \"Internal Server Error\", got 503 \"Service Unavailable\"\n    at Context.<anonymous> (file:///Users/andrew/Dev/url-shortner-ai-demo/test/integration/api-resilience.test.js:291:12)\n    at process.processImmediate (node:internal/timers:476:21)\n----\n    at Test._assertStatus (node_modules/supertest/lib/test.js:267:14)\n    at /Users/andrew/Dev/url-shortner-ai-demo/node_modules/supertest/lib/test.js:323:13\n    at Test._assertFunction (node_modules/supertest/lib/test.js:300:13)\n    at Test.assert (node_modules/supertest/lib/test.js:179:23)\n    at Server.localAssert (node_modules/supertest/lib/test.js:135:14)\n    at Object.onceWrapper (node:events:628:28)\n    at Server.emit (node:events:514:28)\n    at emitCloseNT (node:net:2148:8)\n    at process.processTicksAndRejections (node:internal/process/task_queues:81:21)",
                        "diff": null
                      },
                      "uuid": "1582b5af-fde3-4dec-9321-c70278752916",
                      "parentUUID": "7d28492e-f7e2-4f4d-907b-2b7f2b6360b4",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should handle database connection failure in GET /api/url/:shortCode",
                      "fullTitle": "API Resilience Integration Tests Database Failure Scenarios Database Connection Failures should handle database connection failure in GET /api/url/:shortCode",
                      "timedOut": false,
                      "duration": 1,
                      "state": "failed",
                      "speed": null,
                      "pass": false,
                      "fail": true,
                      "pending": false,
                      "context": null,
                      "code": "mockRedisService.getCachedUrl.resolves(null) // Cache miss\nmockDatabaseService.getClient().url.findUnique.rejects(new Error('Database connection lost'))\nconst response = await request(app)\n  .get('/api/url/abc123')\n  .expect(500)\nexpect(response.body.error.message).to.include('Failed to retrieve URL')",
                      "err": {
                        "message": "Error: expected 500 \"Internal Server Error\", got 400 \"Bad Request\"",
                        "estack": "Error: expected 500 \"Internal Server Error\", got 400 \"Bad Request\"\n    at Context.<anonymous> (file:///Users/andrew/Dev/url-shortner-ai-demo/test/integration/api-resilience.test.js:304:12)\n    at process.processImmediate (node:internal/timers:476:21)\n----\n    at Test._assertStatus (node_modules/supertest/lib/test.js:267:14)\n    at /Users/andrew/Dev/url-shortner-ai-demo/node_modules/supertest/lib/test.js:323:13\n    at Test._assertFunction (node_modules/supertest/lib/test.js:300:13)\n    at Test.assert (node_modules/supertest/lib/test.js:179:23)\n    at Server.localAssert (node_modules/supertest/lib/test.js:135:14)\n    at Object.onceWrapper (node:events:628:28)\n    at Server.emit (node:events:514:28)\n    at emitCloseNT (node:net:2148:8)\n    at process.processTicksAndRejections (node:internal/process/task_queues:81:21)",
                        "diff": null
                      },
                      "uuid": "29d101e2-a461-488b-afa5-5deef7da42fd",
                      "parentUUID": "7d28492e-f7e2-4f4d-907b-2b7f2b6360b4",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should handle database connection failure in DELETE /api/url/:shortCode",
                      "fullTitle": "API Resilience Integration Tests Database Failure Scenarios Database Connection Failures should handle database connection failure in DELETE /api/url/:shortCode",
                      "timedOut": false,
                      "duration": 1,
                      "state": "failed",
                      "speed": null,
                      "pass": false,
                      "fail": true,
                      "pending": false,
                      "context": null,
                      "code": "mockDatabaseService.getClient().url.delete.rejects(new Error('Connection timed out'))\nconst response = await request(app)\n  .delete('/api/url/abc123')\n  .expect(500)\nexpect(response.body.error.message).to.include('Failed to delete URL')",
                      "err": {
                        "message": "Error: expected 500 \"Internal Server Error\", got 400 \"Bad Request\"",
                        "estack": "Error: expected 500 \"Internal Server Error\", got 400 \"Bad Request\"\n    at Context.<anonymous> (file:///Users/andrew/Dev/url-shortner-ai-demo/test/integration/api-resilience.test.js:314:12)\n    at process.processImmediate (node:internal/timers:476:21)\n----\n    at Test._assertStatus (node_modules/supertest/lib/test.js:267:14)\n    at /Users/andrew/Dev/url-shortner-ai-demo/node_modules/supertest/lib/test.js:323:13\n    at Test._assertFunction (node_modules/supertest/lib/test.js:300:13)\n    at Test.assert (node_modules/supertest/lib/test.js:179:23)\n    at Server.localAssert (node_modules/supertest/lib/test.js:135:14)\n    at Object.onceWrapper (node:events:628:28)\n    at Server.emit (node:events:514:28)\n    at emitCloseNT (node:net:2148:8)\n    at process.processTicksAndRejections (node:internal/process/task_queues:81:21)",
                        "diff": null
                      },
                      "uuid": "5e98c1c1-a929-4331-969a-7db72571d17f",
                      "parentUUID": "7d28492e-f7e2-4f4d-907b-2b7f2b6360b4",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should handle database connection failure in GET /api/urls",
                      "fullTitle": "API Resilience Integration Tests Database Failure Scenarios Database Connection Failures should handle database connection failure in GET /api/urls",
                      "timedOut": false,
                      "duration": 1,
                      "state": "failed",
                      "speed": null,
                      "pass": false,
                      "fail": true,
                      "pending": false,
                      "context": null,
                      "code": "mockDatabaseService.getClient().url.findMany.rejects(new Error('Database unavailable'))\nconst response = await request(app)\n  .get('/api/urls')\n  .expect(500)\nexpect(response.body.error.message).to.include('Failed to retrieve URLs')",
                      "err": {
                        "message": "AssertionError: expected 'Failed to retrieve URL list' to include 'Failed to retrieve URLs'",
                        "estack": "AssertionError: expected 'Failed to retrieve URL list' to include 'Failed to retrieve URLs'\n    at Context.<anonymous> (file:///Users/andrew/Dev/url-shortner-ai-demo/test/integration/api-resilience.test.js:326:48)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                        "diff": null
                      },
                      "uuid": "17221e96-9248-427f-ad24-8379c26232fa",
                      "parentUUID": "7d28492e-f7e2-4f4d-907b-2b7f2b6360b4",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [],
                  "failures": [
                    "1582b5af-fde3-4dec-9321-c70278752916",
                    "29d101e2-a461-488b-afa5-5deef7da42fd",
                    "5e98c1c1-a929-4331-969a-7db72571d17f",
                    "17221e96-9248-427f-ad24-8379c26232fa"
                  ],
                  "pending": [],
                  "skipped": [],
                  "duration": 4,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "2d0427af-4e27-457e-84f5-7dee06184d61",
                  "title": "Database Transaction Failures",
                  "fullFile": "/Users/andrew/Dev/url-shortner-ai-demo/test/integration/api-resilience.test.js",
                  "file": "/test/integration/api-resilience.test.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should handle transaction deadlock in bulk operations",
                      "fullTitle": "API Resilience Integration Tests Database Failure Scenarios Database Transaction Failures should handle transaction deadlock in bulk operations",
                      "timedOut": false,
                      "duration": 0,
                      "state": "failed",
                      "speed": null,
                      "pass": false,
                      "fail": true,
                      "pending": false,
                      "context": null,
                      "code": "const urls = ['https://example.com/tx-1', 'https://example.com/tx-2']\n\nmockRedisService.getShortCode.resolves('tx-code')\nmockDatabaseService.getClient().$transaction.rejects(new Error('Transaction deadlock detected'))\nconst response = await request(app)\n  .post('/api/shorten/bulk')\n  .send({ urls })\n  .expect(500)\nexpect(response.body.error.message).to.include('Failed to create bulk short URLs')\nexpect(mockLogger.error).to.have.been.called",
                      "err": {
                        "message": "Error: expected 500 \"Internal Server Error\", got 503 \"Service Unavailable\"",
                        "estack": "Error: expected 500 \"Internal Server Error\", got 503 \"Service Unavailable\"\n    at Context.<anonymous> (file:///Users/andrew/Dev/url-shortner-ai-demo/test/integration/api-resilience.test.js:340:12)\n    at process.processImmediate (node:internal/timers:476:21)\n----\n    at Test._assertStatus (node_modules/supertest/lib/test.js:267:14)\n    at /Users/andrew/Dev/url-shortner-ai-demo/node_modules/supertest/lib/test.js:323:13\n    at Test._assertFunction (node_modules/supertest/lib/test.js:300:13)\n    at Test.assert (node_modules/supertest/lib/test.js:179:23)\n    at Server.localAssert (node_modules/supertest/lib/test.js:135:14)\n    at Object.onceWrapper (node:events:628:28)\n    at Server.emit (node:events:514:28)\n    at emitCloseNT (node:net:2148:8)\n    at process.processTicksAndRejections (node:internal/process/task_queues:81:21)",
                        "diff": null
                      },
                      "uuid": "b5381e7e-7cab-41e1-8637-0552e1d2ecce",
                      "parentUUID": "2d0427af-4e27-457e-84f5-7dee06184d61",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should handle transaction timeout in bulk operations",
                      "fullTitle": "API Resilience Integration Tests Database Failure Scenarios Database Transaction Failures should handle transaction timeout in bulk operations",
                      "timedOut": false,
                      "duration": 1,
                      "state": "failed",
                      "speed": null,
                      "pass": false,
                      "fail": true,
                      "pending": false,
                      "context": null,
                      "code": "const urls = Array(100).fill().map((_, i) => `https://example.com/timeout-${i}`)\n\nmockRedisService.getShortCode.resolves('timeout-code')\nmockDatabaseService.getClient().$transaction.rejects(new Error('Transaction timeout'))\nconst response = await request(app)\n  .post('/api/shorten/bulk')\n  .send({ urls })\n  .expect(500)\nexpect(response.body.error.message).to.include('Failed to create bulk short URLs')",
                      "err": {
                        "message": "Error: expected 500 \"Internal Server Error\", got 503 \"Service Unavailable\"",
                        "estack": "Error: expected 500 \"Internal Server Error\", got 503 \"Service Unavailable\"\n    at Context.<anonymous> (file:///Users/andrew/Dev/url-shortner-ai-demo/test/integration/api-resilience.test.js:355:12)\n    at process.processImmediate (node:internal/timers:476:21)\n----\n    at Test._assertStatus (node_modules/supertest/lib/test.js:267:14)\n    at /Users/andrew/Dev/url-shortner-ai-demo/node_modules/supertest/lib/test.js:323:13\n    at Test._assertFunction (node_modules/supertest/lib/test.js:300:13)\n    at Test.assert (node_modules/supertest/lib/test.js:179:23)\n    at Server.localAssert (node_modules/supertest/lib/test.js:135:14)\n    at Object.onceWrapper (node:events:628:28)\n    at Server.emit (node:events:514:28)\n    at emitCloseNT (node:net:2148:8)\n    at process.processTicksAndRejections (node:internal/process/task_queues:81:21)",
                        "diff": null
                      },
                      "uuid": "517a9b48-4ff2-41e4-be25-a10e0da03899",
                      "parentUUID": "2d0427af-4e27-457e-84f5-7dee06184d61",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [],
                  "failures": [
                    "b5381e7e-7cab-41e1-8637-0552e1d2ecce",
                    "517a9b48-4ff2-41e4-be25-a10e0da03899"
                  ],
                  "pending": [],
                  "skipped": [],
                  "duration": 1,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "7511c20b-bb18-4d24-a60a-201087bd69a2",
                  "title": "Database Constraint Violations",
                  "fullFile": "/Users/andrew/Dev/url-shortner-ai-demo/test/integration/api-resilience.test.js",
                  "file": "/test/integration/api-resilience.test.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should handle unique constraint violation with retry logic",
                      "fullTitle": "API Resilience Integration Tests Database Failure Scenarios Database Constraint Violations should handle unique constraint violation with retry logic",
                      "timedOut": false,
                      "duration": 1,
                      "state": "failed",
                      "speed": null,
                      "pass": false,
                      "fail": true,
                      "pending": false,
                      "context": null,
                      "code": "const validUrl = 'https://example.com/constraint-test'\nconst duplicateError = new Error('Unique constraint failed')\nduplicateError.code = 'P2002'\nconst successResult = {\n  id: 'test-id',\n  originalUrl: validUrl,\n  shortCode: 'retry-123',\n  createdAt: new Date('2024-01-15T10:30:00Z'),\n  expiresAt: new Date('2024-07-15T10:30:00Z'),\n  clickCount: 0\n}\nmockRedisService.getShortCode\n  .onFirstCall().resolves('duplicate-code')\n  .onSecondCall().resolves('retry-123')\nmockDatabaseService.getClient().url.create\n  .onFirstCall().rejects(duplicateError)\n  .onSecondCall().resolves(successResult)\nmockRedisService.cacheUrl.resolves()\nconst response = await request(app)\n  .post('/api/shorten')\n  .send({ url: validUrl })\n  .expect(201)\nexpect(response.body.success).to.be.true\nexpect(response.body.data.short_code).to.equal('retry-123')\n// Should have logged the retry\nexpect(mockLogger.warn).to.have.been.calledWith(\n  sinon.match.string,\n  sinon.match(/Duplicate short code.*retrying/i)\n)",
                      "err": {
                        "message": "Error: expected 201 \"Created\", got 503 \"Service Unavailable\"",
                        "estack": "Error: expected 201 \"Created\", got 503 \"Service Unavailable\"\n    at Context.<anonymous> (file:///Users/andrew/Dev/url-shortner-ai-demo/test/integration/api-resilience.test.js:389:12)\n    at process.processImmediate (node:internal/timers:476:21)\n----\n    at Test._assertStatus (node_modules/supertest/lib/test.js:267:14)\n    at /Users/andrew/Dev/url-shortner-ai-demo/node_modules/supertest/lib/test.js:323:13\n    at Test._assertFunction (node_modules/supertest/lib/test.js:300:13)\n    at Test.assert (node_modules/supertest/lib/test.js:179:23)\n    at Server.localAssert (node_modules/supertest/lib/test.js:135:14)\n    at Object.onceWrapper (node:events:628:28)\n    at Server.emit (node:events:514:28)\n    at emitCloseNT (node:net:2148:8)\n    at process.processTicksAndRejections (node:internal/process/task_queues:81:21)",
                        "diff": null
                      },
                      "uuid": "419aae65-1f1f-4fe5-be49-3867e222ccfd",
                      "parentUUID": "7511c20b-bb18-4d24-a60a-201087bd69a2",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should fail after maximum retry attempts",
                      "fullTitle": "API Resilience Integration Tests Database Failure Scenarios Database Constraint Violations should fail after maximum retry attempts",
                      "timedOut": false,
                      "duration": 1,
                      "state": "failed",
                      "speed": null,
                      "pass": false,
                      "fail": true,
                      "pending": false,
                      "context": null,
                      "code": "const validUrl = 'https://example.com/max-retry-test'\nconst duplicateError = new Error('Unique constraint failed')\nduplicateError.code = 'P2002'\nmockRedisService.getShortCode.resolves('always-duplicate')\nmockDatabaseService.getClient().url.create.rejects(duplicateError)\nconst response = await request(app)\n  .post('/api/shorten')\n  .send({ url: validUrl })\n  .expect(500)\nexpect(response.body.error.message).to.include('Failed to create short URL after retries')\nexpect(mockDatabaseService.getClient().url.create.callCount).to.equal(3) // Max retries",
                      "err": {
                        "message": "Error: expected 500 \"Internal Server Error\", got 503 \"Service Unavailable\"",
                        "estack": "Error: expected 500 \"Internal Server Error\", got 503 \"Service Unavailable\"\n    at Context.<anonymous> (file:///Users/andrew/Dev/url-shortner-ai-demo/test/integration/api-resilience.test.js:412:12)\n    at process.processImmediate (node:internal/timers:476:21)\n----\n    at Test._assertStatus (node_modules/supertest/lib/test.js:267:14)\n    at /Users/andrew/Dev/url-shortner-ai-demo/node_modules/supertest/lib/test.js:323:13\n    at Test._assertFunction (node_modules/supertest/lib/test.js:300:13)\n    at Test.assert (node_modules/supertest/lib/test.js:179:23)\n    at Server.localAssert (node_modules/supertest/lib/test.js:135:14)\n    at Object.onceWrapper (node:events:628:28)\n    at Server.emit (node:events:514:28)\n    at emitCloseNT (node:net:2148:8)\n    at process.processTicksAndRejections (node:internal/process/task_queues:81:21)",
                        "diff": null
                      },
                      "uuid": "cf7063de-a3b8-44d4-837b-c686211f8110",
                      "parentUUID": "7511c20b-bb18-4d24-a60a-201087bd69a2",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [],
                  "failures": [
                    "419aae65-1f1f-4fe5-be49-3867e222ccfd",
                    "cf7063de-a3b8-44d4-837b-c686211f8110"
                  ],
                  "pending": [],
                  "skipped": [],
                  "duration": 2,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "a7bb55d7-ff09-49a7-b0f2-ee5bf5a6a0de",
              "title": "Combined Redis and Database Failures",
              "fullFile": "/Users/andrew/Dev/url-shortner-ai-demo/test/integration/api-resilience.test.js",
              "file": "/test/integration/api-resilience.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should handle simultaneous Redis and database failures gracefully",
                  "fullTitle": "API Resilience Integration Tests Combined Redis and Database Failures should handle simultaneous Redis and database failures gracefully",
                  "timedOut": false,
                  "duration": 1,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "mockRedisService.getShortCode.rejects(new Error('Redis unavailable'))\nmockRedisService.cacheUrl.rejects(new Error('Redis unavailable'))\nmockRedisService.getCachedUrl.rejects(new Error('Redis unavailable'))\nmockDatabaseService.getClient().url.create.rejects(new Error('Database unavailable'))\nconst response = await request(app)\n  .post('/api/shorten')\n  .send({ url: 'https://example.com/total-failure' })\n  .expect(500)\nexpect(response.body.error.code).to.equal('InternalServerError')\n\n// Should have logged both Redis and database failures\nexpect(mockLogger.warn.called).to.be.true\nexpect(mockLogger.error.called).to.be.true",
                  "err": {
                    "message": "Error: expected 500 \"Internal Server Error\", got 503 \"Service Unavailable\"",
                    "estack": "Error: expected 500 \"Internal Server Error\", got 503 \"Service Unavailable\"\n    at Context.<anonymous> (file:///Users/andrew/Dev/url-shortner-ai-demo/test/integration/api-resilience.test.js:430:10)\n    at process.processImmediate (node:internal/timers:476:21)\n----\n    at Test._assertStatus (node_modules/supertest/lib/test.js:267:14)\n    at /Users/andrew/Dev/url-shortner-ai-demo/node_modules/supertest/lib/test.js:323:13\n    at Test._assertFunction (node_modules/supertest/lib/test.js:300:13)\n    at Test.assert (node_modules/supertest/lib/test.js:179:23)\n    at Server.localAssert (node_modules/supertest/lib/test.js:135:14)\n    at Object.onceWrapper (node:events:628:28)\n    at Server.emit (node:events:514:28)\n    at emitCloseNT (node:net:2148:8)\n    at process.processTicksAndRejections (node:internal/process/task_queues:81:21)",
                    "diff": null
                  },
                  "uuid": "374d0197-d6d4-447a-836b-36f992ec5157",
                  "parentUUID": "a7bb55d7-ff09-49a7-b0f2-ee5bf5a6a0de",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should prioritize database operations when Redis fails",
                  "fullTitle": "API Resilience Integration Tests Combined Redis and Database Failures should prioritize database operations when Redis fails",
                  "timedOut": false,
                  "duration": 1,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const shortCode = 'priority-test'\nconst originalUrl = 'https://example.com/priority-test'\nconst mockDbResult = {\n  id: 'test-id',\n  originalUrl: originalUrl,\n  shortCode: shortCode,\n  createdAt: new Date('2024-01-15T10:30:00Z'),\n  expiresAt: new Date('2024-07-15T10:30:00Z'),\n  clickCount: 10\n}\n// Redis completely fails\nmockRedisService.getCachedUrl.rejects(new Error('Redis down'))\nmockRedisService.cacheUrl.rejects(new Error('Redis down'))\n\n// Database works\nmockDatabaseService.getClient().url.findUnique.resolves(mockDbResult)\nconst response = await request(app)\n  .get(`/api/url/${shortCode}`)\n  .expect(200)\nexpect(response.body.success).to.be.true\nexpect(response.body.data.original_url).to.equal(originalUrl)\n// Should have warned about Redis but succeeded with database\nexpect(mockLogger.warn).to.have.been.called",
                  "err": {
                    "message": "Error: expected 200 \"OK\", got 400 \"Bad Request\"",
                    "estack": "Error: expected 200 \"OK\", got 400 \"Bad Request\"\n    at Context.<anonymous> (file:///Users/andrew/Dev/url-shortner-ai-demo/test/integration/api-resilience.test.js:461:10)\n    at process.processImmediate (node:internal/timers:476:21)\n----\n    at Test._assertStatus (node_modules/supertest/lib/test.js:267:14)\n    at /Users/andrew/Dev/url-shortner-ai-demo/node_modules/supertest/lib/test.js:323:13\n    at Test._assertFunction (node_modules/supertest/lib/test.js:300:13)\n    at Test.assert (node_modules/supertest/lib/test.js:179:23)\n    at Server.localAssert (node_modules/supertest/lib/test.js:135:14)\n    at Object.onceWrapper (node:events:628:28)\n    at Server.emit (node:events:514:28)\n    at emitCloseNT (node:net:2148:8)\n    at process.processTicksAndRejections (node:internal/process/task_queues:81:21)",
                    "diff": null
                  },
                  "uuid": "c6ebd7b7-4d41-493c-afdb-100fa52d87f4",
                  "parentUUID": "a7bb55d7-ff09-49a7-b0f2-ee5bf5a6a0de",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "374d0197-d6d4-447a-836b-36f992ec5157",
                "c6ebd7b7-4d41-493c-afdb-100fa52d87f4"
              ],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "437ff8a9-c1f6-4fe5-a7df-8cfebc628c74",
              "title": "Network and Timeout Scenarios",
              "fullFile": "/Users/andrew/Dev/url-shortner-ai-demo/test/integration/api-resilience.test.js",
              "file": "/test/integration/api-resilience.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should handle slow database responses",
                  "fullTitle": "API Resilience Integration Tests Network and Timeout Scenarios should handle slow database responses",
                  "timedOut": false,
                  "duration": 1,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const validUrl = 'https://example.com/slow-db'\n\nmockRedisService.getShortCode.resolves('slow-123')\n\n// Simulate slow database response\nmockDatabaseService.getClient().url.create.callsFake(() => {\n  return new Promise((resolve) => {\n    setTimeout(() => {\n      resolve({\n        id: 'test-id',\n        originalUrl: validUrl,\n        shortCode: 'slow-123',\n        createdAt: new Date(),\n        expiresAt: new Date(),\n        clickCount: 0\n      })\n    }, 200) // 200ms delay\n  })\n})\nmockRedisService.cacheUrl.resolves()\nconst startTime = Date.now()\nconst response = await request(app)\n  .post('/api/shorten')\n  .send({ url: validUrl })\n  .timeout(5000)\n  .expect(201)\nconst endTime = Date.now()\nexpect(response.body.success).to.be.true\nexpect(endTime - startTime).to.be.greaterThan(200)\nexpect(endTime - startTime).to.be.lessThan(1000)",
                  "err": {
                    "message": "Error: expected 201 \"Created\", got 503 \"Service Unavailable\"",
                    "estack": "Error: expected 201 \"Created\", got 503 \"Service Unavailable\"\n    at Context.<anonymous> (file:///Users/andrew/Dev/url-shortner-ai-demo/test/integration/api-resilience.test.js:500:10)\n    at process.processImmediate (node:internal/timers:476:21)\n----\n    at Test._assertStatus (node_modules/supertest/lib/test.js:267:14)\n    at /Users/andrew/Dev/url-shortner-ai-demo/node_modules/supertest/lib/test.js:323:13\n    at Test._assertFunction (node_modules/supertest/lib/test.js:300:13)\n    at Test.assert (node_modules/supertest/lib/test.js:179:23)\n    at Server.localAssert (node_modules/supertest/lib/test.js:135:14)\n    at Object.onceWrapper (node:events:628:28)\n    at Server.emit (node:events:514:28)\n    at emitCloseNT (node:net:2148:8)\n    at process.processTicksAndRejections (node:internal/process/task_queues:81:21)",
                    "diff": null
                  },
                  "uuid": "66c06d8c-42c1-4773-b42b-c0145567cf98",
                  "parentUUID": "437ff8a9-c1f6-4fe5-a7df-8cfebc628c74",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle Redis timeout with database fallback",
                  "fullTitle": "API Resilience Integration Tests Network and Timeout Scenarios should handle Redis timeout with database fallback",
                  "timedOut": false,
                  "duration": 1,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const shortCode = 'timeout-test'\nconst originalUrl = 'https://example.com/timeout-test'\n// Redis times out\nmockRedisService.getCachedUrl.callsFake(() => {\n  return new Promise((_, reject) => {\n    setTimeout(() => reject(new Error('Redis timeout')), 100)\n  })\n})\n// Database responds normally\nmockDatabaseService.getClient().url.findUnique.resolves({\n  id: 'test-id',\n  originalUrl: originalUrl,\n  shortCode: shortCode,\n  createdAt: new Date('2024-01-15T10:30:00Z'),\n  expiresAt: new Date('2024-07-15T10:30:00Z'),\n  clickCount: 25\n})\nconst response = await request(app)\n  .get(`/api/url/${shortCode}`)\n  .expect(200)\nexpect(response.body.success).to.be.true\nexpect(response.body.data.original_url).to.equal(originalUrl)",
                  "err": {
                    "message": "Error: expected 200 \"OK\", got 400 \"Bad Request\"",
                    "estack": "Error: expected 200 \"OK\", got 400 \"Bad Request\"\n    at Context.<anonymous> (file:///Users/andrew/Dev/url-shortner-ai-demo/test/integration/api-resilience.test.js:531:10)\n    at process.processImmediate (node:internal/timers:476:21)\n----\n    at Test._assertStatus (node_modules/supertest/lib/test.js:267:14)\n    at /Users/andrew/Dev/url-shortner-ai-demo/node_modules/supertest/lib/test.js:323:13\n    at Test._assertFunction (node_modules/supertest/lib/test.js:300:13)\n    at Test.assert (node_modules/supertest/lib/test.js:179:23)\n    at Server.localAssert (node_modules/supertest/lib/test.js:135:14)\n    at Object.onceWrapper (node:events:628:28)\n    at Server.emit (node:events:514:28)\n    at emitCloseNT (node:net:2148:8)\n    at process.processTicksAndRejections (node:internal/process/task_queues:81:21)",
                    "diff": null
                  },
                  "uuid": "a705d1c8-aa5b-439a-badf-efab22d6168e",
                  "parentUUID": "437ff8a9-c1f6-4fe5-a7df-8cfebc628c74",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "66c06d8c-42c1-4773-b42b-c0145567cf98",
                "a705d1c8-aa5b-439a-badf-efab22d6168e"
              ],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "58abb3a0-8db1-4c0c-9ae7-97950a95e430",
              "title": "Service Health Monitoring",
              "fullFile": "/Users/andrew/Dev/url-shortner-ai-demo/test/integration/api-resilience.test.js",
              "file": "/test/integration/api-resilience.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should continue operations when Redis health check fails",
                  "fullTitle": "API Resilience Integration Tests Service Health Monitoring should continue operations when Redis health check fails",
                  "timedOut": false,
                  "duration": 1,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "mockRedisService.isHealthy.returns(false)\nmockRedisService.getShortCode.rejects(new Error('Redis unhealthy'))\n\nconst mockDbResult = {\n  id: 'test-id',\n  originalUrl: 'https://example.com/health-test',\n  shortCode: 'health-123',\n  createdAt: new Date(),\n  expiresAt: new Date(),\n  clickCount: 0\n}\nmockDatabaseService.getClient().url.create.resolves(mockDbResult)\nconst response = await request(app)\n  .post('/api/shorten')\n  .send({ url: 'https://example.com/health-test' })\n  .expect(201)\nexpect(response.body.success).to.be.true\nexpect(mockLogger.warn).to.have.been.called",
                  "err": {
                    "message": "Error: expected 201 \"Created\", got 503 \"Service Unavailable\"",
                    "estack": "Error: expected 201 \"Created\", got 503 \"Service Unavailable\"\n    at Context.<anonymous> (file:///Users/andrew/Dev/url-shortner-ai-demo/test/integration/api-resilience.test.js:557:10)\n    at process.processImmediate (node:internal/timers:476:21)\n----\n    at Test._assertStatus (node_modules/supertest/lib/test.js:267:14)\n    at /Users/andrew/Dev/url-shortner-ai-demo/node_modules/supertest/lib/test.js:323:13\n    at Test._assertFunction (node_modules/supertest/lib/test.js:300:13)\n    at Test.assert (node_modules/supertest/lib/test.js:179:23)\n    at Server.localAssert (node_modules/supertest/lib/test.js:135:14)\n    at Object.onceWrapper (node:events:628:28)\n    at Server.emit (node:events:514:28)\n    at emitCloseNT (node:net:2148:8)\n    at process.processTicksAndRejections (node:internal/process/task_queues:81:21)",
                    "diff": null
                  },
                  "uuid": "17a1bc20-7c4b-4445-803a-9501efbf0631",
                  "parentUUID": "58abb3a0-8db1-4c0c-9ae7-97950a95e430",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should log appropriate error levels for different failure types",
                  "fullTitle": "API Resilience Integration Tests Service Health Monitoring should log appropriate error levels for different failure types",
                  "timedOut": false,
                  "duration": 1,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "// Test various failure scenarios to ensure proper logging\n\n// Redis warning-level failure\nmockRedisService.cacheUrl.rejects(new Error('Cache write failed'))\nmockRedisService.getShortCode.resolves('log-test')\nmockDatabaseService.getClient().url.create.resolves({\n  id: 'test-id',\n  originalUrl: 'https://example.com/log-test',\n  shortCode: 'log-test',\n  createdAt: new Date(),\n  expiresAt: new Date(),\n  clickCount: 0\n})\nawait request(app)\n  .post('/api/shorten')\n  .send({ url: 'https://example.com/log-test' })\n  .expect(201)\nexpect(mockLogger.warn).to.have.been.called\nexpect(mockLogger.error).to.not.have.been.called\n// Reset for next test\nsandbox.resetHistory()\n// Database error-level failure\nmockDatabaseService.getClient().url.create.rejects(new Error('Database error'))\nawait request(app)\n  .post('/api/shorten')\n  .send({ url: 'https://example.com/db-error' })\n  .expect(500)\nexpect(mockLogger.error).to.have.been.called",
                  "err": {
                    "message": "Error: expected 201 \"Created\", got 503 \"Service Unavailable\"",
                    "estack": "Error: expected 201 \"Created\", got 503 \"Service Unavailable\"\n    at Context.<anonymous> (file:///Users/andrew/Dev/url-shortner-ai-demo/test/integration/api-resilience.test.js:581:10)\n    at process.processImmediate (node:internal/timers:476:21)\n----\n    at Test._assertStatus (node_modules/supertest/lib/test.js:267:14)\n    at /Users/andrew/Dev/url-shortner-ai-demo/node_modules/supertest/lib/test.js:323:13\n    at Test._assertFunction (node_modules/supertest/lib/test.js:300:13)\n    at Test.assert (node_modules/supertest/lib/test.js:179:23)\n    at Server.localAssert (node_modules/supertest/lib/test.js:135:14)\n    at Object.onceWrapper (node:events:628:28)\n    at Server.emit (node:events:514:28)\n    at emitCloseNT (node:net:2148:8)\n    at process.processTicksAndRejections (node:internal/process/task_queues:81:21)",
                    "diff": null
                  },
                  "uuid": "5aaf7dfa-50b9-4474-9870-5f3a665f4a01",
                  "parentUUID": "58abb3a0-8db1-4c0c-9ae7-97950a95e430",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "17a1bc20-7c4b-4445-803a-9501efbf0631",
                "5aaf7dfa-50b9-4474-9870-5f3a665f4a01"
              ],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "5edf3bfb-bbe4-430f-8012-632db8295eaf",
          "title": "API Endpoints Integration Tests",
          "fullFile": "/Users/andrew/Dev/url-shortner-ai-demo/test/integration/api.test.js",
          "file": "/test/integration/api.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"API Endpoints Integration Tests\"",
              "fullTitle": "API Endpoints Integration Tests \"before all\" hook in \"API Endpoints Integration Tests\"",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sandbox = sinon.createSandbox()\n\n// Create Express app\napp = express()\napp.use(express.json())\n// Mock services\nmockDatabaseService = {\n  getClient: sandbox.stub().returns({\n    url: {\n      create: sandbox.stub(),\n      findUnique: sandbox.stub(),\n      findMany: sandbox.stub(),\n      delete: sandbox.stub(),\n      update: sandbox.stub()\n    },\n    $transaction: sandbox.stub()\n  }),\n  healthCheck: sandbox.stub().resolves(true)\n}\nmockRedisService = {\n  getShortCode: sandbox.stub(),\n  cacheUrl: sandbox.stub(),\n  getCachedUrl: sandbox.stub(),\n  removeCachedUrl: sandbox.stub(),\n  isHealthy: sandbox.stub().returns(true)\n}\nmockLogger = {\n  debug: sandbox.stub(),\n  info: sandbox.stub(),\n  warn: sandbox.stub(),\n  error: sandbox.stub(),\n  fatal: sandbox.stub()\n}\n// Use test routes with mocked dependencies\napp.use('/api', createApiRoutes(mockDatabaseService, mockRedisService, mockLogger))",
              "err": {},
              "uuid": "2e8cc05f-4d9c-4e37-9bf1-f270f0288604",
              "parentUUID": "5edf3bfb-bbe4-430f-8012-632db8295eaf",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook in \"API Endpoints Integration Tests\"",
              "fullTitle": "API Endpoints Integration Tests \"before each\" hook in \"API Endpoints Integration Tests\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sandbox.resetHistory()\n// Set up common mocks\nmockRedisService.getShortCode.resolves('abc123')\nmockRedisService.cacheUrl.resolves()\nmockRedisService.getCachedUrl.resolves(null)\nmockRedisService.removeCachedUrl.resolves()",
              "err": {},
              "uuid": "c2a803d9-4856-462a-bbe1-30733d0b15dd",
              "parentUUID": "5edf3bfb-bbe4-430f-8012-632db8295eaf",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"API Endpoints Integration Tests\"",
              "fullTitle": "API Endpoints Integration Tests \"after all\" hook in \"API Endpoints Integration Tests\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sandbox.restore()",
              "err": {},
              "uuid": "4ba97962-89b2-453f-95a9-9465fa172df4",
              "parentUUID": "5edf3bfb-bbe4-430f-8012-632db8295eaf",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook in \"API Endpoints Integration Tests\"",
              "fullTitle": "API Endpoints Integration Tests \"after each\" hook in \"API Endpoints Integration Tests\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sandbox.resetHistory()",
              "err": {},
              "uuid": "1025eb34-c6db-46a3-975a-6dec0181890d",
              "parentUUID": "5edf3bfb-bbe4-430f-8012-632db8295eaf",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "d07e809d-fae4-4b7f-9258-23ce760e3a15",
              "title": "POST /api/shorten",
              "fullFile": "/Users/andrew/Dev/url-shortner-ai-demo/test/integration/api.test.js",
              "file": "/test/integration/api.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should successfully create a short URL",
                  "fullTitle": "API Endpoints Integration Tests POST /api/shorten should successfully create a short URL",
                  "timedOut": false,
                  "duration": 2,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "mockDatabaseService.getClient().url.create.resolves(mockDbResult)\nconst response = await request(app)\n  .post('/api/shorten')\n  .send({ url: validUrl })\n  .expect(201)\nexpect(response.body).to.deep.equal({\n  success: true,\n  data: {\n    original_url: validUrl,\n    short_url: `http://localhost:3000/${shortCode}`,\n    short_code: shortCode,\n    created_at: '2024-01-15T10:30:00.000Z',\n    expires_at: '2024-07-15T10:30:00.000Z'\n  }\n})\nexpect(mockDatabaseService.getClient().url.create).to.have.been.calledOnce\nexpect(mockRedisService.cacheUrl).to.have.been.calledWith(shortCode, validUrl)",
                  "err": {
                    "message": "Error: expected 201 \"Created\", got 503 \"Service Unavailable\"",
                    "estack": "Error: expected 201 \"Created\", got 503 \"Service Unavailable\"\n    at Context.<anonymous> (file:///Users/andrew/Dev/url-shortner-ai-demo/test/integration/api.test.js:100:10)\n    at process.processImmediate (node:internal/timers:476:21)\n----\n    at Test._assertStatus (node_modules/supertest/lib/test.js:267:14)\n    at /Users/andrew/Dev/url-shortner-ai-demo/node_modules/supertest/lib/test.js:323:13\n    at Test._assertFunction (node_modules/supertest/lib/test.js:300:13)\n    at Test.assert (node_modules/supertest/lib/test.js:179:23)\n    at Server.localAssert (node_modules/supertest/lib/test.js:135:14)\n    at Object.onceWrapper (node:events:628:28)\n    at Server.emit (node:events:514:28)\n    at emitCloseNT (node:net:2148:8)\n    at process.processTicksAndRejections (node:internal/process/task_queues:81:21)",
                    "diff": null
                  },
                  "uuid": "9cd4c501-e761-4db4-8868-3269064ec8de",
                  "parentUUID": "d07e809d-fae4-4b7f-9258-23ce760e3a15",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 400 for missing URL",
                  "fullTitle": "API Endpoints Integration Tests POST /api/shorten should return 400 for missing URL",
                  "timedOut": false,
                  "duration": 0,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request(app)\n  .post('/api/shorten')\n  .send({})\n  .expect(400)\nexpect(response.body).to.have.property('status_code', 400)\nexpect(response.body).to.have.property('error')\nexpect(response.body.error.code).to.equal('BadRequest')\nexpect(response.body.error.message).to.include('URL is required')",
                  "err": {
                    "message": "AssertionError: expected 'INVALID_REQUEST_BODY' to equal 'BadRequest'",
                    "estack": "AssertionError: expected 'INVALID_REQUEST_BODY' to equal 'BadRequest'\n    at Context.<anonymous> (file:///Users/andrew/Dev/url-shortner-ai-demo/test/integration/api.test.js:125:43)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                    "diff": "- INVALID_REQUEST_BODY\n+ BadRequest\n"
                  },
                  "uuid": "6336b67b-60da-43c2-b82d-89e2024e4b99",
                  "parentUUID": "d07e809d-fae4-4b7f-9258-23ce760e3a15",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 400 for invalid URL format",
                  "fullTitle": "API Endpoints Integration Tests POST /api/shorten should return 400 for invalid URL format",
                  "timedOut": false,
                  "duration": 1,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request(app)\n  .post('/api/shorten')\n  .send({ url: 'not-a-url' })\n  .expect(400)\nexpect(response.body).to.have.property('status_code', 400)\nexpect(response.body.error.code).to.equal('BadRequest')\nexpect(response.body.error.message).to.include('Invalid URL format')\nexpect(mockDatabaseService.getClient().url.create).to.not.have.been.called",
                  "err": {
                    "message": "AssertionError: expected 'INVALID_URL' to equal 'BadRequest'",
                    "estack": "AssertionError: expected 'INVALID_URL' to equal 'BadRequest'\n    at Context.<anonymous> (file:///Users/andrew/Dev/url-shortner-ai-demo/test/integration/api.test.js:136:43)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                    "diff": "- INVALID_URL\n+ BadRequest\n"
                  },
                  "uuid": "add064c0-00b0-4e6a-8d6d-25c854ec6f55",
                  "parentUUID": "d07e809d-fae4-4b7f-9258-23ce760e3a15",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 400 for URL that is too long",
                  "fullTitle": "API Endpoints Integration Tests POST /api/shorten should return 400 for URL that is too long",
                  "timedOut": false,
                  "duration": 0,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const longUrl = 'https://example.com/' + 'a'.repeat(3000)\nconst response = await request(app)\n  .post('/api/shorten')\n  .send({ url: longUrl })\n  .expect(400)\nexpect(response.body.error.message).to.include('URL too long')",
                  "err": {
                    "message": "AssertionError: expected 'URL exceeds maximum length of 2048 ch…' to include 'URL too long'",
                    "estack": "AssertionError: expected 'URL exceeds maximum length of 2048 ch…' to include 'URL too long'\n    at Context.<anonymous> (file:///Users/andrew/Dev/url-shortner-ai-demo/test/integration/api.test.js:149:46)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                    "diff": null
                  },
                  "uuid": "e81311e1-f323-4219-add0-f30d650147d8",
                  "parentUUID": "d07e809d-fae4-4b7f-9258-23ce760e3a15",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 500 for database failure",
                  "fullTitle": "API Endpoints Integration Tests POST /api/shorten should return 500 for database failure",
                  "timedOut": false,
                  "duration": 0,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "mockDatabaseService.getClient().url.create.rejects(new Error('Database connection failed'))\nconst response = await request(app)\n  .post('/api/shorten')\n  .send({ url: validUrl })\n  .expect(500)\nexpect(response.body).to.have.property('status_code', 500)\nexpect(response.body.error.code).to.equal('InternalServerError')\nexpect(response.body.error.message).to.include('Failed to create short URL')",
                  "err": {
                    "message": "Error: expected 500 \"Internal Server Error\", got 503 \"Service Unavailable\"",
                    "estack": "Error: expected 500 \"Internal Server Error\", got 503 \"Service Unavailable\"\n    at Context.<anonymous> (file:///Users/andrew/Dev/url-shortner-ai-demo/test/integration/api.test.js:158:10)\n    at process.processImmediate (node:internal/timers:476:21)\n----\n    at Test._assertStatus (node_modules/supertest/lib/test.js:267:14)\n    at /Users/andrew/Dev/url-shortner-ai-demo/node_modules/supertest/lib/test.js:323:13\n    at Test._assertFunction (node_modules/supertest/lib/test.js:300:13)\n    at Test.assert (node_modules/supertest/lib/test.js:179:23)\n    at Server.localAssert (node_modules/supertest/lib/test.js:135:14)\n    at Object.onceWrapper (node:events:628:28)\n    at Server.emit (node:events:514:28)\n    at emitCloseNT (node:net:2148:8)\n    at process.processTicksAndRejections (node:internal/process/task_queues:81:21)",
                    "diff": null
                  },
                  "uuid": "28bb498c-1543-4090-bb75-d950f701a1ef",
                  "parentUUID": "d07e809d-fae4-4b7f-9258-23ce760e3a15",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle malformed JSON request",
                  "fullTitle": "API Endpoints Integration Tests POST /api/shorten should handle malformed JSON request",
                  "timedOut": false,
                  "duration": 1,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request(app)\n  .post('/api/shorten')\n  .set('Content-Type', 'application/json')\n  .send('{\"url\": invalid json}')\n  .expect(400)\nexpect(response.body.error.code).to.equal('BadRequest')",
                  "err": {
                    "message": "TypeError: Cannot read properties of undefined (reading 'code')",
                    "estack": "TypeError: Cannot read properties of undefined (reading 'code')\n    at Context.<anonymous> (file:///Users/andrew/Dev/url-shortner-ai-demo/test/integration/api.test.js:172:34)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                    "diff": null
                  },
                  "uuid": "49a42222-4ded-4040-8f2a-af8ad12c2f7b",
                  "parentUUID": "d07e809d-fae4-4b7f-9258-23ce760e3a15",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should reject non-HTTP protocols",
                  "fullTitle": "API Endpoints Integration Tests POST /api/shorten should reject non-HTTP protocols",
                  "timedOut": false,
                  "duration": 1,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request(app)\n  .post('/api/shorten')\n  .send({ url: 'ftp://example.com' })\n  .expect(400)\nexpect(response.body.error.message).to.include('Only HTTP and HTTPS protocols are allowed')",
                  "err": {
                    "message": "AssertionError: expected 'URL must use one of the allowed proto…' to include 'Only HTTP and HTTPS protocols are all…'",
                    "estack": "AssertionError: expected 'URL must use one of the allowed proto…' to include 'Only HTTP and HTTPS protocols are all…'\n    at Context.<anonymous> (file:///Users/andrew/Dev/url-shortner-ai-demo/test/integration/api.test.js:181:46)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                    "diff": null
                  },
                  "uuid": "50b9135e-10b7-4064-8c3a-899b2074ec30",
                  "parentUUID": "d07e809d-fae4-4b7f-9258-23ce760e3a15",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "9cd4c501-e761-4db4-8868-3269064ec8de",
                "6336b67b-60da-43c2-b82d-89e2024e4b99",
                "add064c0-00b0-4e6a-8d6d-25c854ec6f55",
                "e81311e1-f323-4219-add0-f30d650147d8",
                "28bb498c-1543-4090-bb75-d950f701a1ef",
                "49a42222-4ded-4040-8f2a-af8ad12c2f7b",
                "50b9135e-10b7-4064-8c3a-899b2074ec30"
              ],
              "pending": [],
              "skipped": [],
              "duration": 5,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "71574d4e-0b02-4414-b3b2-28bddf38305d",
              "title": "POST /api/shorten/bulk",
              "fullFile": "/Users/andrew/Dev/url-shortner-ai-demo/test/integration/api.test.js",
              "file": "/test/integration/api.test.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"POST /api/shorten/bulk\"",
                  "fullTitle": "API Endpoints Integration Tests POST /api/shorten/bulk \"before each\" hook in \"POST /api/shorten/bulk\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "mockRedisService.getShortCode\n  .onFirstCall().resolves(shortCodes[0])\n  .onSecondCall().resolves(shortCodes[1])\n  .onThirdCall().resolves(shortCodes[2])",
                  "err": {},
                  "uuid": "e8bec37c-0fd4-433b-93e1-81d5a0d04c2a",
                  "parentUUID": "71574d4e-0b02-4414-b3b2-28bddf38305d",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should successfully create multiple short URLs",
                  "fullTitle": "API Endpoints Integration Tests POST /api/shorten/bulk should successfully create multiple short URLs",
                  "timedOut": false,
                  "duration": 1,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "mockDatabaseService.getClient().$transaction.resolves(mockDbResults)\nconst response = await request(app)\n  .post('/api/shorten/bulk')\n  .send({ urls: validUrls })\n  .expect(201)\nexpect(response.body).to.have.property('success', true)\nexpect(response.body.data).to.be.an('array').with.lengthOf(3)\n\nresponse.body.data.forEach((item, index) => {\n  expect(item).to.deep.equal({\n    original_url: validUrls[index],\n    short_url: `http://localhost:3000/${shortCodes[index]}`,\n    short_code: shortCodes[index]\n  })\n})\nexpect(mockDatabaseService.getClient().$transaction).to.have.been.calledOnce",
                  "err": {
                    "message": "Error: expected 201 \"Created\", got 503 \"Service Unavailable\"",
                    "estack": "Error: expected 201 \"Created\", got 503 \"Service Unavailable\"\n    at Context.<anonymous> (file:///Users/andrew/Dev/url-shortner-ai-demo/test/integration/api.test.js:215:10)\n    at process.processImmediate (node:internal/timers:476:21)\n----\n    at Test._assertStatus (node_modules/supertest/lib/test.js:267:14)\n    at /Users/andrew/Dev/url-shortner-ai-demo/node_modules/supertest/lib/test.js:323:13\n    at Test._assertFunction (node_modules/supertest/lib/test.js:300:13)\n    at Test.assert (node_modules/supertest/lib/test.js:179:23)\n    at Server.localAssert (node_modules/supertest/lib/test.js:135:14)\n    at Object.onceWrapper (node:events:628:28)\n    at Server.emit (node:events:514:28)\n    at emitCloseNT (node:net:2148:8)\n    at process.processTicksAndRejections (node:internal/process/task_queues:81:21)",
                    "diff": null
                  },
                  "uuid": "c45a7938-8962-4e21-bb26-cb7d734ce431",
                  "parentUUID": "71574d4e-0b02-4414-b3b2-28bddf38305d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 400 for missing URLs array",
                  "fullTitle": "API Endpoints Integration Tests POST /api/shorten/bulk should return 400 for missing URLs array",
                  "timedOut": false,
                  "duration": 1,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request(app)\n  .post('/api/shorten/bulk')\n  .send({})\n  .expect(400)\nexpect(response.body.error.message).to.include('URLs array is required')",
                  "err": {
                    "message": "AssertionError: expected 'Request body is required' to include 'URLs array is required'",
                    "estack": "AssertionError: expected 'Request body is required' to include 'URLs array is required'\n    at Context.<anonymous> (file:///Users/andrew/Dev/url-shortner-ai-demo/test/integration/api.test.js:237:46)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                    "diff": null
                  },
                  "uuid": "2c1aca27-41b7-4c9c-a9e8-d55d31718730",
                  "parentUUID": "71574d4e-0b02-4414-b3b2-28bddf38305d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 400 for empty URLs array",
                  "fullTitle": "API Endpoints Integration Tests POST /api/shorten/bulk should return 400 for empty URLs array",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request(app)\n  .post('/api/shorten/bulk')\n  .send({ urls: [] })\n  .expect(400)\nexpect(response.body.error.message).to.include('URLs array cannot be empty')",
                  "err": {},
                  "uuid": "4dc13387-d5e1-40db-adbd-fe0c1c564d88",
                  "parentUUID": "71574d4e-0b02-4414-b3b2-28bddf38305d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 400 for too many URLs",
                  "fullTitle": "API Endpoints Integration Tests POST /api/shorten/bulk should return 400 for too many URLs",
                  "timedOut": false,
                  "duration": 1,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const tooManyUrls = new Array(1001).fill('https://example.com')\nconst response = await request(app)\n  .post('/api/shorten/bulk')\n  .send({ urls: tooManyUrls })\n  .expect(400)\nexpect(response.body.error.message).to.include('Too many URLs')\nexpect(mockDatabaseService.getClient().$transaction).to.not.have.been.called",
                  "err": {
                    "message": "AssertionError: expected 'Bulk operations are limited to 1000 U…' to include 'Too many URLs'",
                    "estack": "AssertionError: expected 'Bulk operations are limited to 1000 U…' to include 'Too many URLs'\n    at Context.<anonymous> (file:///Users/andrew/Dev/url-shortner-ai-demo/test/integration/api.test.js:257:46)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                    "diff": null
                  },
                  "uuid": "a0b8b761-3db8-469c-ad51-1b6c3720f204",
                  "parentUUID": "71574d4e-0b02-4414-b3b2-28bddf38305d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 400 for invalid URLs in array",
                  "fullTitle": "API Endpoints Integration Tests POST /api/shorten/bulk should return 400 for invalid URLs in array",
                  "timedOut": false,
                  "duration": 1,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const mixedUrls = [\n  'https://example.com/valid',\n  'invalid-url',\n  'https://example.com/also-valid'\n]\nconst response = await request(app)\n  .post('/api/shorten/bulk')\n  .send({ urls: mixedUrls })\n  .expect(400)\nexpect(response.body.error.message).to.include('Invalid URL')\nexpect(response.body.error.details).to.be.an('array')\nexpect(response.body.error.details.some(detail => detail.includes('invalid-url'))).to.be.true",
                  "err": {
                    "message": "AssertionError: expected '1 URLs failed validation' to include 'Invalid URL'",
                    "estack": "AssertionError: expected '1 URLs failed validation' to include 'Invalid URL'\n    at Context.<anonymous> (file:///Users/andrew/Dev/url-shortner-ai-demo/test/integration/api.test.js:273:46)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                    "diff": null
                  },
                  "uuid": "bc4601f2-f09e-41b7-a7f5-c90571ffb120",
                  "parentUUID": "71574d4e-0b02-4414-b3b2-28bddf38305d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 500 for database transaction failure",
                  "fullTitle": "API Endpoints Integration Tests POST /api/shorten/bulk should return 500 for database transaction failure",
                  "timedOut": false,
                  "duration": 1,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "mockDatabaseService.getClient().$transaction.rejects(new Error('Transaction failed'))\nconst response = await request(app)\n  .post('/api/shorten/bulk')\n  .send({ urls: validUrls })\n  .expect(500)\nexpect(response.body.error.message).to.include('Failed to create bulk short URLs')",
                  "err": {
                    "message": "Error: expected 500 \"Internal Server Error\", got 503 \"Service Unavailable\"",
                    "estack": "Error: expected 500 \"Internal Server Error\", got 503 \"Service Unavailable\"\n    at Context.<anonymous> (file:///Users/andrew/Dev/url-shortner-ai-demo/test/integration/api.test.js:284:10)\n    at process.processImmediate (node:internal/timers:476:21)\n----\n    at Test._assertStatus (node_modules/supertest/lib/test.js:267:14)\n    at /Users/andrew/Dev/url-shortner-ai-demo/node_modules/supertest/lib/test.js:323:13\n    at Test._assertFunction (node_modules/supertest/lib/test.js:300:13)\n    at Test.assert (node_modules/supertest/lib/test.js:179:23)\n    at Server.localAssert (node_modules/supertest/lib/test.js:135:14)\n    at Object.onceWrapper (node:events:628:28)\n    at Server.emit (node:events:514:28)\n    at emitCloseNT (node:net:2148:8)\n    at process.processTicksAndRejections (node:internal/process/task_queues:81:21)",
                    "diff": null
                  },
                  "uuid": "e80fc996-4435-41c3-a0d7-c5f7f8ad5d84",
                  "parentUUID": "71574d4e-0b02-4414-b3b2-28bddf38305d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle non-array URLs field",
                  "fullTitle": "API Endpoints Integration Tests POST /api/shorten/bulk should handle non-array URLs field",
                  "timedOut": false,
                  "duration": 1,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request(app)\n  .post('/api/shorten/bulk')\n  .send({ urls: 'not-an-array' })\n  .expect(400)\nexpect(response.body.error.message).to.include('URLs must be an array')",
                  "err": {
                    "message": "AssertionError: expected 'URLs must be provided as an array' to include 'URLs must be an array'",
                    "estack": "AssertionError: expected 'URLs must be provided as an array' to include 'URLs must be an array'\n    at Context.<anonymous> (file:///Users/andrew/Dev/url-shortner-ai-demo/test/integration/api.test.js:295:46)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                    "diff": null
                  },
                  "uuid": "30ea1972-2fcf-410f-974b-b2e5b74e31db",
                  "parentUUID": "71574d4e-0b02-4414-b3b2-28bddf38305d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "4dc13387-d5e1-40db-adbd-fe0c1c564d88"
              ],
              "failures": [
                "c45a7938-8962-4e21-bb26-cb7d734ce431",
                "2c1aca27-41b7-4c9c-a9e8-d55d31718730",
                "a0b8b761-3db8-469c-ad51-1b6c3720f204",
                "bc4601f2-f09e-41b7-a7f5-c90571ffb120",
                "e80fc996-4435-41c3-a0d7-c5f7f8ad5d84",
                "30ea1972-2fcf-410f-974b-b2e5b74e31db"
              ],
              "pending": [],
              "skipped": [],
              "duration": 7,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "76ba43dd-2a79-4e2c-9bcd-3ea8ef919619",
              "title": "GET /api/url/:shortCode",
              "fullFile": "/Users/andrew/Dev/url-shortner-ai-demo/test/integration/api.test.js",
              "file": "/test/integration/api.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return URL details from database",
                  "fullTitle": "API Endpoints Integration Tests GET /api/url/:shortCode should return URL details from database",
                  "timedOut": false,
                  "duration": 0,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "mockDatabaseService.getClient().url.findUnique.resolves(mockDbResult)\nconst response = await request(app)\n  .get(`/api/url/${shortCode}`)\n  .expect(200)\nexpect(response.body).to.deep.equal({\n  success: true,\n  data: {\n    original_url: originalUrl,\n    short_code: shortCode,\n    created_at: '2024-01-15T10:30:00.000Z',\n    expires_at: '2024-07-15T10:30:00.000Z',\n    click_count: 42\n  }\n})\nexpect(mockDatabaseService.getClient().url.findUnique).to.have.been.calledWith({\n  where: { shortCode: shortCode }\n})",
                  "err": {
                    "message": "Error: expected 200 \"OK\", got 400 \"Bad Request\"",
                    "estack": "Error: expected 200 \"OK\", got 400 \"Bad Request\"\n    at Context.<anonymous> (file:///Users/andrew/Dev/url-shortner-ai-demo/test/integration/api.test.js:317:10)\n    at process.processImmediate (node:internal/timers:476:21)\n----\n    at Test._assertStatus (node_modules/supertest/lib/test.js:267:14)\n    at /Users/andrew/Dev/url-shortner-ai-demo/node_modules/supertest/lib/test.js:323:13\n    at Test._assertFunction (node_modules/supertest/lib/test.js:300:13)\n    at Test.assert (node_modules/supertest/lib/test.js:179:23)\n    at Server.localAssert (node_modules/supertest/lib/test.js:135:14)\n    at Object.onceWrapper (node:events:628:28)\n    at Server.emit (node:events:514:28)\n    at emitCloseNT (node:net:2148:8)\n    at process.processTicksAndRejections (node:internal/process/task_queues:81:21)",
                    "diff": null
                  },
                  "uuid": "7b7eb158-bc58-4530-98e8-6be13a02596b",
                  "parentUUID": "76ba43dd-2a79-4e2c-9bcd-3ea8ef919619",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return URL details from cache when available",
                  "fullTitle": "API Endpoints Integration Tests GET /api/url/:shortCode should return URL details from cache when available",
                  "timedOut": false,
                  "duration": 0,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "mockRedisService.getCachedUrl.resolves(originalUrl)\nconst response = await request(app)\n  .get(`/api/url/${shortCode}`)\n  .expect(200)\nexpect(response.body.success).to.be.true\nexpect(response.body.data.original_url).to.equal(originalUrl)\nexpect(response.body.data.short_code).to.equal(shortCode)\n// Database should not be called when cache hit occurs\nexpect(mockDatabaseService.getClient().url.findUnique).to.not.have.been.called",
                  "err": {
                    "message": "Error: expected 200 \"OK\", got 400 \"Bad Request\"",
                    "estack": "Error: expected 200 \"OK\", got 400 \"Bad Request\"\n    at Context.<anonymous> (file:///Users/andrew/Dev/url-shortner-ai-demo/test/integration/api.test.js:340:10)\n    at process.processImmediate (node:internal/timers:476:21)\n----\n    at Test._assertStatus (node_modules/supertest/lib/test.js:267:14)\n    at /Users/andrew/Dev/url-shortner-ai-demo/node_modules/supertest/lib/test.js:323:13\n    at Test._assertFunction (node_modules/supertest/lib/test.js:300:13)\n    at Test.assert (node_modules/supertest/lib/test.js:179:23)\n    at Server.localAssert (node_modules/supertest/lib/test.js:135:14)\n    at Object.onceWrapper (node:events:628:28)\n    at Server.emit (node:events:514:28)\n    at emitCloseNT (node:net:2148:8)\n    at process.processTicksAndRejections (node:internal/process/task_queues:81:21)",
                    "diff": null
                  },
                  "uuid": "58bce6f1-83cb-4376-8ee0-6c98bb6e23d4",
                  "parentUUID": "76ba43dd-2a79-4e2c-9bcd-3ea8ef919619",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 404 for non-existent short code",
                  "fullTitle": "API Endpoints Integration Tests GET /api/url/:shortCode should return 404 for non-existent short code",
                  "timedOut": false,
                  "duration": 1,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "mockDatabaseService.getClient().url.findUnique.resolves(null)\nconst response = await request(app)\n  .get('/api/url/nonexistent')\n  .expect(404)\nexpect(response.body).to.have.property('status_code', 404)\nexpect(response.body.error.code).to.equal('NotFound')\nexpect(response.body.error.message).to.include('URL not found')",
                  "err": {
                    "message": "Error: expected 404 \"Not Found\", got 400 \"Bad Request\"",
                    "estack": "Error: expected 404 \"Not Found\", got 400 \"Bad Request\"\n    at Context.<anonymous> (file:///Users/andrew/Dev/url-shortner-ai-demo/test/integration/api.test.js:355:10)\n    at process.processImmediate (node:internal/timers:476:21)\n----\n    at Test._assertStatus (node_modules/supertest/lib/test.js:267:14)\n    at /Users/andrew/Dev/url-shortner-ai-demo/node_modules/supertest/lib/test.js:323:13\n    at Test._assertFunction (node_modules/supertest/lib/test.js:300:13)\n    at Test.assert (node_modules/supertest/lib/test.js:179:23)\n    at Server.localAssert (node_modules/supertest/lib/test.js:135:14)\n    at Object.onceWrapper (node:events:628:28)\n    at Server.emit (node:events:514:28)\n    at emitCloseNT (node:net:2148:8)\n    at process.processTicksAndRejections (node:internal/process/task_queues:81:21)",
                    "diff": null
                  },
                  "uuid": "fcfed1fb-bd20-456f-95b7-caba45b5e6a8",
                  "parentUUID": "76ba43dd-2a79-4e2c-9bcd-3ea8ef919619",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 400 for invalid short code format",
                  "fullTitle": "API Endpoints Integration Tests GET /api/url/:shortCode should return 400 for invalid short code format",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request(app)\n  .get('/api/url/')\n  .expect(404) // Express returns 404 for missing route parameter",
                  "err": {},
                  "uuid": "4102cde7-32b0-40bc-a4e9-9fd37103f432",
                  "parentUUID": "76ba43dd-2a79-4e2c-9bcd-3ea8ef919619",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 500 for database failure",
                  "fullTitle": "API Endpoints Integration Tests GET /api/url/:shortCode should return 500 for database failure",
                  "timedOut": false,
                  "duration": 1,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "mockDatabaseService.getClient().url.findUnique.rejects(new Error('Database connection failed'))\nconst response = await request(app)\n  .get(`/api/url/${shortCode}`)\n  .expect(500)\nexpect(response.body.error.message).to.include('Failed to retrieve URL')",
                  "err": {
                    "message": "Error: expected 500 \"Internal Server Error\", got 400 \"Bad Request\"",
                    "estack": "Error: expected 500 \"Internal Server Error\", got 400 \"Bad Request\"\n    at Context.<anonymous> (file:///Users/andrew/Dev/url-shortner-ai-demo/test/integration/api.test.js:373:10)\n    at process.processImmediate (node:internal/timers:476:21)\n----\n    at Test._assertStatus (node_modules/supertest/lib/test.js:267:14)\n    at /Users/andrew/Dev/url-shortner-ai-demo/node_modules/supertest/lib/test.js:323:13\n    at Test._assertFunction (node_modules/supertest/lib/test.js:300:13)\n    at Test.assert (node_modules/supertest/lib/test.js:179:23)\n    at Server.localAssert (node_modules/supertest/lib/test.js:135:14)\n    at Object.onceWrapper (node:events:628:28)\n    at Server.emit (node:events:514:28)\n    at emitCloseNT (node:net:2148:8)\n    at process.processTicksAndRejections (node:internal/process/task_queues:81:21)",
                    "diff": null
                  },
                  "uuid": "94050947-9165-4ad3-9c15-17e43c2b134b",
                  "parentUUID": "76ba43dd-2a79-4e2c-9bcd-3ea8ef919619",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "4102cde7-32b0-40bc-a4e9-9fd37103f432"
              ],
              "failures": [
                "7b7eb158-bc58-4530-98e8-6be13a02596b",
                "58bce6f1-83cb-4376-8ee0-6c98bb6e23d4",
                "fcfed1fb-bd20-456f-95b7-caba45b5e6a8",
                "94050947-9165-4ad3-9c15-17e43c2b134b"
              ],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "ffa28672-e952-40f4-8e13-86b9550fbac4",
              "title": "DELETE /api/url/:shortCode",
              "fullFile": "/Users/andrew/Dev/url-shortner-ai-demo/test/integration/api.test.js",
              "file": "/test/integration/api.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should successfully delete URL",
                  "fullTitle": "API Endpoints Integration Tests DELETE /api/url/:shortCode should successfully delete URL",
                  "timedOut": false,
                  "duration": 1,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "mockDatabaseService.getClient().url.delete.resolves(mockDbResult)\nconst response = await request(app)\n  .delete(`/api/url/${shortCode}`)\n  .expect(200)\nexpect(response.body).to.deep.equal({\n  success: true,\n  data: {\n    original_url: originalUrl,\n    short_code: shortCode,\n    created_at: '2024-01-15T10:30:00.000Z',\n    expires_at: '2024-07-15T10:30:00.000Z',\n    click_count: 5\n  }\n})\nexpect(mockDatabaseService.getClient().url.delete).to.have.been.calledWith({\n  where: { shortCode: shortCode }\n})\nexpect(mockRedisService.removeCachedUrl).to.have.been.calledWith(shortCode)",
                  "err": {
                    "message": "Error: expected 200 \"OK\", got 400 \"Bad Request\"",
                    "estack": "Error: expected 200 \"OK\", got 400 \"Bad Request\"\n    at Context.<anonymous> (file:///Users/andrew/Dev/url-shortner-ai-demo/test/integration/api.test.js:397:10)\n    at process.processImmediate (node:internal/timers:476:21)\n----\n    at Test._assertStatus (node_modules/supertest/lib/test.js:267:14)\n    at /Users/andrew/Dev/url-shortner-ai-demo/node_modules/supertest/lib/test.js:323:13\n    at Test._assertFunction (node_modules/supertest/lib/test.js:300:13)\n    at Test.assert (node_modules/supertest/lib/test.js:179:23)\n    at Server.localAssert (node_modules/supertest/lib/test.js:135:14)\n    at Object.onceWrapper (node:events:628:28)\n    at Server.emit (node:events:514:28)\n    at emitCloseNT (node:net:2148:8)\n    at process.processTicksAndRejections (node:internal/process/task_queues:81:21)",
                    "diff": null
                  },
                  "uuid": "5f1de284-df4c-42a2-bbb3-e4e1ef14101d",
                  "parentUUID": "ffa28672-e952-40f4-8e13-86b9550fbac4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 404 for non-existent short code",
                  "fullTitle": "API Endpoints Integration Tests DELETE /api/url/:shortCode should return 404 for non-existent short code",
                  "timedOut": false,
                  "duration": 0,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const notFoundError = new Error('Record not found')\nnotFoundError.code = 'P2025'\nmockDatabaseService.getClient().url.delete.rejects(notFoundError)\nconst response = await request(app)\n  .delete('/api/url/nonexistent')\n  .expect(404)\nexpect(response.body.error.code).to.equal('NotFound')\nexpect(response.body.error.message).to.include('URL not found')",
                  "err": {
                    "message": "Error: expected 404 \"Not Found\", got 400 \"Bad Request\"",
                    "estack": "Error: expected 404 \"Not Found\", got 400 \"Bad Request\"\n    at Context.<anonymous> (file:///Users/andrew/Dev/url-shortner-ai-demo/test/integration/api.test.js:423:10)\n    at process.processImmediate (node:internal/timers:476:21)\n----\n    at Test._assertStatus (node_modules/supertest/lib/test.js:267:14)\n    at /Users/andrew/Dev/url-shortner-ai-demo/node_modules/supertest/lib/test.js:323:13\n    at Test._assertFunction (node_modules/supertest/lib/test.js:300:13)\n    at Test.assert (node_modules/supertest/lib/test.js:179:23)\n    at Server.localAssert (node_modules/supertest/lib/test.js:135:14)\n    at Object.onceWrapper (node:events:628:28)\n    at Server.emit (node:events:514:28)\n    at emitCloseNT (node:net:2148:8)\n    at process.processTicksAndRejections (node:internal/process/task_queues:81:21)",
                    "diff": null
                  },
                  "uuid": "d4437f5f-0a8e-4d08-8be5-be429e77f496",
                  "parentUUID": "ffa28672-e952-40f4-8e13-86b9550fbac4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 500 for database failure",
                  "fullTitle": "API Endpoints Integration Tests DELETE /api/url/:shortCode should return 500 for database failure",
                  "timedOut": false,
                  "duration": 0,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "mockDatabaseService.getClient().url.delete.rejects(new Error('Database connection failed'))\nconst response = await request(app)\n  .delete(`/api/url/${shortCode}`)\n  .expect(500)\nexpect(response.body.error.message).to.include('Failed to delete URL')",
                  "err": {
                    "message": "Error: expected 500 \"Internal Server Error\", got 400 \"Bad Request\"",
                    "estack": "Error: expected 500 \"Internal Server Error\", got 400 \"Bad Request\"\n    at Context.<anonymous> (file:///Users/andrew/Dev/url-shortner-ai-demo/test/integration/api.test.js:434:10)\n    at process.processImmediate (node:internal/timers:476:21)\n----\n    at Test._assertStatus (node_modules/supertest/lib/test.js:267:14)\n    at /Users/andrew/Dev/url-shortner-ai-demo/node_modules/supertest/lib/test.js:323:13\n    at Test._assertFunction (node_modules/supertest/lib/test.js:300:13)\n    at Test.assert (node_modules/supertest/lib/test.js:179:23)\n    at Server.localAssert (node_modules/supertest/lib/test.js:135:14)\n    at Object.onceWrapper (node:events:628:28)\n    at Server.emit (node:events:514:28)\n    at emitCloseNT (node:net:2148:8)\n    at process.processTicksAndRejections (node:internal/process/task_queues:81:21)",
                    "diff": null
                  },
                  "uuid": "69e4dffa-b9e4-4230-9bf1-4c9f6c6ca0e5",
                  "parentUUID": "ffa28672-e952-40f4-8e13-86b9550fbac4",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "5f1de284-df4c-42a2-bbb3-e4e1ef14101d",
                "d4437f5f-0a8e-4d08-8be5-be429e77f496",
                "69e4dffa-b9e4-4230-9bf1-4c9f6c6ca0e5"
              ],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "c91a36ed-8d54-4d3d-89a7-450e86150e3b",
              "title": "GET /api/urls",
              "fullFile": "/Users/andrew/Dev/url-shortner-ai-demo/test/integration/api.test.js",
              "file": "/test/integration/api.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return all URLs",
                  "fullTitle": "API Endpoints Integration Tests GET /api/urls should return all URLs",
                  "timedOut": false,
                  "duration": 1,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "mockDatabaseService.getClient().url.findMany.resolves(mockDbResults)\nconst response = await request(app)\n  .get('/api/urls')\n  .expect(200)\nexpect(response.body).to.have.property('success', true)\nexpect(response.body.data).to.be.an('array').with.lengthOf(2)\nresponse.body.data.forEach((item, index) => {\n  expect(item).to.deep.equal({\n    original_url: mockDbResults[index].originalUrl,\n    short_code: mockDbResults[index].shortCode,\n    created_at: mockDbResults[index].createdAt.toISOString(),\n    expires_at: mockDbResults[index].expiresAt.toISOString(),\n    click_count: mockDbResults[index].clickCount\n  })\n})\nexpect(mockDatabaseService.getClient().url.findMany).to.have.been.calledWith({\n  orderBy: { createdAt: 'desc' }\n})",
                  "err": {
                    "message": "Error: expected 200 \"OK\", got 500 \"Internal Server Error\"",
                    "estack": "Error: expected 200 \"OK\", got 500 \"Internal Server Error\"\n    at Context.<anonymous> (file:///Users/andrew/Dev/url-shortner-ai-demo/test/integration/api.test.js:465:10)\n    at process.processImmediate (node:internal/timers:476:21)\n----\n    at Test._assertStatus (node_modules/supertest/lib/test.js:267:14)\n    at /Users/andrew/Dev/url-shortner-ai-demo/node_modules/supertest/lib/test.js:323:13\n    at Test._assertFunction (node_modules/supertest/lib/test.js:300:13)\n    at Test.assert (node_modules/supertest/lib/test.js:179:23)\n    at Server.localAssert (node_modules/supertest/lib/test.js:135:14)\n    at Object.onceWrapper (node:events:628:28)\n    at Server.emit (node:events:514:28)\n    at emitCloseNT (node:net:2148:8)\n    at process.processTicksAndRejections (node:internal/process/task_queues:81:21)",
                    "diff": null
                  },
                  "uuid": "89f3390f-32ce-4e5b-9fc8-b593cc32f236",
                  "parentUUID": "c91a36ed-8d54-4d3d-89a7-450e86150e3b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return empty array when no URLs exist",
                  "fullTitle": "API Endpoints Integration Tests GET /api/urls should return empty array when no URLs exist",
                  "timedOut": false,
                  "duration": 1,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "mockDatabaseService.getClient().url.findMany.resolves([])\nconst response = await request(app)\n  .get('/api/urls')\n  .expect(200)\nexpect(response.body).to.deep.equal({\n  success: true,\n  data: []\n})",
                  "err": {
                    "message": "Error: expected 200 \"OK\", got 500 \"Internal Server Error\"",
                    "estack": "Error: expected 200 \"OK\", got 500 \"Internal Server Error\"\n    at Context.<anonymous> (file:///Users/andrew/Dev/url-shortner-ai-demo/test/integration/api.test.js:490:10)\n    at process.processImmediate (node:internal/timers:476:21)\n----\n    at Test._assertStatus (node_modules/supertest/lib/test.js:267:14)\n    at /Users/andrew/Dev/url-shortner-ai-demo/node_modules/supertest/lib/test.js:323:13\n    at Test._assertFunction (node_modules/supertest/lib/test.js:300:13)\n    at Test.assert (node_modules/supertest/lib/test.js:179:23)\n    at Server.localAssert (node_modules/supertest/lib/test.js:135:14)\n    at Object.onceWrapper (node:events:628:28)\n    at Server.emit (node:events:514:28)\n    at emitCloseNT (node:net:2148:8)\n    at process.processTicksAndRejections (node:internal/process/task_queues:81:21)",
                    "diff": null
                  },
                  "uuid": "652afdd5-a856-4444-8d61-2e1611682889",
                  "parentUUID": "c91a36ed-8d54-4d3d-89a7-450e86150e3b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 500 for database failure",
                  "fullTitle": "API Endpoints Integration Tests GET /api/urls should return 500 for database failure",
                  "timedOut": false,
                  "duration": 1,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "mockDatabaseService.getClient().url.findMany.rejects(new Error('Database connection failed'))\nconst response = await request(app)\n  .get('/api/urls')\n  .expect(500)\nexpect(response.body.error.message).to.include('Failed to retrieve URLs')",
                  "err": {
                    "message": "AssertionError: expected 'Failed to retrieve URL list' to include 'Failed to retrieve URLs'",
                    "estack": "AssertionError: expected 'Failed to retrieve URL list' to include 'Failed to retrieve URLs'\n    at Context.<anonymous> (file:///Users/andrew/Dev/url-shortner-ai-demo/test/integration/api.test.js:505:46)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                    "diff": null
                  },
                  "uuid": "8fb3b1f9-2edc-4f84-b493-9c53c60f57db",
                  "parentUUID": "c91a36ed-8d54-4d3d-89a7-450e86150e3b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "89f3390f-32ce-4e5b-9fc8-b593cc32f236",
                "652afdd5-a856-4444-8d61-2e1611682889",
                "8fb3b1f9-2edc-4f84-b493-9c53c60f57db"
              ],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "2af09042-82b8-45b8-9725-f86a5a801acd",
              "title": "Error Handling and Edge Cases",
              "fullFile": "/Users/andrew/Dev/url-shortner-ai-demo/test/integration/api.test.js",
              "file": "/test/integration/api.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should handle invalid JSON in request body",
                  "fullTitle": "API Endpoints Integration Tests Error Handling and Edge Cases should handle invalid JSON in request body",
                  "timedOut": false,
                  "duration": 1,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request(app)\n  .post('/api/shorten')\n  .set('Content-Type', 'application/json')\n  .send('{\"url\": invalid}')\n  .expect(400)\nexpect(response.body.error.code).to.equal('BadRequest')",
                  "err": {
                    "message": "TypeError: Cannot read properties of undefined (reading 'code')",
                    "estack": "TypeError: Cannot read properties of undefined (reading 'code')\n    at Context.<anonymous> (file:///Users/andrew/Dev/url-shortner-ai-demo/test/integration/api.test.js:517:34)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                    "diff": null
                  },
                  "uuid": "e047e1a9-e10b-465b-8303-9500030a7838",
                  "parentUUID": "2af09042-82b8-45b8-9725-f86a5a801acd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle missing Content-Type header",
                  "fullTitle": "API Endpoints Integration Tests Error Handling and Edge Cases should handle missing Content-Type header",
                  "timedOut": false,
                  "duration": 1,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request(app)\n  .post('/api/shorten')\n  .send('url=https://example.com')\n  .expect(400)\n// Should handle non-JSON content gracefully\nexpect(response.body.error.code).to.equal('BadRequest')",
                  "err": {
                    "message": "AssertionError: expected 'INVALID_REQUEST_BODY' to equal 'BadRequest'",
                    "estack": "AssertionError: expected 'INVALID_REQUEST_BODY' to equal 'BadRequest'\n    at Context.<anonymous> (file:///Users/andrew/Dev/url-shortner-ai-demo/test/integration/api.test.js:527:43)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                    "diff": "- INVALID_REQUEST_BODY\n+ BadRequest\n"
                  },
                  "uuid": "1b58753f-2705-40f7-bdca-bae6fbfa59e9",
                  "parentUUID": "2af09042-82b8-45b8-9725-f86a5a801acd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle very large request payloads",
                  "fullTitle": "API Endpoints Integration Tests Error Handling and Edge Cases should handle very large request payloads",
                  "timedOut": false,
                  "duration": 1,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const largeUrl = 'https://example.com/' + 'a'.repeat(10000)\nconst response = await request(app)\n  .post('/api/shorten')\n  .send({ url: largeUrl })\n  .expect(400)\nexpect(response.body.error.message).to.include('URL too long')",
                  "err": {
                    "message": "AssertionError: expected 'URL exceeds maximum length of 2048 ch…' to include 'URL too long'",
                    "estack": "AssertionError: expected 'URL exceeds maximum length of 2048 ch…' to include 'URL too long'\n    at Context.<anonymous> (file:///Users/andrew/Dev/url-shortner-ai-demo/test/integration/api.test.js:538:46)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                    "diff": null
                  },
                  "uuid": "2593749c-a0c4-4e55-bdc3-2a1a2abd2520",
                  "parentUUID": "2af09042-82b8-45b8-9725-f86a5a801acd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return consistent error format across all endpoints",
                  "fullTitle": "API Endpoints Integration Tests Error Handling and Edge Cases should return consistent error format across all endpoints",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Test various error scenarios to ensure consistent format\nconst responses = await Promise.all([\n  request(app).post('/api/shorten').send({}),\n  request(app).get('/api/url/nonexistent'),\n  request(app).delete('/api/url/nonexistent').send()\n])\nresponses.forEach(response => {\n  expect(response.body).to.have.property('status_code')\n  expect(response.body).to.have.property('error')\n  expect(response.body.error).to.have.property('code')\n  expect(response.body.error).to.have.property('message')\n  expect(response.body.error).to.have.property('details')\n})",
                  "err": {},
                  "uuid": "a864b90a-6177-4eb1-bdec-92122162482a",
                  "parentUUID": "2af09042-82b8-45b8-9725-f86a5a801acd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle concurrent requests properly",
                  "fullTitle": "API Endpoints Integration Tests Error Handling and Edge Cases should handle concurrent requests properly",
                  "timedOut": false,
                  "duration": 3,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const validUrl = 'https://example.com/concurrent'\nconst shortCode = 'abc123'\nmockDatabaseService.getClient().url.create.resolves({\n  id: 'test-id',\n  originalUrl: validUrl,\n  shortCode: shortCode,\n  createdAt: new Date('2024-01-15T10:30:00Z'),\n  expiresAt: new Date('2024-07-15T10:30:00Z'),\n  clickCount: 0\n})\n// Make 5 concurrent requests\nconst promises = Array(5).fill().map(() => \n  request(app)\n    .post('/api/shorten')\n    .send({ url: validUrl })\n)\nconst responses = await Promise.all(promises)\nresponses.forEach(response => {\n  expect(response.status).to.equal(201)\n  expect(response.body.success).to.be.true\n})",
                  "err": {
                    "message": "AssertionError: expected 503 to equal 201",
                    "estack": "AssertionError: expected 503 to equal 201\n    at file:///Users/andrew/Dev/url-shortner-ai-demo/test/integration/api.test.js:581:36\n    at Array.forEach (<anonymous>)\n    at Context.<anonymous> (file:///Users/andrew/Dev/url-shortner-ai-demo/test/integration/api.test.js:580:17)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                    "diff": "- 503\n+ 201\n"
                  },
                  "uuid": "52a9a865-659e-41cb-8f7d-6f4292ecd08b",
                  "parentUUID": "2af09042-82b8-45b8-9725-f86a5a801acd",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a864b90a-6177-4eb1-bdec-92122162482a"
              ],
              "failures": [
                "e047e1a9-e10b-465b-8303-9500030a7838",
                "1b58753f-2705-40f7-bdca-bae6fbfa59e9",
                "2593749c-a0c4-4e55-bdc3-2a1a2abd2520",
                "52a9a865-659e-41cb-8f7d-6f4292ecd08b"
              ],
              "pending": [],
              "skipped": [],
              "duration": 8,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "b4e51ea4-f69e-4664-96b5-c3c75eee135c",
              "title": "Response Headers and Formats",
              "fullFile": "/Users/andrew/Dev/url-shortner-ai-demo/test/integration/api.test.js",
              "file": "/test/integration/api.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should set correct Content-Type header",
                  "fullTitle": "API Endpoints Integration Tests Response Headers and Formats should set correct Content-Type header",
                  "timedOut": false,
                  "duration": 0,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "mockDatabaseService.getClient().url.findMany.resolves([])\nconst response = await request(app)\n  .get('/api/urls')\n  .expect(200)\nexpect(response.headers['content-type']).to.include('application/json')",
                  "err": {
                    "message": "Error: expected 200 \"OK\", got 500 \"Internal Server Error\"",
                    "estack": "Error: expected 200 \"OK\", got 500 \"Internal Server Error\"\n    at Context.<anonymous> (file:///Users/andrew/Dev/url-shortner-ai-demo/test/integration/api.test.js:593:10)\n    at process.processImmediate (node:internal/timers:476:21)\n----\n    at Test._assertStatus (node_modules/supertest/lib/test.js:267:14)\n    at /Users/andrew/Dev/url-shortner-ai-demo/node_modules/supertest/lib/test.js:323:13\n    at Test._assertFunction (node_modules/supertest/lib/test.js:300:13)\n    at Test.assert (node_modules/supertest/lib/test.js:179:23)\n    at Server.localAssert (node_modules/supertest/lib/test.js:135:14)\n    at Object.onceWrapper (node:events:628:28)\n    at Server.emit (node:events:514:28)\n    at emitCloseNT (node:net:2148:8)\n    at process.processTicksAndRejections (node:internal/process/task_queues:81:21)",
                    "diff": null
                  },
                  "uuid": "7109ce9a-1e07-42f1-8d53-acbfcc3260bc",
                  "parentUUID": "b4e51ea4-f69e-4664-96b5-c3c75eee135c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should include proper HTTP status codes in response body",
                  "fullTitle": "API Endpoints Integration Tests Response Headers and Formats should include proper HTTP status codes in response body",
                  "timedOut": false,
                  "duration": 0,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const validUrl = 'https://example.com/test'\nmockDatabaseService.getClient().url.create.resolves({\n  id: 'test-id',\n  originalUrl: validUrl,\n  shortCode: 'abc123',\n  createdAt: new Date(),\n  expiresAt: new Date(),\n  clickCount: 0\n})\nconst response = await request(app)\n  .post('/api/shorten')\n  .send({ url: validUrl })\n  .expect(201)\n// Status code should match both HTTP status and response body\nexpect(response.status).to.equal(201)\nexpect(response.body).to.not.have.property('status_code') // Success responses don't include status_code",
                  "err": {
                    "message": "Error: expected 201 \"Created\", got 503 \"Service Unavailable\"",
                    "estack": "Error: expected 201 \"Created\", got 503 \"Service Unavailable\"\n    at Context.<anonymous> (file:///Users/andrew/Dev/url-shortner-ai-demo/test/integration/api.test.js:612:10)\n    at process.processImmediate (node:internal/timers:476:21)\n----\n    at Test._assertStatus (node_modules/supertest/lib/test.js:267:14)\n    at /Users/andrew/Dev/url-shortner-ai-demo/node_modules/supertest/lib/test.js:323:13\n    at Test._assertFunction (node_modules/supertest/lib/test.js:300:13)\n    at Test.assert (node_modules/supertest/lib/test.js:179:23)\n    at Server.localAssert (node_modules/supertest/lib/test.js:135:14)\n    at Object.onceWrapper (node:events:628:28)\n    at Server.emit (node:events:514:28)\n    at emitCloseNT (node:net:2148:8)\n    at process.processTicksAndRejections (node:internal/process/task_queues:81:21)",
                    "diff": null
                  },
                  "uuid": "17e2569c-e860-49f8-a02e-7a2756f16a8e",
                  "parentUUID": "b4e51ea4-f69e-4664-96b5-c3c75eee135c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle HEAD requests appropriately",
                  "fullTitle": "API Endpoints Integration Tests Response Headers and Formats should handle HEAD requests appropriately",
                  "timedOut": false,
                  "duration": 1,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "mockDatabaseService.getClient().url.findMany.resolves([])\nconst response = await request(app)\n  .head('/api/urls')\n  .expect(200)\nexpect(response.body).to.be.empty\nexpect(response.headers['content-type']).to.include('application/json')",
                  "err": {
                    "message": "Error: expected 200 \"OK\", got 500 \"Internal Server Error\"",
                    "estack": "Error: expected 200 \"OK\", got 500 \"Internal Server Error\"\n    at Context.<anonymous> (file:///Users/andrew/Dev/url-shortner-ai-demo/test/integration/api.test.js:624:10)\n    at process.processImmediate (node:internal/timers:476:21)\n----\n    at Test._assertStatus (node_modules/supertest/lib/test.js:267:14)\n    at /Users/andrew/Dev/url-shortner-ai-demo/node_modules/supertest/lib/test.js:323:13\n    at Test._assertFunction (node_modules/supertest/lib/test.js:300:13)\n    at Test.assert (node_modules/supertest/lib/test.js:179:23)\n    at Server.localAssert (node_modules/supertest/lib/test.js:135:14)\n    at Object.onceWrapper (node:events:628:28)\n    at Server.emit (node:events:514:28)\n    at emitCloseNT (node:net:2148:8)\n    at process.processTicksAndRejections (node:internal/process/task_queues:81:21)",
                    "diff": null
                  },
                  "uuid": "da59c503-acec-44f7-acf9-1a166236d204",
                  "parentUUID": "b4e51ea4-f69e-4664-96b5-c3c75eee135c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "7109ce9a-1e07-42f1-8d53-acbfcc3260bc",
                "17e2569c-e860-49f8-a02e-7a2756f16a8e",
                "da59c503-acec-44f7-acf9-1a166236d204"
              ],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "1171b481-eeb3-4ade-879e-d065c1c762bf",
          "title": "UrlService Unit Tests",
          "fullFile": "/Users/andrew/Dev/url-shortner-ai-demo/test/services/UrlService.test.js",
          "file": "/test/services/UrlService.test.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"UrlService Unit Tests\"",
              "fullTitle": "UrlService Unit Tests \"before each\" hook in \"UrlService Unit Tests\"",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sandbox = sinon.createSandbox()\n\n// Mock Database (Prisma client structure)\nconst mockPrismaClient = {\n  url: {\n    create: sandbox.stub(),\n    findUnique: sandbox.stub(),\n    findMany: sandbox.stub(),\n    delete: sandbox.stub(),\n    update: sandbox.stub()\n  },\n  $transaction: sandbox.stub()\n}\nmockDatabase = {\n  getClient: sandbox.stub().returns(mockPrismaClient),\n  healthCheck: sandbox.stub().resolves(true),\n  isConnected: true\n}\n// Mock RedisService\nmockRedis = {\n  getShortCode: sandbox.stub(),\n  setShortCode: sandbox.stub(),\n  cacheUrl: sandbox.stub(),\n  getCachedUrl: sandbox.stub(),\n  removeCachedUrl: sandbox.stub(),\n  isHealthy: sandbox.stub().returns(true),\n  healthCheck: sandbox.stub().resolves(true),\n  isConnected: true\n}\n// Mock Logger\nmockLogger = {\n  debug: sandbox.stub(),\n  info: sandbox.stub(),\n  warn: sandbox.stub(),\n  error: sandbox.stub(),\n  fatal: sandbox.stub()\n}\nurlService = new UrlService(mockDatabase, mockRedis, mockLogger)",
              "err": {},
              "uuid": "8245674f-f49e-4598-a8d5-f30f373f8f80",
              "parentUUID": "1171b481-eeb3-4ade-879e-d065c1c762bf",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"UrlService Unit Tests\"",
              "fullTitle": "UrlService Unit Tests \"after each\" hook in \"UrlService Unit Tests\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sandbox.restore()",
              "err": {},
              "uuid": "f22b82a3-287a-4c64-a954-6ea5ae7b351b",
              "parentUUID": "1171b481-eeb3-4ade-879e-d065c1c762bf",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "20be396e-7d04-4faa-8b92-593154393c5a",
              "title": "createShortUrl()",
              "fullFile": "/Users/andrew/Dev/url-shortner-ai-demo/test/services/UrlService.test.js",
              "file": "/test/services/UrlService.test.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"createShortUrl()\"",
                  "fullTitle": "UrlService Unit Tests createShortUrl() \"before each\" hook in \"createShortUrl()\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Set up default successful mocks\nmockRedis.getShortCode.resolves(shortCode)\nmockRedis.cacheUrl.resolves()",
                  "err": {},
                  "uuid": "8a94f4d5-b0ac-43b3-822a-ee346c098d2b",
                  "parentUUID": "20be396e-7d04-4faa-8b92-593154393c5a",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should successfully create a short URL with valid input",
                  "fullTitle": "UrlService Unit Tests createShortUrl() should successfully create a short URL with valid input",
                  "timedOut": false,
                  "duration": 2,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const mockDbResult = {\n  id: 'test-id',\n  originalUrl: validUrl,\n  shortCode: shortCode,\n  createdAt: new Date('2024-01-15T10:30:00Z'),\n  expiresAt: new Date('2024-07-15T10:30:00Z'),\n  clickCount: 0\n}\nmockDatabase.getClient().url.create.resolves(mockDbResult)\nconst result = await urlService.createShortUrl(validUrl)\nexpect(result).to.be.an('object')\nexpect(result.originalUrl).to.equal(validUrl)\nexpect(result.shortCode).to.equal(shortCode)\nexpect(result.shortUrl).to.include(shortCode)\nexpect(result.createdAt).to.be.an.instanceof(Date)\nexpect(result.expiresAt).to.be.an.instanceof(Date)\n// Verify database create was called with correct data\nexpect(mockDatabase.getClient().url.create).to.have.been.calledOnce\nconst createCall = mockDatabase.getClient().url.create.getCall(0)\nexpect(createCall.args[0].data.originalUrl).to.equal(validUrl)\nexpect(createCall.args[0].data.shortCode).to.equal(shortCode)\n// Verify caching was attempted\nexpect(mockRedis.cacheUrl).to.have.been.called\n// Verify logging\nexpect(mockLogger.debug).to.have.been.called\nexpect(mockLogger.info).to.have.been.called",
                  "err": {
                    "message": "Error: Invalid Chai property: calledOnce",
                    "estack": "Error: Invalid Chai property: calledOnce\n    at Object.proxyGetter [as get] (node_modules/chai/lib/chai/utils/proxify.js:78:17)\n    at Context.<anonymous> (file:///Users/andrew/Dev/url-shortner-ai-demo/test/services/UrlService.test.js:99:63)",
                    "diff": null
                  },
                  "uuid": "a4e8dd47-535a-4409-91fd-5e1055c02321",
                  "parentUUID": "20be396e-7d04-4faa-8b92-593154393c5a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should reject invalid URLs with validation error",
                  "fullTitle": "UrlService Unit Tests createShortUrl() should reject invalid URLs with validation error",
                  "timedOut": false,
                  "duration": 1,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const invalidUrl = 'not-a-url'\ntry {\n  await urlService.createShortUrl(invalidUrl)\n  expect.fail('Should have thrown validation error')\n} catch (error) {\n  expect(error.message).to.include('Invalid URL format')\n  expect(mockDatabase.getClient().url.create).to.not.have.been.called\n  expect(mockLogger.warn).to.have.been.called\n}",
                  "err": {
                    "message": "AssertionError: expected 'URL is too short to be valid (minimum…' to include 'Invalid URL format'",
                    "estack": "AssertionError: expected 'URL is too short to be valid (minimum…' to include 'Invalid URL format'\n    at Context.<anonymous> (file:///Users/andrew/Dev/url-shortner-ai-demo/test/services/UrlService.test.js:119:34)",
                    "diff": null
                  },
                  "uuid": "eb2a47fe-6afe-41ae-afe3-d8a71eae6157",
                  "parentUUID": "20be396e-7d04-4faa-8b92-593154393c5a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle URL that is too long",
                  "fullTitle": "UrlService Unit Tests createShortUrl() should handle URL that is too long",
                  "timedOut": false,
                  "duration": 1,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const longUrl = 'https://example.com/' + 'a'.repeat(3000)\ntry {\n  await urlService.createShortUrl(longUrl)\n  expect.fail('Should have thrown validation error')\n} catch (error) {\n  expect(error.message).to.include('exceeds maximum length')\n  expect(mockDatabase.getClient().url.create).to.not.have.been.called\n}",
                  "err": {
                    "message": "Error: Invalid Chai property: called. Did you mean \"all\"?",
                    "estack": "Error: Invalid Chai property: called. Did you mean \"all\"?\n    at Object.proxyGetter [as get] (node_modules/chai/lib/chai/utils/proxify.js:75:17)\n    at Context.<anonymous> (file:///Users/andrew/Dev/url-shortner-ai-demo/test/services/UrlService.test.js:133:69)",
                    "diff": null
                  },
                  "uuid": "1a54c59b-56bb-47cd-8863-3a72f470e900",
                  "parentUUID": "20be396e-7d04-4faa-8b92-593154393c5a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle Redis failure gracefully and continue with database operation",
                  "fullTitle": "UrlService Unit Tests createShortUrl() should handle Redis failure gracefully and continue with database operation",
                  "timedOut": false,
                  "duration": 0,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "mockRedis.getShortCode.rejects(new Error('Redis connection failed'))\n\nconst mockDbResult = {\n  id: 'test-id',\n  originalUrl: validUrl,\n  shortCode: shortCode,\n  createdAt: new Date('2024-01-15T10:30:00Z'),\n  expiresAt: new Date('2024-07-15T10:30:00Z'),\n  clickCount: 0\n}\nmockDatabase.getClient().url.create.resolves(mockDbResult)\ntry {\n  const result = await urlService.createShortUrl(validUrl)\n  expect.fail('Should have thrown error when Redis fails')\n} catch (error) {\n  expect(error.message).to.include('Failed to generate short code')\n  expect(mockLogger.error).to.have.been.called\n}",
                  "err": {
                    "message": "AssertionError: expected 'Should have thrown error when Redis f…' to include 'Failed to generate short code'",
                    "estack": "AssertionError: expected 'Should have thrown error when Redis f…' to include 'Failed to generate short code'\n    at Context.<anonymous> (file:///Users/andrew/Dev/url-shortner-ai-demo/test/services/UrlService.test.js:155:34)",
                    "diff": null
                  },
                  "uuid": "d0060a41-7e89-4b19-875c-4d77b4b5694c",
                  "parentUUID": "20be396e-7d04-4faa-8b92-593154393c5a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle database failure with appropriate error",
                  "fullTitle": "UrlService Unit Tests createShortUrl() should handle database failure with appropriate error",
                  "timedOut": false,
                  "duration": 1,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const dbError = new Error('Database connection failed')\nmockDatabase.healthCheck.rejects(dbError)\ntry {\n  await urlService.createShortUrl(validUrl)\n  expect.fail('Should have thrown database error')\n} catch (error) {\n  expect(error.message).to.include('Database service unavailable')\n  expect(mockLogger.error).to.have.been.called\n}",
                  "err": {
                    "message": "Error: Invalid Chai property: called. Did you mean \"all\"?",
                    "estack": "Error: Invalid Chai property: called. Did you mean \"all\"?\n    at Object.proxyGetter [as get] (node_modules/chai/lib/chai/utils/proxify.js:75:17)\n    at Context.<anonymous> (file:///Users/andrew/Dev/url-shortner-ai-demo/test/services/UrlService.test.js:169:46)",
                    "diff": null
                  },
                  "uuid": "7e7d56ad-fd2e-4134-9dcc-c38a717f635c",
                  "parentUUID": "20be396e-7d04-4faa-8b92-593154393c5a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle unique constraint violation by retrying with new short code",
                  "fullTitle": "UrlService Unit Tests createShortUrl() should handle unique constraint violation by retrying with new short code",
                  "timedOut": false,
                  "duration": 1,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const duplicateError = new Error('Unique constraint failed')\nduplicateError.code = 'P2002' // Prisma unique constraint error code\n\nconst newShortCode = 'def456'\nconst mockDbResult = {\n  id: 'test-id',\n  originalUrl: validUrl,\n  shortCode: newShortCode,\n  createdAt: new Date('2024-01-15T10:30:00Z'),\n  expiresAt: new Date('2024-07-15T10:30:00Z'),\n  clickCount: 0\n}\n// First call fails with unique constraint, second succeeds\nmockDatabase.getClient().url.create\n  .onFirstCall().rejects(duplicateError)\n  .onSecondCall().resolves(mockDbResult)\n\n// Return different short codes on subsequent calls\nmockRedis.getShortCode\n  .onFirstCall().resolves(shortCode)\n  .onSecondCall().resolves(newShortCode)\nconst result = await urlService.createShortUrl(validUrl)\nexpect(result.shortCode).to.equal(newShortCode)\nexpect(mockDatabase.getClient().url.create).to.have.been.calledTwice\nexpect(mockLogger.warn).to.have.been.calledWith(\n  sinon.match.string,\n  sinon.match(/Duplicate short code.*retrying/i)\n)",
                  "err": {
                    "message": "Error: Failed to create shortened URL",
                    "estack": "Error: Failed to create shortened URL\n    at UrlService.createShortUrl (file:///Users/andrew/Dev/url-shortner-ai-demo/services/UrlService.js:148:13)\n    at async Context.<anonymous> (file:///Users/andrew/Dev/url-shortner-ai-demo/test/services/UrlService.test.js:197:22)",
                    "diff": null
                  },
                  "uuid": "439fb145-367b-4f9b-bfcf-4833841e2e01",
                  "parentUUID": "20be396e-7d04-4faa-8b92-593154393c5a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should fail after maximum retry attempts for unique constraint violations",
                  "fullTitle": "UrlService Unit Tests createShortUrl() should fail after maximum retry attempts for unique constraint violations",
                  "timedOut": false,
                  "duration": 0,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const duplicateError = new Error('Unique constraint failed')\nduplicateError.code = 'P2002'\n\nmockDatabase.getClient().url.create.rejects(duplicateError)\nmockRedis.getShortCode.resolves(shortCode)\ntry {\n  await urlService.createShortUrl(validUrl)\n  expect.fail('Should have thrown error after max retries')\n} catch (error) {\n  expect(error.message).to.include('Failed to create short URL after retries')\n  expect(mockDatabase.getClient().url.create.callCount).to.equal(3) // Default max retries\n}",
                  "err": {
                    "message": "AssertionError: expected 'Failed to create shortened URL' to include 'Failed to create short URL after retr…'",
                    "estack": "AssertionError: expected 'Failed to create shortened URL' to include 'Failed to create short URL after retr…'\n    at Context.<anonymous> (file:///Users/andrew/Dev/url-shortner-ai-demo/test/services/UrlService.test.js:218:34)",
                    "diff": null
                  },
                  "uuid": "ead7c54b-0986-4ed8-8f84-3d3170106d17",
                  "parentUUID": "20be396e-7d04-4faa-8b92-593154393c5a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle caching failure gracefully without affecting URL creation",
                  "fullTitle": "UrlService Unit Tests createShortUrl() should handle caching failure gracefully without affecting URL creation",
                  "timedOut": false,
                  "duration": 0,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const mockDbResult = {\n  id: 'test-id',\n  originalUrl: validUrl,\n  shortCode: shortCode,\n  createdAt: new Date('2024-01-15T10:30:00Z'),\n  expiresAt: new Date('2024-07-15T10:30:00Z'),\n  clickCount: 0\n}\nmockDatabase.getClient().url.create.resolves(mockDbResult)\nmockRedis.cacheUrl.rejects(new Error('Cache write failed'))\nconst result = await urlService.createShortUrl(validUrl)\nexpect(result).to.be.an('object')\nexpect(result.originalUrl).to.equal(validUrl)\nexpect(mockLogger.warn).to.have.been.calledWith(\n  sinon.match.string,\n  sinon.match(/Failed to cache.*continuing/i)\n)",
                  "err": {
                    "message": "Error: Invalid Chai property: calledWith",
                    "estack": "Error: Invalid Chai property: calledWith\n    at Object.proxyGetter [as get] (node_modules/chai/lib/chai/utils/proxify.js:78:17)\n    at Context.<anonymous> (file:///Users/andrew/Dev/url-shortner-ai-demo/test/services/UrlService.test.js:240:43)",
                    "diff": null
                  },
                  "uuid": "68799ced-134a-4235-bf44-ec98ab3075c7",
                  "parentUUID": "20be396e-7d04-4faa-8b92-593154393c5a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should use default base URL when not provided",
                  "fullTitle": "UrlService Unit Tests createShortUrl() should use default base URL when not provided",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const mockDbResult = {\n  id: 'test-id',\n  originalUrl: validUrl,\n  shortCode: shortCode,\n  createdAt: new Date('2024-01-15T10:30:00Z'),\n  expiresAt: new Date('2024-07-15T10:30:00Z'),\n  clickCount: 0\n}\nmockDatabase.getClient().url.create.resolves(mockDbResult)\nconst result = await urlService.createShortUrl(validUrl)\nexpect(result.shortUrl).to.include(shortCode)\nexpect(result.shortUrl).to.not.be.null",
                  "err": {},
                  "uuid": "0740016a-094c-450c-b6d0-615de011d7f2",
                  "parentUUID": "20be396e-7d04-4faa-8b92-593154393c5a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should calculate correct expiration date",
                  "fullTitle": "UrlService Unit Tests createShortUrl() should calculate correct expiration date",
                  "timedOut": false,
                  "duration": 1,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const now = new Date('2024-01-15T10:30:00Z')\nconst expectedExpiration = new Date('2024-07-15T10:30:00Z') // 6 months later\n\nconst mockDbResult = {\n  id: 'test-id',\n  originalUrl: validUrl,\n  shortCode: shortCode,\n  createdAt: now,\n  expiresAt: expectedExpiration,\n  clickCount: 0\n}\nmockDatabase.getClient().url.create.resolves(mockDbResult)\nconst result = await urlService.createShortUrl(validUrl)\nexpect(result.expiresAt).to.equal(expectedExpiration.toISOString())",
                  "err": {
                    "message": "AssertionError: expected 2024-07-15T10:30:00.000Z to equal '2024-07-15T10:30:00.000Z'",
                    "estack": "AssertionError: expected 2024-07-15T10:30:00.000Z to equal '2024-07-15T10:30:00.000Z'\n    at Context.<anonymous> (file:///Users/andrew/Dev/url-shortner-ai-demo/test/services/UrlService.test.js:281:35)",
                    "diff": null
                  },
                  "uuid": "3435d7c8-9512-436a-9dfa-226fc4f127e8",
                  "parentUUID": "20be396e-7d04-4faa-8b92-593154393c5a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0740016a-094c-450c-b6d0-615de011d7f2"
              ],
              "failures": [
                "a4e8dd47-535a-4409-91fd-5e1055c02321",
                "eb2a47fe-6afe-41ae-afe3-d8a71eae6157",
                "1a54c59b-56bb-47cd-8863-3a72f470e900",
                "d0060a41-7e89-4b19-875c-4d77b4b5694c",
                "7e7d56ad-fd2e-4134-9dcc-c38a717f635c",
                "439fb145-367b-4f9b-bfcf-4833841e2e01",
                "ead7c54b-0986-4ed8-8f84-3d3170106d17",
                "68799ced-134a-4235-bf44-ec98ab3075c7",
                "3435d7c8-9512-436a-9dfa-226fc4f127e8"
              ],
              "pending": [],
              "skipped": [],
              "duration": 7,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "d4cfd7fb-00f0-4d66-b431-1658c0fbe00c",
              "title": "createBulkShortUrls()",
              "fullFile": "/Users/andrew/Dev/url-shortner-ai-demo/test/services/UrlService.test.js",
              "file": "/test/services/UrlService.test.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"createBulkShortUrls()\"",
                  "fullTitle": "UrlService Unit Tests createBulkShortUrls() \"before each\" hook in \"createBulkShortUrls()\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Set up default successful mocks\nmockRedis.getShortCode\n  .onFirstCall().resolves(shortCodes[0])\n  .onSecondCall().resolves(shortCodes[1])\n  .onThirdCall().resolves(shortCodes[2])\nmockRedis.cacheUrl.resolves()",
                  "err": {},
                  "uuid": "8c026d94-e7b2-4ac8-85d5-b3bfa87223dc",
                  "parentUUID": "d4cfd7fb-00f0-4d66-b431-1658c0fbe00c",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should successfully create multiple short URLs",
                  "fullTitle": "UrlService Unit Tests createBulkShortUrls() should successfully create multiple short URLs",
                  "timedOut": false,
                  "duration": 0,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const mockDbResults = validUrls.map((url, index) => ({\n  id: `test-id-${index}`,\n  originalUrl: url,\n  shortCode: shortCodes[index],\n  createdAt: new Date('2024-01-15T10:30:00Z'),\n  expiresAt: new Date('2024-07-15T10:30:00Z'),\n  clickCount: 0\n}))\n// Mock transaction that returns all created URLs\nmockDatabase.getClient().$transaction.resolves(mockDbResults)\nconst result = await urlService.createBulkShortUrls(validUrls, baseUrl)\nexpect(result).to.be.an('array')\nexpect(result).to.have.lengthOf(3)\nresult.forEach((item, index) => {\n  expect(item).to.deep.equal({\n    original_url: validUrls[index],\n    short_url: `${baseUrl}/${shortCodes[index]}`,\n    short_code: shortCodes[index]\n  })\n})\n// Verify transaction was called\nexpect(mockDatabase.getClient().$transaction).to.have.been.calledOnce\n// Verify caching attempts for all URLs\nexpect(mockRedis.cacheUrl).to.have.been.calledThrice\n// Verify logging\nexpect(mockLogger.info).to.have.been.calledWith(\n  sinon.match.string,\n  sinon.match(/Successfully created.*bulk URLs/i)\n)",
                  "err": {
                    "message": "AssertionError: expected { successCount: 3, …(3) } to be an array",
                    "estack": "AssertionError: expected { successCount: 3, …(3) } to be an array\n    at Context.<anonymous> (file:///Users/andrew/Dev/url-shortner-ai-demo/test/services/UrlService.test.js:318:28)",
                    "diff": null
                  },
                  "uuid": "1a4db19c-38f2-4418-b9bb-6f34dae0a384",
                  "parentUUID": "d4cfd7fb-00f0-4d66-b431-1658c0fbe00c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should reject empty URL array",
                  "fullTitle": "UrlService Unit Tests createBulkShortUrls() should reject empty URL array",
                  "timedOut": false,
                  "duration": 0,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "try {\n  await urlService.createBulkShortUrls([], baseUrl)\n  expect.fail('Should have thrown validation error')\n} catch (error) {\n  expect(error.message).to.include('URLs array cannot be empty')\n  expect(mockDatabase.getClient().$transaction).to.not.have.been.called\n}",
                  "err": {
                    "message": "Error: Invalid Chai property: called. Did you mean \"all\"?",
                    "estack": "Error: Invalid Chai property: called. Did you mean \"all\"?\n    at Object.proxyGetter [as get] (node_modules/chai/lib/chai/utils/proxify.js:75:17)\n    at Context.<anonymous> (file:///Users/andrew/Dev/url-shortner-ai-demo/test/services/UrlService.test.js:348:71)",
                    "diff": null
                  },
                  "uuid": "d1a05a78-4741-42c3-8d5c-2b6b8998ba66",
                  "parentUUID": "d4cfd7fb-00f0-4d66-b431-1658c0fbe00c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should reject URL array exceeding maximum limit",
                  "fullTitle": "UrlService Unit Tests createBulkShortUrls() should reject URL array exceeding maximum limit",
                  "timedOut": false,
                  "duration": 0,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const tooManyUrls = new Array(1001).fill('https://example.com')\ntry {\n  await urlService.createBulkShortUrls(tooManyUrls, baseUrl)\n  expect.fail('Should have thrown validation error')\n} catch (error) {\n  expect(error.message).to.include('Too many URLs')\n  expect(mockDatabase.getClient().$transaction).to.not.have.been.called\n}",
                  "err": {
                    "message": "AssertionError: expected 'Bulk operations are limited to 1000 U…' to include 'Too many URLs'",
                    "estack": "AssertionError: expected 'Bulk operations are limited to 1000 U…' to include 'Too many URLs'\n    at Context.<anonymous> (file:///Users/andrew/Dev/url-shortner-ai-demo/test/services/UrlService.test.js:359:34)",
                    "diff": null
                  },
                  "uuid": "7dffbe35-fd2f-4048-a674-5667c464f3c0",
                  "parentUUID": "d4cfd7fb-00f0-4d66-b431-1658c0fbe00c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should fail entire operation if any URL is invalid",
                  "fullTitle": "UrlService Unit Tests createBulkShortUrls() should fail entire operation if any URL is invalid",
                  "timedOut": false,
                  "duration": 0,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const mixedUrls = [\n  'https://example.com/valid',\n  'invalid-url',\n  'https://example.com/also-valid'\n]\ntry {\n  await urlService.createBulkShortUrls(mixedUrls, baseUrl)\n  expect.fail('Should have thrown validation error')\n} catch (error) {\n  expect(error.message).to.include('Invalid URL')\n  expect(mockDatabase.getClient().$transaction).to.not.have.been.called\n}",
                  "err": {
                    "message": "AssertionError: expected '1 URLs failed validation' to include 'Invalid URL'",
                    "estack": "AssertionError: expected '1 URLs failed validation' to include 'Invalid URL'\n    at Context.<anonymous> (file:///Users/andrew/Dev/url-shortner-ai-demo/test/services/UrlService.test.js:375:34)",
                    "diff": null
                  },
                  "uuid": "7cc49a4c-ea37-4a0f-895d-5bac7326b10d",
                  "parentUUID": "d4cfd7fb-00f0-4d66-b431-1658c0fbe00c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle Redis failure gracefully and continue with database operation",
                  "fullTitle": "UrlService Unit Tests createBulkShortUrls() should handle Redis failure gracefully and continue with database operation",
                  "timedOut": false,
                  "duration": 0,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "mockRedis.getShortCode.rejects(new Error('Redis connection failed'))\n\nconst mockDbResults = validUrls.map((url, index) => ({\n  id: `test-id-${index}`,\n  originalUrl: url,\n  shortCode: `fallback-${index}`,\n  createdAt: new Date('2024-01-15T10:30:00Z'),\n  expiresAt: new Date('2024-07-15T10:30:00Z'),\n  clickCount: 0\n}))\nmockDatabase.getClient().$transaction.resolves(mockDbResults)\nconst result = await urlService.createBulkShortUrls(validUrls, baseUrl)\nexpect(result).to.be.an('array')\nexpect(result).to.have.lengthOf(3)\nexpect(mockLogger.warn).to.have.been.calledWith(\n  sinon.match.string,\n  sinon.match(/Redis.*failed.*fallback/i)\n)",
                  "err": {
                    "message": "AssertionError: expected { successCount: 3, …(3) } to be an array",
                    "estack": "AssertionError: expected { successCount: 3, …(3) } to be an array\n    at Context.<anonymous> (file:///Users/andrew/Dev/url-shortner-ai-demo/test/services/UrlService.test.js:396:28)",
                    "diff": null
                  },
                  "uuid": "bcae93c0-fcb3-4b60-a634-895088775120",
                  "parentUUID": "d4cfd7fb-00f0-4d66-b431-1658c0fbe00c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle database transaction failure",
                  "fullTitle": "UrlService Unit Tests createBulkShortUrls() should handle database transaction failure",
                  "timedOut": false,
                  "duration": 0,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const dbError = new Error('Transaction failed')\nmockDatabase.getClient().$transaction.rejects(dbError)\ntry {\n  await urlService.createBulkShortUrls(validUrls, baseUrl)\n  expect.fail('Should have thrown database error')\n} catch (error) {\n  expect(error.message).to.include('Failed to create bulk short URLs')\n  expect(mockLogger.error).to.have.been.called\n}",
                  "err": {
                    "message": "AssertionError: expected 'Failed to create bulk URLs: Transacti…' to include 'Failed to create bulk short URLs'",
                    "estack": "AssertionError: expected 'Failed to create bulk URLs: Transacti…' to include 'Failed to create bulk short URLs'\n    at Context.<anonymous> (file:///Users/andrew/Dev/url-shortner-ai-demo/test/services/UrlService.test.js:412:34)",
                    "diff": null
                  },
                  "uuid": "f3f45f82-33e0-417b-8553-c452d92a6909",
                  "parentUUID": "d4cfd7fb-00f0-4d66-b431-1658c0fbe00c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle partial Redis caching failures without affecting URL creation",
                  "fullTitle": "UrlService Unit Tests createBulkShortUrls() should handle partial Redis caching failures without affecting URL creation",
                  "timedOut": false,
                  "duration": 1,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const mockDbResults = validUrls.map((url, index) => ({\n  id: `test-id-${index}`,\n  originalUrl: url,\n  shortCode: shortCodes[index],\n  createdAt: new Date('2024-01-15T10:30:00Z'),\n  expiresAt: new Date('2024-07-15T10:30:00Z'),\n  clickCount: 0\n}))\nmockDatabase.getClient().$transaction.resolves(mockDbResults)\n\n// Make some cache operations fail\nmockRedis.cacheUrl\n  .onFirstCall().resolves()\n  .onSecondCall().rejects(new Error('Cache write failed'))\n  .onThirdCall().resolves()\nconst result = await urlService.createBulkShortUrls(validUrls, baseUrl)\nexpect(result).to.be.an('array')\nexpect(result).to.have.lengthOf(3)\nexpect(mockLogger.warn).to.have.been.called",
                  "err": {
                    "message": "AssertionError: expected { successCount: 3, …(3) } to be an array",
                    "estack": "AssertionError: expected { successCount: 3, …(3) } to be an array\n    at Context.<anonymous> (file:///Users/andrew/Dev/url-shortner-ai-demo/test/services/UrlService.test.js:437:28)",
                    "diff": null
                  },
                  "uuid": "2c003d49-9b17-4088-a1e3-377d713dcbbd",
                  "parentUUID": "d4cfd7fb-00f0-4d66-b431-1658c0fbe00c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should validate individual URLs in the array",
                  "fullTitle": "UrlService Unit Tests createBulkShortUrls() should validate individual URLs in the array",
                  "timedOut": false,
                  "duration": 0,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const urlsWithInvalid = [\n  'https://example.com/valid',\n  'ftp://invalid-protocol.com',\n  'https://example.com/also-valid'\n]\ntry {\n  await urlService.createBulkShortUrls(urlsWithInvalid, baseUrl)\n  expect.fail('Should have thrown validation error')\n} catch (error) {\n  expect(error.message).to.include('ftp://invalid-protocol.com')\n}",
                  "err": {
                    "message": "AssertionError: expected '1 URLs failed validation' to include 'ftp://invalid-protocol.com'",
                    "estack": "AssertionError: expected '1 URLs failed validation' to include 'ftp://invalid-protocol.com'\n    at Context.<anonymous> (file:///Users/andrew/Dev/url-shortner-ai-demo/test/services/UrlService.test.js:453:34)",
                    "diff": null
                  },
                  "uuid": "c296a1b6-1466-4eed-9e69-afcf560a0f4a",
                  "parentUUID": "d4cfd7fb-00f0-4d66-b431-1658c0fbe00c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle duplicate URLs in input array",
                  "fullTitle": "UrlService Unit Tests createBulkShortUrls() should handle duplicate URLs in input array",
                  "timedOut": false,
                  "duration": 1,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const duplicateUrls = [\n  'https://example.com/same',\n  'https://example.com/different',\n  'https://example.com/same'\n]\nconst mockDbResults = [\n  {\n    id: 'test-id-0',\n    originalUrl: duplicateUrls[0],\n    shortCode: shortCodes[0],\n    createdAt: new Date('2024-01-15T10:30:00Z'),\n    expiresAt: new Date('2024-07-15T10:30:00Z'),\n    clickCount: 0\n  },\n  {\n    id: 'test-id-1',\n    originalUrl: duplicateUrls[1],\n    shortCode: shortCodes[1],\n    createdAt: new Date('2024-01-15T10:30:00Z'),\n    expiresAt: new Date('2024-07-15T10:30:00Z'),\n    clickCount: 0\n  },\n  {\n    id: 'test-id-2',\n    originalUrl: duplicateUrls[2],\n    shortCode: shortCodes[2],\n    createdAt: new Date('2024-01-15T10:30:00Z'),\n    expiresAt: new Date('2024-07-15T10:30:00Z'),\n    clickCount: 0\n  }\n]\nmockDatabase.getClient().$transaction.resolves(mockDbResults)\nconst result = await urlService.createBulkShortUrls(duplicateUrls, baseUrl)\nexpect(result).to.be.an('array')\nexpect(result).to.have.lengthOf(3)\n// Should create separate short URLs even for duplicate original URLs\nexpect(result[0].short_code).to.not.equal(result[2].short_code)",
                  "err": {
                    "message": "AssertionError: expected { successCount: 3, …(3) } to be an array",
                    "estack": "AssertionError: expected { successCount: 3, …(3) } to be an array\n    at Context.<anonymous> (file:///Users/andrew/Dev/url-shortner-ai-demo/test/services/UrlService.test.js:495:28)",
                    "diff": null
                  },
                  "uuid": "efadd386-05af-4f8e-a83b-0a4b98e6dc59",
                  "parentUUID": "d4cfd7fb-00f0-4d66-b431-1658c0fbe00c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should use transaction for atomic operation",
                  "fullTitle": "UrlService Unit Tests createBulkShortUrls() should use transaction for atomic operation",
                  "timedOut": false,
                  "duration": 0,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const mockDbResults = validUrls.map((url, index) => ({\n  id: `test-id-${index}`,\n  originalUrl: url,\n  shortCode: shortCodes[index],\n  createdAt: new Date('2024-01-15T10:30:00Z'),\n  expiresAt: new Date('2024-07-15T10:30:00Z'),\n  clickCount: 0\n}))\nmockDatabase.getClient().$transaction.resolves(mockDbResults)\nawait urlService.createBulkShortUrls(validUrls, baseUrl)\n// Verify transaction was called with array of operations\nexpect(mockDatabase.getClient().$transaction).to.have.been.calledOnce\nconst transactionCall = mockDatabase.getClient().$transaction.getCall(0)\nexpect(transactionCall.args[0]).to.be.an('array')\nexpect(transactionCall.args[0]).to.have.lengthOf(3)",
                  "err": {
                    "message": "Error: Invalid Chai property: calledOnce",
                    "estack": "Error: Invalid Chai property: calledOnce\n    at Object.proxyGetter [as get] (node_modules/chai/lib/chai/utils/proxify.js:78:17)\n    at Context.<anonymous> (file:///Users/andrew/Dev/url-shortner-ai-demo/test/services/UrlService.test.js:516:65)",
                    "diff": null
                  },
                  "uuid": "bae05f70-5f24-4699-99dc-9918b5afb243",
                  "parentUUID": "d4cfd7fb-00f0-4d66-b431-1658c0fbe00c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "1a4db19c-38f2-4418-b9bb-6f34dae0a384",
                "d1a05a78-4741-42c3-8d5c-2b6b8998ba66",
                "7dffbe35-fd2f-4048-a674-5667c464f3c0",
                "7cc49a4c-ea37-4a0f-895d-5bac7326b10d",
                "bcae93c0-fcb3-4b60-a634-895088775120",
                "f3f45f82-33e0-417b-8553-c452d92a6909",
                "2c003d49-9b17-4088-a1e3-377d713dcbbd",
                "c296a1b6-1466-4eed-9e69-afcf560a0f4a",
                "efadd386-05af-4f8e-a83b-0a4b98e6dc59",
                "bae05f70-5f24-4699-99dc-9918b5afb243"
              ],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "aa7ab5ce-9c65-40ff-a02d-da5a2642fc88",
              "title": "getUrlByShortCode()",
              "fullFile": "/Users/andrew/Dev/url-shortner-ai-demo/test/services/UrlService.test.js",
              "file": "/test/services/UrlService.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return URL details from cache when available (cache hit)",
                  "fullTitle": "UrlService Unit Tests getUrlByShortCode() should return URL details from cache when available (cache hit)",
                  "timedOut": false,
                  "duration": 0,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "mockRedis.getCachedUrl.resolves(originalUrl)\nconst result = await urlService.getUrlByShortCode(shortCode)\nexpect(result).to.deep.equal({\n  original_url: originalUrl,\n  short_code: shortCode,\n  created_at: undefined, // Cache only stores URL, not full metadata\n  expires_at: undefined,\n  click_count: undefined\n})\n// Verify cache was checked first\nexpect(mockRedis.getCachedUrl).to.have.been.calledWith(shortCode)\n// Database should not be called when cache hit occurs\nexpect(mockDatabase.getClient().url.findUnique).to.not.have.been.called\nexpect(mockLogger.debug).to.have.been.calledWith(\n  sinon.match.string,\n  sinon.match(/Found.*in cache/i)\n)",
                  "err": {
                    "message": "AssertionError: expected null to deeply equal { …(5) }",
                    "estack": "AssertionError: expected null to deeply equal { …(5) }\n    at Context.<anonymous> (file:///Users/andrew/Dev/url-shortner-ai-demo/test/services/UrlService.test.js:541:30)",
                    "diff": null
                  },
                  "uuid": "4dcd5302-7b77-41b5-81b8-a53571e3d67a",
                  "parentUUID": "aa7ab5ce-9c65-40ff-a02d-da5a2642fc88",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return full URL details from database when cache miss occurs",
                  "fullTitle": "UrlService Unit Tests getUrlByShortCode() should return full URL details from database when cache miss occurs",
                  "timedOut": false,
                  "duration": 0,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "mockRedis.getCachedUrl.resolves(null) // Cache miss\nmockDatabase.getClient().url.findUnique.resolves(mockDbResult)\nmockRedis.cacheUrl.resolves() // Successful re-caching\nconst result = await urlService.getUrlByShortCode(shortCode)\nexpect(result).to.deep.equal({\n  original_url: originalUrl,\n  short_code: shortCode,\n  created_at: '2024-01-15T10:30:00.000Z',\n  expires_at: '2024-07-15T10:30:00.000Z',\n  click_count: 42\n})\n// Verify cache was checked first, then database\nexpect(mockRedis.getCachedUrl).to.have.been.calledWith(shortCode)\nexpect(mockDatabase.getClient().url.findUnique).to.have.been.calledWith({\n  where: { shortCode: shortCode }\n})\n// Verify URL was re-cached after database retrieval\nexpect(mockRedis.cacheUrl).to.have.been.calledWith(shortCode, originalUrl)\nexpect(mockLogger.debug).to.have.been.calledWith(\n  sinon.match.string,\n  sinon.match(/Cache miss.*retrieving from database/i)\n)",
                  "err": {
                    "message": "AssertionError: expected null to deeply equal { …(5) }",
                    "estack": "AssertionError: expected null to deeply equal { …(5) }\n    at Context.<anonymous> (file:///Users/andrew/Dev/url-shortner-ai-demo/test/services/UrlService.test.js:567:30)",
                    "diff": null
                  },
                  "uuid": "c0f80165-ff0d-4d31-8867-58626caabc96",
                  "parentUUID": "aa7ab5ce-9c65-40ff-a02d-da5a2642fc88",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return null when short code is not found",
                  "fullTitle": "UrlService Unit Tests getUrlByShortCode() should return null when short code is not found",
                  "timedOut": false,
                  "duration": 0,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "mockRedis.getCachedUrl.resolves(null)\nmockDatabase.getClient().url.findUnique.resolves(null)\nconst result = await urlService.getUrlByShortCode(shortCode)\nexpect(result).to.be.null\nexpect(mockLogger.debug).to.have.been.calledWith(\n  sinon.match.string,\n  sinon.match(/Short code.*not found/i)\n)",
                  "err": {
                    "message": "Error: Invalid Chai property: calledWith",
                    "estack": "Error: Invalid Chai property: calledWith\n    at Object.proxyGetter [as get] (node_modules/chai/lib/chai/utils/proxify.js:78:17)\n    at Context.<anonymous> (file:///Users/andrew/Dev/url-shortner-ai-demo/test/services/UrlService.test.js:598:44)",
                    "diff": null
                  },
                  "uuid": "e505f0aa-e2ca-440a-9671-49fa4242decc",
                  "parentUUID": "aa7ab5ce-9c65-40ff-a02d-da5a2642fc88",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle Redis cache failure gracefully and continue with database lookup",
                  "fullTitle": "UrlService Unit Tests getUrlByShortCode() should handle Redis cache failure gracefully and continue with database lookup",
                  "timedOut": false,
                  "duration": 0,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "mockRedis.getCachedUrl.rejects(new Error('Redis connection failed'))\nmockDatabase.getClient().url.findUnique.resolves(mockDbResult)\nconst result = await urlService.getUrlByShortCode(shortCode)\nexpect(result).to.deep.equal({\n  original_url: originalUrl,\n  short_code: shortCode,\n  created_at: '2024-01-15T10:30:00.000Z',\n  expires_at: '2024-07-15T10:30:00.000Z',\n  click_count: 42\n})\nexpect(mockLogger.warn).to.have.been.calledWith(\n  sinon.match.string,\n  sinon.match(/Cache lookup failed.*falling back to database/i)\n)",
                  "err": {
                    "message": "AssertionError: expected null to deeply equal { …(5) }",
                    "estack": "AssertionError: expected null to deeply equal { …(5) }\n    at Context.<anonymous> (file:///Users/andrew/Dev/url-shortner-ai-demo/test/services/UrlService.test.js:610:30)",
                    "diff": null
                  },
                  "uuid": "15861e09-6122-4075-b930-f293d2fa851f",
                  "parentUUID": "aa7ab5ce-9c65-40ff-a02d-da5a2642fc88",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle database failure with appropriate error",
                  "fullTitle": "UrlService Unit Tests getUrlByShortCode() should handle database failure with appropriate error",
                  "timedOut": false,
                  "duration": 0,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "mockRedis.getCachedUrl.resolves(null)\nconst dbError = new Error('Database connection failed')\nmockDatabase.getClient().url.findUnique.rejects(dbError)\ntry {\n  await urlService.getUrlByShortCode(shortCode)\n  expect.fail('Should have thrown database error')\n} catch (error) {\n  expect(error.message).to.include('Failed to retrieve URL')\n  expect(mockLogger.error).to.have.been.called\n}",
                  "err": {
                    "message": "AssertionError: expected 'Database service unavailable' to include 'Failed to retrieve URL'",
                    "estack": "AssertionError: expected 'Database service unavailable' to include 'Failed to retrieve URL'\n    at Context.<anonymous> (file:///Users/andrew/Dev/url-shortner-ai-demo/test/services/UrlService.test.js:633:34)",
                    "diff": null
                  },
                  "uuid": "1aa1b837-3930-4ed0-85e3-44b63e187b17",
                  "parentUUID": "aa7ab5ce-9c65-40ff-a02d-da5a2642fc88",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle cache write failure gracefully after database retrieval",
                  "fullTitle": "UrlService Unit Tests getUrlByShortCode() should handle cache write failure gracefully after database retrieval",
                  "timedOut": false,
                  "duration": 0,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "mockRedis.getCachedUrl.resolves(null)\nmockDatabase.getClient().url.findUnique.resolves(mockDbResult)\nmockRedis.cacheUrl.rejects(new Error('Cache write failed'))\nconst result = await urlService.getUrlByShortCode(shortCode)\nexpect(result).to.be.an('object')\nexpect(result.original_url).to.equal(originalUrl)\nexpect(mockLogger.warn).to.have.been.calledWith(\n  sinon.match.string,\n  sinon.match(/Failed to cache.*after database retrieval/i)\n)",
                  "err": {
                    "message": "AssertionError: expected null to be an object",
                    "estack": "AssertionError: expected null to be an object\n    at Context.<anonymous> (file:///Users/andrew/Dev/url-shortner-ai-demo/test/services/UrlService.test.js:645:28)",
                    "diff": null
                  },
                  "uuid": "c2ce907a-637b-4019-af5f-cffa37c2b647",
                  "parentUUID": "aa7ab5ce-9c65-40ff-a02d-da5a2642fc88",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should validate short code format",
                  "fullTitle": "UrlService Unit Tests getUrlByShortCode() should validate short code format",
                  "timedOut": false,
                  "duration": 1,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const invalidShortCode = ''\ntry {\n  await urlService.getUrlByShortCode(invalidShortCode)\n  expect.fail('Should have thrown validation error')\n} catch (error) {\n  expect(error.message).to.include('Short code is required')\n  expect(mockRedis.getCachedUrl).to.not.have.been.called\n  expect(mockDatabase.getClient().url.findUnique).to.not.have.been.called\n}",
                  "err": {
                    "message": "Error: Invalid Chai property: called. Did you mean \"all\"?",
                    "estack": "Error: Invalid Chai property: called. Did you mean \"all\"?\n    at Object.proxyGetter [as get] (node_modules/chai/lib/chai/utils/proxify.js:75:17)\n    at Context.<anonymous> (file:///Users/andrew/Dev/url-shortner-ai-demo/test/services/UrlService.test.js:662:56)",
                    "diff": null
                  },
                  "uuid": "b641cf0c-0a1d-4d29-8581-5b63686c0375",
                  "parentUUID": "aa7ab5ce-9c65-40ff-a02d-da5a2642fc88",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle expired URLs appropriately",
                  "fullTitle": "UrlService Unit Tests getUrlByShortCode() should handle expired URLs appropriately",
                  "timedOut": false,
                  "duration": 0,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const expiredDbResult = {\n  ...mockDbResult,\n  expiresAt: new Date('2023-01-15T10:30:00Z') // Expired date\n}\nmockRedis.getCachedUrl.resolves(null)\nmockDatabase.getClient().url.findUnique.resolves(expiredDbResult)\nconst result = await urlService.getUrlByShortCode(shortCode)\nexpect(result).to.deep.equal({\n  original_url: originalUrl,\n  short_code: shortCode,\n  created_at: '2024-01-15T10:30:00.000Z',\n  expires_at: '2023-01-15T10:30:00.000Z',\n  click_count: 42\n})\n// Should still return the URL data even if expired\n// Expiration handling might be done at the application layer\nexpect(mockLogger.debug).to.have.been.called",
                  "err": {
                    "message": "AssertionError: expected null to deeply equal { …(5) }",
                    "estack": "AssertionError: expected null to deeply equal { …(5) }\n    at Context.<anonymous> (file:///Users/andrew/Dev/url-shortner-ai-demo/test/services/UrlService.test.js:678:30)",
                    "diff": null
                  },
                  "uuid": "3d4a6ec8-fa0a-43e4-81be-914e45a250c9",
                  "parentUUID": "aa7ab5ce-9c65-40ff-a02d-da5a2642fc88",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should preserve exact database field mapping",
                  "fullTitle": "UrlService Unit Tests getUrlByShortCode() should preserve exact database field mapping",
                  "timedOut": false,
                  "duration": 0,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "mockRedis.getCachedUrl.resolves(null)\nmockDatabase.getClient().url.findUnique.resolves(mockDbResult)\nconst result = await urlService.getUrlByShortCode(shortCode)\n// Verify field mapping from database to API response format\nexpect(result.original_url).to.equal(mockDbResult.originalUrl)\nexpect(result.short_code).to.equal(mockDbResult.shortCode)\nexpect(result.created_at).to.equal(mockDbResult.createdAt.toISOString())\nexpect(result.expires_at).to.equal(mockDbResult.expiresAt.toISOString())\nexpect(result.click_count).to.equal(mockDbResult.clickCount)",
                  "err": {
                    "message": "TypeError: Cannot read properties of null (reading 'original_url')",
                    "estack": "TypeError: Cannot read properties of null (reading 'original_url')\n    at Context.<anonymous> (file:///Users/andrew/Dev/url-shortner-ai-demo/test/services/UrlService.test.js:698:21)",
                    "diff": null
                  },
                  "uuid": "2a565e75-6c1f-4257-acb9-5b5ab6809977",
                  "parentUUID": "aa7ab5ce-9c65-40ff-a02d-da5a2642fc88",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "4dcd5302-7b77-41b5-81b8-a53571e3d67a",
                "c0f80165-ff0d-4d31-8867-58626caabc96",
                "e505f0aa-e2ca-440a-9671-49fa4242decc",
                "15861e09-6122-4075-b930-f293d2fa851f",
                "1aa1b837-3930-4ed0-85e3-44b63e187b17",
                "c2ce907a-637b-4019-af5f-cffa37c2b647",
                "b641cf0c-0a1d-4d29-8581-5b63686c0375",
                "3d4a6ec8-fa0a-43e4-81be-914e45a250c9",
                "2a565e75-6c1f-4257-acb9-5b5ab6809977"
              ],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "eb967f51-f262-4d75-9f96-e893edbc0bf7",
              "title": "deleteUrl()",
              "fullFile": "/Users/andrew/Dev/url-shortner-ai-demo/test/services/UrlService.test.js",
              "file": "/test/services/UrlService.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should successfully delete URL and invalidate cache",
                  "fullTitle": "UrlService Unit Tests deleteUrl() should successfully delete URL and invalidate cache",
                  "timedOut": false,
                  "duration": 0,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "mockDatabase.getClient().url.delete.resolves(mockDbResult)\nmockRedis.removeCachedUrl.resolves()\nconst result = await urlService.deleteUrl(shortCode)\nexpect(result).to.deep.equal({\n  original_url: originalUrl,\n  short_code: shortCode,\n  created_at: '2024-01-15T10:30:00.000Z',\n  expires_at: '2024-07-15T10:30:00.000Z',\n  click_count: 5\n})\nexpect(mockDatabase.getClient().url.delete).to.have.been.calledWith({\n  where: { shortCode: shortCode }\n})\nexpect(mockRedis.removeCachedUrl).to.have.been.calledWith(shortCode)\nexpect(mockLogger.info).to.have.been.calledWith(\n  sinon.match.string,\n  sinon.match(/Successfully deleted URL/i)\n)",
                  "err": {
                    "message": "AssertionError: expected false to deeply equal { …(5) }",
                    "estack": "AssertionError: expected false to deeply equal { …(5) }\n    at Context.<anonymous> (file:///Users/andrew/Dev/url-shortner-ai-demo/test/services/UrlService.test.js:725:30)",
                    "diff": null
                  },
                  "uuid": "2db43886-aa69-4e52-92d7-fd719a7afc4d",
                  "parentUUID": "eb967f51-f262-4d75-9f96-e893edbc0bf7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle deletion of non-existent URL",
                  "fullTitle": "UrlService Unit Tests deleteUrl() should handle deletion of non-existent URL",
                  "timedOut": false,
                  "duration": 0,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const notFoundError = new Error('Record not found')\nnotFoundError.code = 'P2025' // Prisma record not found error code\nmockDatabase.getClient().url.delete.rejects(notFoundError)\ntry {\n  await urlService.deleteUrl(shortCode)\n  expect.fail('Should have thrown not found error')\n} catch (error) {\n  expect(error.message).to.include('URL not found')\n  expect(mockLogger.debug).to.have.been.calledWith(\n    sinon.match.string,\n    sinon.match(/URL.*not found for deletion/i)\n  )\n}",
                  "err": {
                    "message": "AssertionError: expected 'Should have thrown not found error' to include 'URL not found'",
                    "estack": "AssertionError: expected 'Should have thrown not found error' to include 'URL not found'\n    at Context.<anonymous> (file:///Users/andrew/Dev/url-shortner-ai-demo/test/services/UrlService.test.js:754:34)",
                    "diff": null
                  },
                  "uuid": "c4a9fb1d-1a49-40a7-b82e-f4ba03001a3c",
                  "parentUUID": "eb967f51-f262-4d75-9f96-e893edbc0bf7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle database failure during deletion",
                  "fullTitle": "UrlService Unit Tests deleteUrl() should handle database failure during deletion",
                  "timedOut": false,
                  "duration": 1,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const dbError = new Error('Database connection failed')\nmockDatabase.getClient().url.delete.rejects(dbError)\ntry {\n  await urlService.deleteUrl(shortCode)\n  expect.fail('Should have thrown database error')\n} catch (error) {\n  expect(error.message).to.include('Failed to delete URL')\n  expect(mockLogger.error).to.have.been.called\n}",
                  "err": {
                    "message": "AssertionError: expected 'Should have thrown database error' to include 'Failed to delete URL'",
                    "estack": "AssertionError: expected 'Should have thrown database error' to include 'Failed to delete URL'\n    at Context.<anonymous> (file:///Users/andrew/Dev/url-shortner-ai-demo/test/services/UrlService.test.js:770:34)",
                    "diff": null
                  },
                  "uuid": "1c00abf1-e696-47e8-801c-a5ce60aa8dcd",
                  "parentUUID": "eb967f51-f262-4d75-9f96-e893edbc0bf7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle cache invalidation failure gracefully",
                  "fullTitle": "UrlService Unit Tests deleteUrl() should handle cache invalidation failure gracefully",
                  "timedOut": false,
                  "duration": 0,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "mockDatabase.getClient().url.delete.resolves(mockDbResult)\nmockRedis.removeCachedUrl.rejects(new Error('Cache removal failed'))\nconst result = await urlService.deleteUrl(shortCode)\nexpect(result).to.be.an('object')\nexpect(result.short_code).to.equal(shortCode)\nexpect(mockLogger.warn).to.have.been.calledWith(\n  sinon.match.string,\n  sinon.match(/Failed to remove.*from cache/i)\n)",
                  "err": {
                    "message": "AssertionError: expected false to be an object",
                    "estack": "AssertionError: expected false to be an object\n    at Context.<anonymous> (file:///Users/andrew/Dev/url-shortner-ai-demo/test/services/UrlService.test.js:781:28)",
                    "diff": null
                  },
                  "uuid": "db8024e3-8c36-471c-971b-4925f98df2c1",
                  "parentUUID": "eb967f51-f262-4d75-9f96-e893edbc0bf7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should validate short code before deletion",
                  "fullTitle": "UrlService Unit Tests deleteUrl() should validate short code before deletion",
                  "timedOut": false,
                  "duration": 0,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "try {\n  await urlService.deleteUrl('')\n  expect.fail('Should have thrown validation error')\n} catch (error) {\n  expect(error.message).to.include('Short code is required')\n  expect(mockDatabase.getClient().url.delete).to.not.have.been.called\n}",
                  "err": {
                    "message": "Error: Invalid Chai property: called. Did you mean \"all\"?",
                    "estack": "Error: Invalid Chai property: called. Did you mean \"all\"?\n    at Object.proxyGetter [as get] (node_modules/chai/lib/chai/utils/proxify.js:75:17)\n    at Context.<anonymous> (file:///Users/andrew/Dev/url-shortner-ai-demo/test/services/UrlService.test.js:796:69)",
                    "diff": null
                  },
                  "uuid": "153a722d-8fe8-4cfd-aedd-c78f04b841ca",
                  "parentUUID": "eb967f51-f262-4d75-9f96-e893edbc0bf7",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "2db43886-aa69-4e52-92d7-fd719a7afc4d",
                "c4a9fb1d-1a49-40a7-b82e-f4ba03001a3c",
                "1c00abf1-e696-47e8-801c-a5ce60aa8dcd",
                "db8024e3-8c36-471c-971b-4925f98df2c1",
                "153a722d-8fe8-4cfd-aedd-c78f04b841ca"
              ],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "9b07d8c5-862a-4fca-bddd-402f2c3eafdb",
              "title": "getAllUrls()",
              "fullFile": "/Users/andrew/Dev/url-shortner-ai-demo/test/services/UrlService.test.js",
              "file": "/test/services/UrlService.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should successfully retrieve all URLs with metadata",
                  "fullTitle": "UrlService Unit Tests getAllUrls() should successfully retrieve all URLs with metadata",
                  "timedOut": false,
                  "duration": 0,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "mockDatabase.getClient().url.findMany.resolves(mockDbResults)\nconst result = await urlService.getAllUrls()\nexpect(result).to.be.an('array')\nexpect(result).to.have.lengthOf(2)\nresult.forEach((item, index) => {\n  expect(item).to.deep.equal({\n    original_url: mockDbResults[index].originalUrl,\n    short_code: mockDbResults[index].shortCode,\n    created_at: mockDbResults[index].createdAt.toISOString(),\n    expires_at: mockDbResults[index].expiresAt.toISOString(),\n    click_count: mockDbResults[index].clickCount\n  })\n})\nexpect(mockDatabase.getClient().url.findMany).to.have.been.calledOnce\nexpect(mockLogger.debug).to.have.been.calledWith(\n  sinon.match.string,\n  sinon.match(/Retrieved.*URLs from database/i)\n)",
                  "err": {
                    "message": "AssertionError: expected [] to have a length of 2 but got +0",
                    "estack": "AssertionError: expected [] to have a length of 2 but got +0\n    at Context.<anonymous> (file:///Users/andrew/Dev/url-shortner-ai-demo/test/services/UrlService.test.js:827:30)",
                    "diff": "- 0\n+ 2\n"
                  },
                  "uuid": "35ed078f-cc1e-4650-97ac-7a970447f9f4",
                  "parentUUID": "9b07d8c5-862a-4fca-bddd-402f2c3eafdb",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle empty result set",
                  "fullTitle": "UrlService Unit Tests getAllUrls() should handle empty result set",
                  "timedOut": false,
                  "duration": 0,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "mockDatabase.getClient().url.findMany.resolves([])\nconst result = await urlService.getAllUrls()\nexpect(result).to.be.an('array')\nexpect(result).to.have.lengthOf(0)\nexpect(mockLogger.debug).to.have.been.calledWith(\n  sinon.match.string,\n  sinon.match(/Retrieved.*0.*URLs/i)\n)",
                  "err": {
                    "message": "Error: Invalid Chai property: calledWith",
                    "estack": "Error: Invalid Chai property: calledWith\n    at Object.proxyGetter [as get] (node_modules/chai/lib/chai/utils/proxify.js:78:17)\n    at Context.<anonymous> (file:///Users/andrew/Dev/url-shortner-ai-demo/test/services/UrlService.test.js:855:44)",
                    "diff": null
                  },
                  "uuid": "53c55c58-98a1-4e93-9b51-d49a56613e60",
                  "parentUUID": "9b07d8c5-862a-4fca-bddd-402f2c3eafdb",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle database failure",
                  "fullTitle": "UrlService Unit Tests getAllUrls() should handle database failure",
                  "timedOut": false,
                  "duration": 1,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const dbError = new Error('Database connection failed')\nmockDatabase.getClient().url.findMany.rejects(dbError)\ntry {\n  await urlService.getAllUrls()\n  expect.fail('Should have thrown database error')\n} catch (error) {\n  expect(error.message).to.include('Failed to retrieve URLs')\n  expect(mockLogger.error).to.have.been.called\n}",
                  "err": {
                    "message": "AssertionError: expected 'Database service unavailable' to include 'Failed to retrieve URLs'",
                    "estack": "AssertionError: expected 'Database service unavailable' to include 'Failed to retrieve URLs'\n    at Context.<anonymous> (file:///Users/andrew/Dev/url-shortner-ai-demo/test/services/UrlService.test.js:869:34)",
                    "diff": null
                  },
                  "uuid": "054e4119-a47e-4e50-9b58-845243d7ad83",
                  "parentUUID": "9b07d8c5-862a-4fca-bddd-402f2c3eafdb",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should use proper sorting (newest first)",
                  "fullTitle": "UrlService Unit Tests getAllUrls() should use proper sorting (newest first)",
                  "timedOut": false,
                  "duration": 0,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "mockDatabase.getClient().url.findMany.resolves(mockDbResults)\nawait urlService.getAllUrls()\nexpect(mockDatabase.getClient().url.findMany).to.have.been.calledWith({\n  orderBy: { createdAt: 'desc' }\n})",
                  "err": {
                    "message": "Error: Invalid Chai property: calledWith",
                    "estack": "Error: Invalid Chai property: calledWith\n    at Object.proxyGetter [as get] (node_modules/chai/lib/chai/utils/proxify.js:78:17)\n    at Context.<anonymous> (file:///Users/andrew/Dev/url-shortner-ai-demo/test/services/UrlService.test.js:879:65)",
                    "diff": null
                  },
                  "uuid": "7a465812-8bbd-4ecd-a05f-aab935d4ea69",
                  "parentUUID": "9b07d8c5-862a-4fca-bddd-402f2c3eafdb",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "35ed078f-cc1e-4650-97ac-7a970447f9f4",
                "53c55c58-98a1-4e93-9b51-d49a56613e60",
                "054e4119-a47e-4e50-9b58-845243d7ad83",
                "7a465812-8bbd-4ecd-a05f-aab935d4ea69"
              ],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "b9652e77-c325-488b-89d5-1a0b0cc2a2cf",
              "title": "incrementClickCount()",
              "fullFile": "/Users/andrew/Dev/url-shortner-ai-demo/test/services/UrlService.test.js",
              "file": "/test/services/UrlService.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should successfully increment click count",
                  "fullTitle": "UrlService Unit Tests incrementClickCount() should successfully increment click count",
                  "timedOut": false,
                  "duration": 0,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const updatedResult = {\n  id: 'test-id',\n  originalUrl: 'https://example.com/test',\n  shortCode: shortCode,\n  createdAt: new Date('2024-01-15T10:30:00Z'),\n  expiresAt: new Date('2024-07-15T10:30:00Z'),\n  clickCount: 43 // Incremented from 42\n}\nmockDatabase.getClient().url.update.resolves(updatedResult)\nconst result = await urlService.incrementClickCount(shortCode)\nexpect(result).to.equal(43)\nexpect(mockDatabase.getClient().url.update).to.have.been.calledWith({\n  where: { shortCode: shortCode },\n  data: { clickCount: { increment: 1 } }\n})\nexpect(mockLogger.debug).to.have.been.calledWith(\n  sinon.match.string,\n  sinon.match(/Incremented click count.*43/i)\n)",
                  "err": {
                    "message": "Error: Invalid Chai property: calledWith",
                    "estack": "Error: Invalid Chai property: calledWith\n    at Object.proxyGetter [as get] (node_modules/chai/lib/chai/utils/proxify.js:78:17)\n    at Context.<anonymous> (file:///Users/andrew/Dev/url-shortner-ai-demo/test/services/UrlService.test.js:904:63)",
                    "diff": null
                  },
                  "uuid": "c62d3e48-5d92-4d65-9ed9-1e9862db8fcf",
                  "parentUUID": "b9652e77-c325-488b-89d5-1a0b0cc2a2cf",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle non-existent URL during click increment",
                  "fullTitle": "UrlService Unit Tests incrementClickCount() should handle non-existent URL during click increment",
                  "timedOut": false,
                  "duration": 0,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const notFoundError = new Error('Record not found')\nnotFoundError.code = 'P2025'\nmockDatabase.getClient().url.update.rejects(notFoundError)\ntry {\n  await urlService.incrementClickCount(shortCode)\n  expect.fail('Should have thrown not found error')\n} catch (error) {\n  expect(error.message).to.include('URL not found')\n}",
                  "err": {
                    "message": "AssertionError: expected 'Should have thrown not found error' to include 'URL not found'",
                    "estack": "AssertionError: expected 'Should have thrown not found error' to include 'URL not found'\n    at Context.<anonymous> (file:///Users/andrew/Dev/url-shortner-ai-demo/test/services/UrlService.test.js:924:34)",
                    "diff": null
                  },
                  "uuid": "d21dfdf1-409e-411a-ab52-8a15320155b1",
                  "parentUUID": "b9652e77-c325-488b-89d5-1a0b0cc2a2cf",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle database failure during click increment",
                  "fullTitle": "UrlService Unit Tests incrementClickCount() should handle database failure during click increment",
                  "timedOut": false,
                  "duration": 0,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const dbError = new Error('Database connection failed')\nmockDatabase.getClient().url.update.rejects(dbError)\ntry {\n  await urlService.incrementClickCount(shortCode)\n  expect.fail('Should have thrown database error')\n} catch (error) {\n  expect(error.message).to.include('Failed to increment click count')\n  expect(mockLogger.error).to.have.been.called\n}",
                  "err": {
                    "message": "AssertionError: expected 'Database service unavailable' to include 'Failed to increment click count'",
                    "estack": "AssertionError: expected 'Database service unavailable' to include 'Failed to increment click count'\n    at Context.<anonymous> (file:///Users/andrew/Dev/url-shortner-ai-demo/test/services/UrlService.test.js:936:34)",
                    "diff": null
                  },
                  "uuid": "ac1d05cb-5f3d-48a9-8101-d4ccbd2dfd05",
                  "parentUUID": "b9652e77-c325-488b-89d5-1a0b0cc2a2cf",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should validate short code",
                  "fullTitle": "UrlService Unit Tests incrementClickCount() should validate short code",
                  "timedOut": false,
                  "duration": 0,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "try {\n  await urlService.incrementClickCount('')\n  expect.fail('Should have thrown validation error')\n} catch (error) {\n  expect(error.message).to.include('Short code is required')\n  expect(mockDatabase.getClient().url.update).to.not.have.been.called\n}",
                  "err": {
                    "message": "Error: Invalid Chai property: called. Did you mean \"all\"?",
                    "estack": "Error: Invalid Chai property: called. Did you mean \"all\"?\n    at Object.proxyGetter [as get] (node_modules/chai/lib/chai/utils/proxify.js:75:17)\n    at Context.<anonymous> (file:///Users/andrew/Dev/url-shortner-ai-demo/test/services/UrlService.test.js:947:69)",
                    "diff": null
                  },
                  "uuid": "6ff02532-b393-4a0f-bad6-d5b989c92624",
                  "parentUUID": "b9652e77-c325-488b-89d5-1a0b0cc2a2cf",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "c62d3e48-5d92-4d65-9ed9-1e9862db8fcf",
                "d21dfdf1-409e-411a-ab52-8a15320155b1",
                "ac1d05cb-5f3d-48a9-8101-d4ccbd2dfd05",
                "6ff02532-b393-4a0f-bad6-d5b989c92624"
              ],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "191303a6-c61c-47db-923d-d607cd2f2c18",
          "title": "UrlService Integration Tests",
          "fullFile": "/Users/andrew/Dev/url-shortner-ai-demo/test/unit/UrlService-integration.test.js",
          "file": "/test/unit/UrlService-integration.test.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"UrlService Integration Tests\"",
              "fullTitle": "UrlService Integration Tests \"before each\" hook in \"UrlService Integration Tests\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "logger = createLogger()\n\n// Create mock database service\nmockDatabase = {\n  isConnected: true,\n  healthCheck: () => Promise.resolve({ healthy: true, responseTime: 10 }),\n  getClient: () => ({\n    url: {\n      create: (options) => Promise.resolve({\n        id: 'test-id',\n        originalUrl: options.data.originalUrl,\n        shortCode: options.data.shortCode,\n        createdAt: new Date(),\n        expiresAt: options.data.expiresAt,\n        clickCount: 0\n      }),\n      findUnique: () => Promise.resolve(null),\n      findMany: () => Promise.resolve([]),\n      update: () => Promise.resolve({ clickCount: 1 }),\n      delete: () => Promise.resolve({})\n    },\n    $transaction: (fn) => fn({\n      url: {\n        create: (options) => Promise.resolve({\n          id: 'test-id',\n          originalUrl: options.data.originalUrl,\n          shortCode: options.data.shortCode,\n          createdAt: new Date(),\n          expiresAt: options.data.expiresAt,\n          clickCount: 0\n        })\n      }\n    })\n  })\n}\n// Create mock Redis service\nmockRedis = {\n  isConnected: true,\n  getShortCode: () => Promise.resolve({\n    code: 'abc123',\n    source: 'redis_pool',\n    responseTime: 5\n  }),\n  cacheUrl: () => Promise.resolve(),\n  getCachedUrl: () => Promise.resolve(null),\n  removeCachedUrl: () => Promise.resolve()\n}",
              "err": {},
              "uuid": "505dcb23-7384-4ce6-ac6b-8669070460e9",
              "parentUUID": "191303a6-c61c-47db-923d-d607cd2f2c18",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "30c796eb-cd26-4cf0-a39c-9673d0ad1a25",
              "title": "Constructor and Dependency Validation",
              "fullFile": "/Users/andrew/Dev/url-shortner-ai-demo/test/unit/UrlService-integration.test.js",
              "file": "/test/unit/UrlService-integration.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should throw error when database service is missing",
                  "fullTitle": "UrlService Integration Tests Constructor and Dependency Validation should throw error when database service is missing",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(() => {\n  new UrlService(null, mockRedis, logger)\n}).to.throw('UrlService requires a database service instance')",
                  "err": {},
                  "uuid": "f7981502-155f-4b3d-bfbe-1900c2cf5f4d",
                  "parentUUID": "30c796eb-cd26-4cf0-a39c-9673d0ad1a25",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when redis service is missing",
                  "fullTitle": "UrlService Integration Tests Constructor and Dependency Validation should throw error when redis service is missing",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(() => {\n  new UrlService(mockDatabase, null, logger)\n}).to.throw('UrlService requires a redis service instance')",
                  "err": {},
                  "uuid": "51e713b7-6a1b-4fcc-bb03-ffbb9be1ba96",
                  "parentUUID": "30c796eb-cd26-4cf0-a39c-9673d0ad1a25",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when logger is missing",
                  "fullTitle": "UrlService Integration Tests Constructor and Dependency Validation should throw error when logger is missing",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(() => {\n  new UrlService(mockDatabase, mockRedis, null)\n}).to.throw('UrlService requires a logger instance')",
                  "err": {},
                  "uuid": "a089bc54-6a18-4317-aa59-d7d7c3e97cb7",
                  "parentUUID": "30c796eb-cd26-4cf0-a39c-9673d0ad1a25",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should initialize successfully with all dependencies",
                  "fullTitle": "UrlService Integration Tests Constructor and Dependency Validation should initialize successfully with all dependencies",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(() => {\n  urlService = new UrlService(mockDatabase, mockRedis, logger)\n}).to.not.throw()",
                  "err": {},
                  "uuid": "15475409-adab-43d4-aff6-723adb89dd5e",
                  "parentUUID": "30c796eb-cd26-4cf0-a39c-9673d0ad1a25",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f7981502-155f-4b3d-bfbe-1900c2cf5f4d",
                "51e713b7-6a1b-4fcc-bb03-ffbb9be1ba96",
                "a089bc54-6a18-4317-aa59-d7d7c3e97cb7",
                "15475409-adab-43d4-aff6-723adb89dd5e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "a9133285-1ec4-4632-b580-6dcdabae6255",
              "title": "Database Integration Tests",
              "fullFile": "/Users/andrew/Dev/url-shortner-ai-demo/test/unit/UrlService-integration.test.js",
              "file": "/test/unit/UrlService-integration.test.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"Database Integration Tests\"",
                  "fullTitle": "UrlService Integration Tests Database Integration Tests \"before each\" hook in \"Database Integration Tests\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "urlService = new UrlService(mockDatabase, mockRedis, logger)",
                  "err": {},
                  "uuid": "405150ff-9581-4c11-b9ec-6fa96e4bdfb3",
                  "parentUUID": "a9133285-1ec4-4632-b580-6dcdabae6255",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should check database health before URL creation",
                  "fullTitle": "UrlService Integration Tests Database Integration Tests should check database health before URL creation",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let healthCheckCalled = false\nmockDatabase.healthCheck = () => {\n  healthCheckCalled = true\n  return Promise.resolve({ healthy: true, responseTime: 10 })\n}\nawait urlService.createShortUrl('https://example.com')\nexpect(healthCheckCalled).to.be.true",
                  "err": {},
                  "uuid": "914f37ec-ef7f-43dd-96a5-749945d1074b",
                  "parentUUID": "a9133285-1ec4-4632-b580-6dcdabae6255",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle database health check failure",
                  "fullTitle": "UrlService Integration Tests Database Integration Tests should handle database health check failure",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "mockDatabase.healthCheck = () => Promise.reject(new Error('Database health check failed'))\ntry {\n  await urlService.createShortUrl('https://example.com')\n  expect.fail('Should have thrown an error')\n} catch (error) {\n  expect(error.message).to.include('Database service unavailable')\n}",
                  "err": {},
                  "uuid": "efaebb53-e73f-4555-b89e-39a702a335f3",
                  "parentUUID": "a9133285-1ec4-4632-b580-6dcdabae6255",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle database disconnection",
                  "fullTitle": "UrlService Integration Tests Database Integration Tests should handle database disconnection",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "mockDatabase.isConnected = false\nmockDatabase.healthCheck = () => Promise.reject(new Error('Database client not connected'))\ntry {\n  await urlService.createShortUrl('https://example.com')\n  expect.fail('Should have thrown an error')\n} catch (error) {\n  expect(error.message).to.include('Database service unavailable')\n}",
                  "err": {},
                  "uuid": "6633cbdb-b74d-4182-87a1-c488ea49a2c5",
                  "parentUUID": "a9133285-1ec4-4632-b580-6dcdabae6255",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle database timeout errors",
                  "fullTitle": "UrlService Integration Tests Database Integration Tests should handle database timeout errors",
                  "timedOut": false,
                  "duration": 12,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "mockDatabase.healthCheck = () => new Promise((_, reject) => {\n  setTimeout(() => reject(new Error('Database health check timeout')), 10)\n})\ntry {\n  await urlService.createShortUrl('https://example.com')\n  expect.fail('Should have thrown an error')\n} catch (error) {\n  expect(error.message).to.include('Database service unavailable')\n}",
                  "err": {},
                  "uuid": "def4ddca-1c46-4fc3-b602-add1612f77eb",
                  "parentUUID": "a9133285-1ec4-4632-b580-6dcdabae6255",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle unique constraint violations with retry",
                  "fullTitle": "UrlService Integration Tests Database Integration Tests should handle unique constraint violations with retry",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let createCallCount = 0\nmockDatabase.getClient = () => ({\n  url: {\n    create: (options) => {\n      createCallCount++\n      if (createCallCount === 1) {\n        // First call fails with unique constraint violation\n        const error = new Error('Unique constraint failed')\n        error.code = 'P2002'\n        error.meta = { target: ['shortCode'] }\n        return Promise.reject(error)\n      }\n      // Second call succeeds\n      return Promise.resolve({\n        id: 'test-id',\n        originalUrl: options.data.originalUrl,\n        shortCode: options.data.shortCode,\n        createdAt: new Date(),\n        expiresAt: options.data.expiresAt,\n        clickCount: 0\n      })\n    }\n  }\n})\nconst result = await urlService.createShortUrl('https://example.com')\nexpect(result).to.have.property('shortCode')\nexpect(createCallCount).to.equal(2)",
                  "err": {},
                  "uuid": "0168a691-590a-4126-91f1-b02478a714fa",
                  "parentUUID": "a9133285-1ec4-4632-b580-6dcdabae6255",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle database connection errors during operations",
                  "fullTitle": "UrlService Integration Tests Database Integration Tests should handle database connection errors during operations",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "mockDatabase.getClient = () => ({\n  url: {\n    create: (options) => {\n      const error = new Error('Connection refused')\n      error.code = 'P1001'\n      return Promise.reject(error)\n    }\n  }\n})\ntry {\n  await urlService.createShortUrl('https://example.com')\n  expect.fail('Should have thrown an error')\n} catch (error) {\n  expect(error.message).to.include('Database service unavailable')\n}",
                  "err": {},
                  "uuid": "1b69f203-a1fe-4caf-87ce-7e582d36e597",
                  "parentUUID": "a9133285-1ec4-4632-b580-6dcdabae6255",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "914f37ec-ef7f-43dd-96a5-749945d1074b",
                "efaebb53-e73f-4555-b89e-39a702a335f3",
                "6633cbdb-b74d-4182-87a1-c488ea49a2c5",
                "def4ddca-1c46-4fc3-b602-add1612f77eb",
                "0168a691-590a-4126-91f1-b02478a714fa",
                "1b69f203-a1fe-4caf-87ce-7e582d36e597"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 15,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "a5626227-d0a1-4a0e-ad34-745beb551320",
              "title": "Redis Integration Tests",
              "fullFile": "/Users/andrew/Dev/url-shortner-ai-demo/test/unit/UrlService-integration.test.js",
              "file": "/test/unit/UrlService-integration.test.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"Redis Integration Tests\"",
                  "fullTitle": "UrlService Integration Tests Redis Integration Tests \"before each\" hook in \"Redis Integration Tests\"",
                  "timedOut": false,
                  "duration": 1,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "urlService = new UrlService(mockDatabase, mockRedis, logger)",
                  "err": {},
                  "uuid": "b9476136-2093-43cd-973e-71e2068064b5",
                  "parentUUID": "a5626227-d0a1-4a0e-ad34-745beb551320",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should get short code from Redis when available",
                  "fullTitle": "UrlService Integration Tests Redis Integration Tests should get short code from Redis when available",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let redisGetShortCodeCalled = false\nmockRedis.getShortCode = () => {\n  redisGetShortCodeCalled = true\n  return Promise.resolve({\n    code: 'redis123',\n    source: 'redis_pool',\n    responseTime: 5\n  })\n}\nconst result = await urlService.createShortUrl('https://example.com')\nexpect(redisGetShortCodeCalled).to.be.true\nexpect(result.shortCode).to.be.a('string')\nexpect(result.shortCode).to.have.length.greaterThan(0)",
                  "err": {},
                  "uuid": "0f1f5cf3-156b-4eed-ad21-c039c6dee913",
                  "parentUUID": "a5626227-d0a1-4a0e-ad34-745beb551320",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should fallback to local generation when Redis fails",
                  "fullTitle": "UrlService Integration Tests Redis Integration Tests should fallback to local generation when Redis fails",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "mockRedis.isConnected = false\nmockRedis.getShortCode = () => Promise.reject(new Error('Redis connection failed'))\nconst result = await urlService.createShortUrl('https://example.com')\nexpect(result).to.have.property('shortCode')\nexpect(result.shortCode).to.be.a('string')\nexpect(result.shortCode).to.have.length.at.least(5) // Default fallback length",
                  "err": {},
                  "uuid": "16853564-0829-4d11-ba05-0315caeedc05",
                  "parentUUID": "a5626227-d0a1-4a0e-ad34-745beb551320",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle Redis disconnection gracefully",
                  "fullTitle": "UrlService Integration Tests Redis Integration Tests should handle Redis disconnection gracefully",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "mockRedis.isConnected = false\nconst result = await urlService.createShortUrl('https://example.com')\nexpect(result).to.have.property('shortCode')\n// Should use local fallback generation",
                  "err": {},
                  "uuid": "fa84e48c-5ead-4f30-a705-8357e53a670c",
                  "parentUUID": "a5626227-d0a1-4a0e-ad34-745beb551320",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should cache URLs when Redis is available",
                  "fullTitle": "UrlService Integration Tests Redis Integration Tests should cache URLs when Redis is available",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let cacheUrlCalled = false\nmockRedis.cacheUrl = (shortCode, originalUrl, ttl) => {\n  cacheUrlCalled = true\n  expect(shortCode).to.be.a('string')\n  expect(originalUrl).to.equal('https://example.com')\n  expect(ttl).to.be.a('number')\n  return Promise.resolve()\n}\nawait urlService.createShortUrl('https://example.com')\nexpect(cacheUrlCalled).to.be.true",
                  "err": {},
                  "uuid": "7f244162-2457-4ad5-9693-bbc33e055e92",
                  "parentUUID": "a5626227-d0a1-4a0e-ad34-745beb551320",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should continue operation even if caching fails",
                  "fullTitle": "UrlService Integration Tests Redis Integration Tests should continue operation even if caching fails",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "mockRedis.cacheUrl = () => Promise.reject(new Error('Cache write failed'))\nconst result = await urlService.createShortUrl('https://example.com')\nexpect(result).to.have.property('shortCode')\n// Should complete successfully despite cache failure",
                  "err": {},
                  "uuid": "378387dc-58b4-40ca-94c5-353917c1ea6a",
                  "parentUUID": "a5626227-d0a1-4a0e-ad34-745beb551320",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle cache retrieval failures gracefully",
                  "fullTitle": "UrlService Integration Tests Redis Integration Tests should handle cache retrieval failures gracefully",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Setup existing URL in database\nmockDatabase.getClient = () => ({\n  url: {\n    findUnique: () => Promise.resolve({\n      id: 'test-id',\n      originalUrl: 'https://example.com',\n      shortCode: 'abc123',\n      createdAt: new Date(),\n      expiresAt: new Date(Date.now() + 6 * 30 * 24 * 60 * 60 * 1000),\n      clickCount: 5\n    })\n  }\n})\nmockRedis.getCachedUrl = () => Promise.reject(new Error('Cache read failed'))\nconst result = await urlService.getUrlByShortCode('abc123')\nexpect(result).to.have.property('originalUrl', 'https://example.com')\n// Should fallback to database lookup",
                  "err": {},
                  "uuid": "80c5341f-dd14-4223-bfaf-ca7e175f8eb2",
                  "parentUUID": "a5626227-d0a1-4a0e-ad34-745beb551320",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0f1f5cf3-156b-4eed-ad21-c039c6dee913",
                "16853564-0829-4d11-ba05-0315caeedc05",
                "fa84e48c-5ead-4f30-a705-8357e53a670c",
                "7f244162-2457-4ad5-9693-bbc33e055e92",
                "378387dc-58b4-40ca-94c5-353917c1ea6a",
                "80c5341f-dd14-4223-bfaf-ca7e175f8eb2"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "1aa38be5-3a36-4cda-9200-89a9d085b2db",
              "title": "Graceful Degradation Tests",
              "fullFile": "/Users/andrew/Dev/url-shortner-ai-demo/test/unit/UrlService-integration.test.js",
              "file": "/test/unit/UrlService-integration.test.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"Graceful Degradation Tests\"",
                  "fullTitle": "UrlService Integration Tests Graceful Degradation Tests \"before each\" hook in \"Graceful Degradation Tests\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "urlService = new UrlService(mockDatabase, mockRedis, logger)",
                  "err": {},
                  "uuid": "3d04926a-c34b-49c8-a36b-6f33f20ec869",
                  "parentUUID": "1aa38be5-3a36-4cda-9200-89a9d085b2db",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work with Redis completely unavailable",
                  "fullTitle": "UrlService Integration Tests Graceful Degradation Tests should work with Redis completely unavailable",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Simulate Redis completely down\nmockRedis.isConnected = false\nmockRedis.getShortCode = () => Promise.reject(new Error('Redis unavailable'))\nmockRedis.cacheUrl = () => Promise.reject(new Error('Redis unavailable'))\nmockRedis.getCachedUrl = () => Promise.reject(new Error('Redis unavailable'))\nmockRedis.removeCachedUrl = () => Promise.reject(new Error('Redis unavailable'))\n// Should still work with fallback mechanisms\nconst createResult = await urlService.createShortUrl('https://example.com')\nexpect(createResult).to.have.property('shortCode')\nexpect(createResult.shortCode).to.be.a('string')\n// Setup for retrieval test\nmockDatabase.getClient = () => ({\n  url: {\n    findUnique: (query) => Promise.resolve({\n      id: 'test-id',\n      originalUrl: 'https://example.com',\n      shortCode: query.where.shortCode,\n      createdAt: new Date(),\n      expiresAt: new Date(Date.now() + 6 * 30 * 24 * 60 * 60 * 1000),\n      clickCount: 0\n    }),\n    delete: () => Promise.resolve({})\n  }\n})\nconst getResult = await urlService.getUrlByShortCode(createResult.shortCode)\nexpect(getResult).to.have.property('originalUrl', 'https://example.com')\nconst deleteResult = await urlService.deleteUrl(createResult.shortCode)\nexpect(deleteResult).to.be.true",
                  "err": {},
                  "uuid": "ede5d692-c158-4e81-a6eb-e614231deedb",
                  "parentUUID": "1aa38be5-3a36-4cda-9200-89a9d085b2db",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle partial Redis functionality",
                  "fullTitle": "UrlService Integration Tests Graceful Degradation Tests should handle partial Redis functionality",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Redis connected but some operations fail\nmockRedis.isConnected = true\nmockRedis.getShortCode = () => Promise.resolve({\n  code: 'partial123',\n  source: 'redis_pool',\n  responseTime: 5\n})\nmockRedis.cacheUrl = () => Promise.reject(new Error('Cache write failed'))\nmockRedis.getCachedUrl = () => Promise.reject(new Error('Cache read failed'))\nconst result = await urlService.createShortUrl('https://example.com')\nexpect(result).to.have.property('shortCode')\nexpect(result.shortCode).to.be.a('string')\n// Should complete successfully despite cache failures",
                  "err": {},
                  "uuid": "e4b804ab-ca89-494b-bb27-c9c789b5a521",
                  "parentUUID": "1aa38be5-3a36-4cda-9200-89a9d085b2db",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ede5d692-c158-4e81-a6eb-e614231deedb",
                "e4b804ab-ca89-494b-bb27-c9c789b5a521"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "ad9b9ad5-cede-4af0-824f-b9e7885171b9",
              "title": "Error Categorization Tests",
              "fullFile": "/Users/andrew/Dev/url-shortner-ai-demo/test/unit/UrlService-integration.test.js",
              "file": "/test/unit/UrlService-integration.test.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"Error Categorization Tests\"",
                  "fullTitle": "UrlService Integration Tests Error Categorization Tests \"before each\" hook in \"Error Categorization Tests\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "urlService = new UrlService(mockDatabase, mockRedis, logger)",
                  "err": {},
                  "uuid": "851d8c67-a69d-42eb-bd38-b0363584e379",
                  "parentUUID": "ad9b9ad5-cede-4af0-824f-b9e7885171b9",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should categorize database connection errors correctly",
                  "fullTitle": "UrlService Integration Tests Error Categorization Tests should categorize database connection errors correctly",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const connectionErrors = [\n  { code: 'P1001', message: 'Can\\'t reach database server' },\n  { code: 'P1002', message: 'Database server unreachable' },\n  { code: 'P1008', message: 'Operations timed out' },\n  { message: 'connection refused' },\n  { message: 'connection timeout' }\n]\nfor (const errorData of connectionErrors) {\n  mockDatabase.getClient = () => ({\n    url: {\n      create: (options) => {\n        const error = new Error(errorData.message || 'Connection error')\n        if (errorData.code) error.code = errorData.code\n        return Promise.reject(error)\n      }\n    }\n  })\n  try {\n    await urlService.createShortUrl('https://example.com')\n    expect.fail('Should have thrown an error')\n  } catch (error) {\n    expect(error.message).to.include('Database service unavailable')\n  }\n}",
                  "err": {},
                  "uuid": "82d3eaaf-f2a1-498b-af97-22fb6a28b12e",
                  "parentUUID": "ad9b9ad5-cede-4af0-824f-b9e7885171b9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle unique constraint violations appropriately",
                  "fullTitle": "UrlService Integration Tests Error Categorization Tests should handle unique constraint violations appropriately",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let attemptCount = 0\nlet getShortCodeCallCount = 0\n\n// Mock Redis to return different codes each time\nmockRedis.getShortCode = () => {\n  getShortCodeCallCount++\n  return Promise.resolve({\n    code: `attempt${getShortCodeCallCount}`,\n    source: 'redis_pool',\n    responseTime: 5\n  })\n}\n\nmockDatabase.getClient = () => ({\n  url: {\n    create: (options) => {\n      attemptCount++\n      // Always fail with unique constraint error - this will exhaust all 3 attempts\n      const error = new Error('Unique constraint failed')\n      error.code = 'P2002'\n      error.meta = { target: ['shortCode'] }\n      return Promise.reject(error)\n    }\n  }\n})\n// Should fail after 3 attempts with the generic error message\ntry {\n  await urlService.createShortUrl('https://example.com')\n  expect.fail('Should have thrown an error after max attempts')\n} catch (error) {\n  expect(error.message).to.include('Failed to create shortened URL')\n  expect(attemptCount).to.equal(3) // Should have tried 3 times\n  expect(getShortCodeCallCount).to.equal(3) // Initial + 2 retries\n}",
                  "err": {},
                  "uuid": "38608d0a-084d-47d0-8151-ac96d645054e",
                  "parentUUID": "ad9b9ad5-cede-4af0-824f-b9e7885171b9",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "82d3eaaf-f2a1-498b-af97-22fb6a28b12e",
                "38608d0a-084d-47d0-8151-ac96d645054e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "eeee368f-37d6-4450-9170-68edbe9e7023",
              "title": "Bulk Operations Integration",
              "fullFile": "/Users/andrew/Dev/url-shortner-ai-demo/test/unit/UrlService-integration.test.js",
              "file": "/test/unit/UrlService-integration.test.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"Bulk Operations Integration\"",
                  "fullTitle": "UrlService Integration Tests Bulk Operations Integration \"before each\" hook in \"Bulk Operations Integration\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "urlService = new UrlService(mockDatabase, mockRedis, logger)",
                  "err": {},
                  "uuid": "1dee6637-58ec-4a6c-afc8-4cb2e953c66d",
                  "parentUUID": "eeee368f-37d6-4450-9170-68edbe9e7023",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should handle Redis unavailable during bulk operations",
                  "fullTitle": "UrlService Integration Tests Bulk Operations Integration should handle Redis unavailable during bulk operations",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "mockRedis.isConnected = false\n// Mock successful transaction\nlet transactionCalled = false\nmockDatabase.getClient = () => ({\n  $transaction: (fn) => {\n    transactionCalled = true\n    return fn({\n      url: {\n        create: (options) => Promise.resolve({\n          id: `test-id-${Date.now()}`,\n          originalUrl: options.data.originalUrl,\n          shortCode: options.data.shortCode,\n          createdAt: new Date(),\n          expiresAt: options.data.expiresAt,\n          clickCount: 0\n        })\n      }\n    })\n  }\n})\nconst result = await urlService.createBulkShortUrls([\n  'https://example1.com',\n  'https://example2.com'\n])\nexpect(transactionCalled).to.be.true\nexpect(result.successCount).to.equal(2)\nexpect(result.failureCount).to.equal(0)",
                  "err": {},
                  "uuid": "97efe0a4-9727-47f4-830d-ed9985990526",
                  "parentUUID": "eeee368f-37d6-4450-9170-68edbe9e7023",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle database failures during bulk operations",
                  "fullTitle": "UrlService Integration Tests Bulk Operations Integration should handle database failures during bulk operations",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "mockDatabase.getClient = () => ({\n  $transaction: () => Promise.reject(new Error('Transaction failed'))\n})\ntry {\n  await urlService.createBulkShortUrls([\n    'https://example1.com',\n    'https://example2.com'\n  ])\n  expect.fail('Should have thrown an error')\n} catch (error) {\n  expect(error.message).to.include('Failed to create bulk URLs')\n}",
                  "err": {},
                  "uuid": "d60d983f-1ba7-4b10-a648-6f48adcb930d",
                  "parentUUID": "eeee368f-37d6-4450-9170-68edbe9e7023",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "97efe0a4-9727-47f4-830d-ed9985990526",
                "d60d983f-1ba7-4b10-a648-6f48adcb930d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "c9afa9be-3967-47e1-9b25-5cf9281c477f",
          "title": "URL Validators Unit Tests",
          "fullFile": "/Users/andrew/Dev/url-shortner-ai-demo/test/utils/validators.test.js",
          "file": "/test/utils/validators.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "a2973da9-ecf0-4061-9b3c-e2ec6f6f6c3e",
              "title": "validateUrl()",
              "fullFile": "/Users/andrew/Dev/url-shortner-ai-demo/test/utils/validators.test.js",
              "file": "/test/utils/validators.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
                  "uuid": "a65495f7-5ec1-4682-b942-a50fafabcd1c",
                  "title": "Valid URLs",
                  "fullFile": "/Users/andrew/Dev/url-shortner-ai-demo/test/utils/validators.test.js",
                  "file": "/test/utils/validators.test.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should accept valid URL: https://example.com",
                      "fullTitle": "URL Validators Unit Tests validateUrl() Valid URLs should accept valid URL: https://example.com",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const result = validateUrl(url, { allowLocalhost: true, allowIpAddresses: true })\nexpect(result.isValid).to.be.true\nexpect(result.error).to.be.undefined",
                      "err": {},
                      "uuid": "1e660984-d014-4432-bfaa-8937ad2ed703",
                      "parentUUID": "a65495f7-5ec1-4682-b942-a50fafabcd1c",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should accept valid URL: http://example.com",
                      "fullTitle": "URL Validators Unit Tests validateUrl() Valid URLs should accept valid URL: http://example.com",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const result = validateUrl(url, { allowLocalhost: true, allowIpAddresses: true })\nexpect(result.isValid).to.be.true\nexpect(result.error).to.be.undefined",
                      "err": {},
                      "uuid": "feb2178d-9ec8-4da9-a5b1-1a83cb95cb3b",
                      "parentUUID": "a65495f7-5ec1-4682-b942-a50fafabcd1c",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should accept valid URL: https://www.example.com",
                      "fullTitle": "URL Validators Unit Tests validateUrl() Valid URLs should accept valid URL: https://www.example.com",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const result = validateUrl(url, { allowLocalhost: true, allowIpAddresses: true })\nexpect(result.isValid).to.be.true\nexpect(result.error).to.be.undefined",
                      "err": {},
                      "uuid": "42114bd4-16ec-4538-bcd9-dd4546f6c7f5",
                      "parentUUID": "a65495f7-5ec1-4682-b942-a50fafabcd1c",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should accept valid URL: http://www.example.com",
                      "fullTitle": "URL Validators Unit Tests validateUrl() Valid URLs should accept valid URL: http://www.example.com",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const result = validateUrl(url, { allowLocalhost: true, allowIpAddresses: true })\nexpect(result.isValid).to.be.true\nexpect(result.error).to.be.undefined",
                      "err": {},
                      "uuid": "f63e6f48-19da-46f4-a991-c7a17d3229e1",
                      "parentUUID": "a65495f7-5ec1-4682-b942-a50fafabcd1c",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should accept valid URL: https://example.com/",
                      "fullTitle": "URL Validators Unit Tests validateUrl() Valid URLs should accept valid URL: https://example.com/",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const result = validateUrl(url, { allowLocalhost: true, allowIpAddresses: true })\nexpect(result.isValid).to.be.true\nexpect(result.error).to.be.undefined",
                      "err": {},
                      "uuid": "25a4830f-e711-4f77-a8d5-7fd60010c86e",
                      "parentUUID": "a65495f7-5ec1-4682-b942-a50fafabcd1c",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should accept valid URL: https://example.com/path",
                      "fullTitle": "URL Validators Unit Tests validateUrl() Valid URLs should accept valid URL: https://example.com/path",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const result = validateUrl(url, { allowLocalhost: true, allowIpAddresses: true })\nexpect(result.isValid).to.be.true\nexpect(result.error).to.be.undefined",
                      "err": {},
                      "uuid": "537e8800-0391-4413-aafc-dd25097da1ec",
                      "parentUUID": "a65495f7-5ec1-4682-b942-a50fafabcd1c",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should accept valid URL: https://example.com/path/to/resource",
                      "fullTitle": "URL Validators Unit Tests validateUrl() Valid URLs should accept valid URL: https://example.com/path/to/resource",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const result = validateUrl(url, { allowLocalhost: true, allowIpAddresses: true })\nexpect(result.isValid).to.be.true\nexpect(result.error).to.be.undefined",
                      "err": {},
                      "uuid": "aba540d4-cdf8-4d06-abf3-9968595130fe",
                      "parentUUID": "a65495f7-5ec1-4682-b942-a50fafabcd1c",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should accept valid URL: https://example.com/path?query=value",
                      "fullTitle": "URL Validators Unit Tests validateUrl() Valid URLs should accept valid URL: https://example.com/path?query=value",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const result = validateUrl(url, { allowLocalhost: true, allowIpAddresses: true })\nexpect(result.isValid).to.be.true\nexpect(result.error).to.be.undefined",
                      "err": {},
                      "uuid": "fdffed40-65f8-4d58-9c24-242e3af4d643",
                      "parentUUID": "a65495f7-5ec1-4682-b942-a50fafabcd1c",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should accept valid URL: https://example.com/path?query=value&another=param",
                      "fullTitle": "URL Validators Unit Tests validateUrl() Valid URLs should accept valid URL: https://example.com/path?query=value&another=param",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const result = validateUrl(url, { allowLocalhost: true, allowIpAddresses: true })\nexpect(result.isValid).to.be.true\nexpect(result.error).to.be.undefined",
                      "err": {},
                      "uuid": "6bbeb585-f6c1-4f12-8c3c-0651f8de14b8",
                      "parentUUID": "a65495f7-5ec1-4682-b942-a50fafabcd1c",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should accept valid URL: https://example.com/path#fragment",
                      "fullTitle": "URL Validators Unit Tests validateUrl() Valid URLs should accept valid URL: https://example.com/path#fragment",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const result = validateUrl(url, { allowLocalhost: true, allowIpAddresses: true })\nexpect(result.isValid).to.be.true\nexpect(result.error).to.be.undefined",
                      "err": {},
                      "uuid": "6d49ab70-1d1a-4413-88ae-e2e5db090141",
                      "parentUUID": "a65495f7-5ec1-4682-b942-a50fafabcd1c",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should accept valid URL: https://example.com/path?query=value#fragment",
                      "fullTitle": "URL Validators Unit Tests validateUrl() Valid URLs should accept valid URL: https://example.com/path?query=value#fragment",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const result = validateUrl(url, { allowLocalhost: true, allowIpAddresses: true })\nexpect(result.isValid).to.be.true\nexpect(result.error).to.be.undefined",
                      "err": {},
                      "uuid": "ffeaaf3c-3567-44f6-9b63-ac4e452b5000",
                      "parentUUID": "a65495f7-5ec1-4682-b942-a50fafabcd1c",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should accept valid URL: https://subdomain.example.com",
                      "fullTitle": "URL Validators Unit Tests validateUrl() Valid URLs should accept valid URL: https://subdomain.example.com",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const result = validateUrl(url, { allowLocalhost: true, allowIpAddresses: true })\nexpect(result.isValid).to.be.true\nexpect(result.error).to.be.undefined",
                      "err": {},
                      "uuid": "b9311497-8e9d-4aa8-998d-44e8297d88ad",
                      "parentUUID": "a65495f7-5ec1-4682-b942-a50fafabcd1c",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should accept valid URL: https://sub.domain.example.com",
                      "fullTitle": "URL Validators Unit Tests validateUrl() Valid URLs should accept valid URL: https://sub.domain.example.com",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const result = validateUrl(url, { allowLocalhost: true, allowIpAddresses: true })\nexpect(result.isValid).to.be.true\nexpect(result.error).to.be.undefined",
                      "err": {},
                      "uuid": "98ba72ba-d96c-4fe0-9062-b82de3d3e2b8",
                      "parentUUID": "a65495f7-5ec1-4682-b942-a50fafabcd1c",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should accept valid URL: https://example.co.uk",
                      "fullTitle": "URL Validators Unit Tests validateUrl() Valid URLs should accept valid URL: https://example.co.uk",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const result = validateUrl(url, { allowLocalhost: true, allowIpAddresses: true })\nexpect(result.isValid).to.be.true\nexpect(result.error).to.be.undefined",
                      "err": {},
                      "uuid": "65cf1f05-1dcf-4bb5-8054-d350ff5be28c",
                      "parentUUID": "a65495f7-5ec1-4682-b942-a50fafabcd1c",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should accept valid URL: https://example.org",
                      "fullTitle": "URL Validators Unit Tests validateUrl() Valid URLs should accept valid URL: https://example.org",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const result = validateUrl(url, { allowLocalhost: true, allowIpAddresses: true })\nexpect(result.isValid).to.be.true\nexpect(result.error).to.be.undefined",
                      "err": {},
                      "uuid": "54880767-d784-46f2-aa0f-46265d773cbb",
                      "parentUUID": "a65495f7-5ec1-4682-b942-a50fafabcd1c",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should accept valid URL: https://example.net",
                      "fullTitle": "URL Validators Unit Tests validateUrl() Valid URLs should accept valid URL: https://example.net",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const result = validateUrl(url, { allowLocalhost: true, allowIpAddresses: true })\nexpect(result.isValid).to.be.true\nexpect(result.error).to.be.undefined",
                      "err": {},
                      "uuid": "b6add28d-5ec1-4b32-89f2-1eeae2967000",
                      "parentUUID": "a65495f7-5ec1-4682-b942-a50fafabcd1c",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should accept valid URL: https://example.com:8080",
                      "fullTitle": "URL Validators Unit Tests validateUrl() Valid URLs should accept valid URL: https://example.com:8080",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const result = validateUrl(url, { allowLocalhost: true, allowIpAddresses: true })\nexpect(result.isValid).to.be.true\nexpect(result.error).to.be.undefined",
                      "err": {},
                      "uuid": "c4e40e62-38ec-4385-81a7-f7b8542a3779",
                      "parentUUID": "a65495f7-5ec1-4682-b942-a50fafabcd1c",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should accept valid URL: https://example.com/path/with-dashes",
                      "fullTitle": "URL Validators Unit Tests validateUrl() Valid URLs should accept valid URL: https://example.com/path/with-dashes",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const result = validateUrl(url, { allowLocalhost: true, allowIpAddresses: true })\nexpect(result.isValid).to.be.true\nexpect(result.error).to.be.undefined",
                      "err": {},
                      "uuid": "e8019d68-6237-4fc3-9378-76d65b624a9c",
                      "parentUUID": "a65495f7-5ec1-4682-b942-a50fafabcd1c",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should accept valid URL: https://example.com/path/with_underscores",
                      "fullTitle": "URL Validators Unit Tests validateUrl() Valid URLs should accept valid URL: https://example.com/path/with_underscores",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const result = validateUrl(url, { allowLocalhost: true, allowIpAddresses: true })\nexpect(result.isValid).to.be.true\nexpect(result.error).to.be.undefined",
                      "err": {},
                      "uuid": "6ac901fa-7dae-42bf-ac8c-a96b67f387ee",
                      "parentUUID": "a65495f7-5ec1-4682-b942-a50fafabcd1c",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should accept valid URL: https://example.com/path/with.dots",
                      "fullTitle": "URL Validators Unit Tests validateUrl() Valid URLs should accept valid URL: https://example.com/path/with.dots",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const result = validateUrl(url, { allowLocalhost: true, allowIpAddresses: true })\nexpect(result.isValid).to.be.true\nexpect(result.error).to.be.undefined",
                      "err": {},
                      "uuid": "bb9e0da4-8b87-43b0-8d0e-ed4bf5c81db0",
                      "parentUUID": "a65495f7-5ec1-4682-b942-a50fafabcd1c",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should accept valid URL: https://example.com/path/with%20encoded%20spaces",
                      "fullTitle": "URL Validators Unit Tests validateUrl() Valid URLs should accept valid URL: https://example.com/path/with%20encoded%20spaces",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const result = validateUrl(url, { allowLocalhost: true, allowIpAddresses: true })\nexpect(result.isValid).to.be.true\nexpect(result.error).to.be.undefined",
                      "err": {},
                      "uuid": "e2c7a692-7078-4d32-8ec7-489de95dbcbe",
                      "parentUUID": "a65495f7-5ec1-4682-b942-a50fafabcd1c",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should accept valid URL: https://user@example.com",
                      "fullTitle": "URL Validators Unit Tests validateUrl() Valid URLs should accept valid URL: https://user@example.com",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const result = validateUrl(url, { allowLocalhost: true, allowIpAddresses: true })\nexpect(result.isValid).to.be.true\nexpect(result.error).to.be.undefined",
                      "err": {},
                      "uuid": "be14032f-cb44-436e-9ddb-132cfc77024b",
                      "parentUUID": "a65495f7-5ec1-4682-b942-a50fafabcd1c",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should accept valid URL: https://user:pass@example.com",
                      "fullTitle": "URL Validators Unit Tests validateUrl() Valid URLs should accept valid URL: https://user:pass@example.com",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const result = validateUrl(url, { allowLocalhost: true, allowIpAddresses: true })\nexpect(result.isValid).to.be.true\nexpect(result.error).to.be.undefined",
                      "err": {},
                      "uuid": "41e28771-0b11-4fff-9863-f2c6591b6d03",
                      "parentUUID": "a65495f7-5ec1-4682-b942-a50fafabcd1c",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should accept valid URL: https://example.com/very/long/path/that/goes/on/and/on/for/a/while",
                      "fullTitle": "URL Validators Unit Tests validateUrl() Valid URLs should accept valid URL: https://example.com/very/long/path/that/goes/on/and/on/for/a/while",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const result = validateUrl(url, { allowLocalhost: true, allowIpAddresses: true })\nexpect(result.isValid).to.be.true\nexpect(result.error).to.be.undefined",
                      "err": {},
                      "uuid": "91bac5a0-1fdf-4f87-8a64-1cd36b2c5c23",
                      "parentUUID": "a65495f7-5ec1-4682-b942-a50fafabcd1c",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "1e660984-d014-4432-bfaa-8937ad2ed703",
                    "feb2178d-9ec8-4da9-a5b1-1a83cb95cb3b",
                    "42114bd4-16ec-4538-bcd9-dd4546f6c7f5",
                    "f63e6f48-19da-46f4-a991-c7a17d3229e1",
                    "25a4830f-e711-4f77-a8d5-7fd60010c86e",
                    "537e8800-0391-4413-aafc-dd25097da1ec",
                    "aba540d4-cdf8-4d06-abf3-9968595130fe",
                    "fdffed40-65f8-4d58-9c24-242e3af4d643",
                    "6bbeb585-f6c1-4f12-8c3c-0651f8de14b8",
                    "6d49ab70-1d1a-4413-88ae-e2e5db090141",
                    "ffeaaf3c-3567-44f6-9b63-ac4e452b5000",
                    "b9311497-8e9d-4aa8-998d-44e8297d88ad",
                    "98ba72ba-d96c-4fe0-9062-b82de3d3e2b8",
                    "65cf1f05-1dcf-4bb5-8054-d350ff5be28c",
                    "54880767-d784-46f2-aa0f-46265d773cbb",
                    "b6add28d-5ec1-4b32-89f2-1eeae2967000",
                    "c4e40e62-38ec-4385-81a7-f7b8542a3779",
                    "e8019d68-6237-4fc3-9378-76d65b624a9c",
                    "6ac901fa-7dae-42bf-ac8c-a96b67f387ee",
                    "bb9e0da4-8b87-43b0-8d0e-ed4bf5c81db0",
                    "e2c7a692-7078-4d32-8ec7-489de95dbcbe",
                    "be14032f-cb44-436e-9ddb-132cfc77024b",
                    "41e28771-0b11-4fff-9863-f2c6591b6d03",
                    "91bac5a0-1fdf-4f87-8a64-1cd36b2c5c23"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "1e6ebfa9-8d1f-430c-8cd5-2253a285acd3",
                  "title": "Invalid URLs",
                  "fullFile": "/Users/andrew/Dev/url-shortner-ai-demo/test/utils/validators.test.js",
                  "file": "/test/utils/validators.test.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should reject invalid URL: ",
                      "fullTitle": "URL Validators Unit Tests validateUrl() Invalid URLs should reject invalid URL: ",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const result = validateUrl(url)\nexpect(result.isValid).to.be.false\nexpect(result.error).to.be.a('string')\nexpect(result.details).to.be.an('array')",
                      "err": {},
                      "uuid": "cfada903-0d85-416c-b4b0-155fb99c1e5f",
                      "parentUUID": "1e6ebfa9-8d1f-430c-8cd5-2253a285acd3",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should reject invalid URL:    ",
                      "fullTitle": "URL Validators Unit Tests validateUrl() Invalid URLs should reject invalid URL:    ",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const result = validateUrl(url)\nexpect(result.isValid).to.be.false\nexpect(result.error).to.be.a('string')\nexpect(result.details).to.be.an('array')",
                      "err": {},
                      "uuid": "7cd4a949-79b1-4ca1-bfac-7e71648d38bc",
                      "parentUUID": "1e6ebfa9-8d1f-430c-8cd5-2253a285acd3",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should reject invalid URL: not-a-url",
                      "fullTitle": "URL Validators Unit Tests validateUrl() Invalid URLs should reject invalid URL: not-a-url",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const result = validateUrl(url)\nexpect(result.isValid).to.be.false\nexpect(result.error).to.be.a('string')\nexpect(result.details).to.be.an('array')",
                      "err": {},
                      "uuid": "7b14e5c7-7552-4f8c-9f8f-a7bf1b6f4bf4",
                      "parentUUID": "1e6ebfa9-8d1f-430c-8cd5-2253a285acd3",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should reject invalid URL: ftp://example.com",
                      "fullTitle": "URL Validators Unit Tests validateUrl() Invalid URLs should reject invalid URL: ftp://example.com",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const result = validateUrl(url)\nexpect(result.isValid).to.be.false\nexpect(result.error).to.be.a('string')\nexpect(result.details).to.be.an('array')",
                      "err": {},
                      "uuid": "9e0a91a6-8516-4193-b4da-0c6042316564",
                      "parentUUID": "1e6ebfa9-8d1f-430c-8cd5-2253a285acd3",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should reject invalid URL: file:///local/file",
                      "fullTitle": "URL Validators Unit Tests validateUrl() Invalid URLs should reject invalid URL: file:///local/file",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const result = validateUrl(url)\nexpect(result.isValid).to.be.false\nexpect(result.error).to.be.a('string')\nexpect(result.details).to.be.an('array')",
                      "err": {},
                      "uuid": "00cf6faf-f3d7-41e1-b34a-0865c5375b32",
                      "parentUUID": "1e6ebfa9-8d1f-430c-8cd5-2253a285acd3",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should reject invalid URL: mailto:test@example.com",
                      "fullTitle": "URL Validators Unit Tests validateUrl() Invalid URLs should reject invalid URL: mailto:test@example.com",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const result = validateUrl(url)\nexpect(result.isValid).to.be.false\nexpect(result.error).to.be.a('string')\nexpect(result.details).to.be.an('array')",
                      "err": {},
                      "uuid": "ff87c1b0-0fdf-46e0-ac4f-57b5e81a8e8c",
                      "parentUUID": "1e6ebfa9-8d1f-430c-8cd5-2253a285acd3",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should reject invalid URL: javascript:alert(\"xss\")",
                      "fullTitle": "URL Validators Unit Tests validateUrl() Invalid URLs should reject invalid URL: javascript:alert(\"xss\")",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const result = validateUrl(url)\nexpect(result.isValid).to.be.false\nexpect(result.error).to.be.a('string')\nexpect(result.details).to.be.an('array')",
                      "err": {},
                      "uuid": "8ee32f73-a8b9-4b30-9148-7653c47d43b9",
                      "parentUUID": "1e6ebfa9-8d1f-430c-8cd5-2253a285acd3",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should reject invalid URL: data:text/plain;base64,SGVsbG8=",
                      "fullTitle": "URL Validators Unit Tests validateUrl() Invalid URLs should reject invalid URL: data:text/plain;base64,SGVsbG8=",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const result = validateUrl(url)\nexpect(result.isValid).to.be.false\nexpect(result.error).to.be.a('string')\nexpect(result.details).to.be.an('array')",
                      "err": {},
                      "uuid": "226c18a2-7156-4bd6-aa57-7d339008d3ae",
                      "parentUUID": "1e6ebfa9-8d1f-430c-8cd5-2253a285acd3",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should reject invalid URL: http://",
                      "fullTitle": "URL Validators Unit Tests validateUrl() Invalid URLs should reject invalid URL: http://",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const result = validateUrl(url)\nexpect(result.isValid).to.be.false\nexpect(result.error).to.be.a('string')\nexpect(result.details).to.be.an('array')",
                      "err": {},
                      "uuid": "0f5c02ae-90d8-4a6c-b55a-7b7019b457f6",
                      "parentUUID": "1e6ebfa9-8d1f-430c-8cd5-2253a285acd3",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should reject invalid URL: https://",
                      "fullTitle": "URL Validators Unit Tests validateUrl() Invalid URLs should reject invalid URL: https://",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const result = validateUrl(url)\nexpect(result.isValid).to.be.false\nexpect(result.error).to.be.a('string')\nexpect(result.details).to.be.an('array')",
                      "err": {},
                      "uuid": "b8544df6-8997-4e99-9d7c-a83f6467fad3",
                      "parentUUID": "1e6ebfa9-8d1f-430c-8cd5-2253a285acd3",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should reject invalid URL: http:///",
                      "fullTitle": "URL Validators Unit Tests validateUrl() Invalid URLs should reject invalid URL: http:///",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const result = validateUrl(url)\nexpect(result.isValid).to.be.false\nexpect(result.error).to.be.a('string')\nexpect(result.details).to.be.an('array')",
                      "err": {},
                      "uuid": "17d3ba4e-d45a-4c82-9d1b-2121c7949185",
                      "parentUUID": "1e6ebfa9-8d1f-430c-8cd5-2253a285acd3",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should reject invalid URL: https:///",
                      "fullTitle": "URL Validators Unit Tests validateUrl() Invalid URLs should reject invalid URL: https:///",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const result = validateUrl(url)\nexpect(result.isValid).to.be.false\nexpect(result.error).to.be.a('string')\nexpect(result.details).to.be.an('array')",
                      "err": {},
                      "uuid": "b29b8b14-c120-4b99-a019-86c97c6ffc8b",
                      "parentUUID": "1e6ebfa9-8d1f-430c-8cd5-2253a285acd3",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should reject invalid URL: //example.com",
                      "fullTitle": "URL Validators Unit Tests validateUrl() Invalid URLs should reject invalid URL: //example.com",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const result = validateUrl(url)\nexpect(result.isValid).to.be.false\nexpect(result.error).to.be.a('string')\nexpect(result.details).to.be.an('array')",
                      "err": {},
                      "uuid": "0eb931cf-8dae-49dd-9275-0f26cee792e7",
                      "parentUUID": "1e6ebfa9-8d1f-430c-8cd5-2253a285acd3",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "cfada903-0d85-416c-b4b0-155fb99c1e5f",
                    "7cd4a949-79b1-4ca1-bfac-7e71648d38bc",
                    "7b14e5c7-7552-4f8c-9f8f-a7bf1b6f4bf4",
                    "9e0a91a6-8516-4193-b4da-0c6042316564",
                    "00cf6faf-f3d7-41e1-b34a-0865c5375b32",
                    "ff87c1b0-0fdf-46e0-ac4f-57b5e81a8e8c",
                    "8ee32f73-a8b9-4b30-9148-7653c47d43b9",
                    "226c18a2-7156-4bd6-aa57-7d339008d3ae",
                    "0f5c02ae-90d8-4a6c-b55a-7b7019b457f6",
                    "b8544df6-8997-4e99-9d7c-a83f6467fad3",
                    "17d3ba4e-d45a-4c82-9d1b-2121c7949185",
                    "b29b8b14-c120-4b99-a019-86c97c6ffc8b",
                    "0eb931cf-8dae-49dd-9275-0f26cee792e7"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "1c92e7b8-99d3-41ec-9913-6a4f9a811961",
                  "title": "URL Length Validation",
                  "fullFile": "/Users/andrew/Dev/url-shortner-ai-demo/test/utils/validators.test.js",
                  "file": "/test/utils/validators.test.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should reject URLs exceeding default length limit (2048 characters)",
                      "fullTitle": "URL Validators Unit Tests validateUrl() URL Length Validation should reject URLs exceeding default length limit (2048 characters)",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const longUrl = 'https://example.com/' + 'a'.repeat(2100)\nconst result = validateUrl(longUrl)\n\nexpect(result.isValid).to.be.false\nexpect(result.error).to.include('exceeds maximum length')\nexpect(result.details).to.be.an('array')",
                      "err": {},
                      "uuid": "b0177f4f-e769-488c-962d-8f1638f3eb3a",
                      "parentUUID": "1c92e7b8-99d3-41ec-9913-6a4f9a811961",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should reject URLs exceeding custom length limit",
                      "fullTitle": "URL Validators Unit Tests validateUrl() URL Length Validation should reject URLs exceeding custom length limit",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const mediumUrl = 'https://example.com/' + 'a'.repeat(500)\nconst result = validateUrl(mediumUrl, { maxLength: 100 })\n\nexpect(result.isValid).to.be.false\nexpect(result.error).to.include('exceeds maximum length')\nexpect(result.details).to.be.an('array')",
                      "err": {},
                      "uuid": "0d2fabc9-7829-490b-a1e0-fd1d92068cd5",
                      "parentUUID": "1c92e7b8-99d3-41ec-9913-6a4f9a811961",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should accept URLs within length limits",
                      "fullTitle": "URL Validators Unit Tests validateUrl() URL Length Validation should accept URLs within length limits",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const validUrl = 'https://example.com/short'\nconst result = validateUrl(validUrl, { maxLength: 100 })\n\nexpect(result.isValid).to.be.true",
                      "err": {},
                      "uuid": "ce663072-07bb-4735-97e9-ff058cdc6e61",
                      "parentUUID": "1c92e7b8-99d3-41ec-9913-6a4f9a811961",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "b0177f4f-e769-488c-962d-8f1638f3eb3a",
                    "0d2fabc9-7829-490b-a1e0-fd1d92068cd5",
                    "ce663072-07bb-4735-97e9-ff058cdc6e61"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "b82ad087-136d-4bd4-95cc-ab384f292306",
                  "title": "Edge Cases",
                  "fullFile": "/Users/andrew/Dev/url-shortner-ai-demo/test/utils/validators.test.js",
                  "file": "/test/utils/validators.test.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should handle null and undefined input",
                      "fullTitle": "URL Validators Unit Tests validateUrl() Edge Cases should handle null and undefined input",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "expect(validateUrl(null).isValid).to.be.false\nexpect(validateUrl(undefined).isValid).to.be.false\nexpect(validateUrl().isValid).to.be.false",
                      "err": {},
                      "uuid": "61f80004-6444-4623-bb2c-89154b4115d8",
                      "parentUUID": "b82ad087-136d-4bd4-95cc-ab384f292306",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should handle non-string input",
                      "fullTitle": "URL Validators Unit Tests validateUrl() Edge Cases should handle non-string input",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "expect(validateUrl(123).isValid).to.be.false\nexpect(validateUrl({}).isValid).to.be.false\nexpect(validateUrl([]).isValid).to.be.false",
                      "err": {},
                      "uuid": "7eb17a24-c8e7-4932-9b28-e0e76332de94",
                      "parentUUID": "b82ad087-136d-4bd4-95cc-ab384f292306",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should handle very short URLs",
                      "fullTitle": "URL Validators Unit Tests validateUrl() Edge Cases should handle very short URLs",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const shortUrl = 'http://a.b'\nconst result = validateUrl(shortUrl)\n\nexpect(result.isValid).to.be.true",
                      "err": {},
                      "uuid": "dd7103fc-2d61-42c2-9c8e-6a1fcec8ff2e",
                      "parentUUID": "b82ad087-136d-4bd4-95cc-ab384f292306",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "61f80004-6444-4623-bb2c-89154b4115d8",
                    "7eb17a24-c8e7-4932-9b28-e0e76332de94",
                    "dd7103fc-2d61-42c2-9c8e-6a1fcec8ff2e"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "3b94952c-2faf-42ba-aff8-0902a6ea6094",
                  "title": "Configuration Options",
                  "fullFile": "/Users/andrew/Dev/url-shortner-ai-demo/test/utils/validators.test.js",
                  "file": "/test/utils/validators.test.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should respect allowLocalhost option when false",
                      "fullTitle": "URL Validators Unit Tests validateUrl() Configuration Options should respect allowLocalhost option when false",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const localhostUrl = 'http://localhost:3000'\nconst result = validateUrl(localhostUrl, { allowLocalhost: false })\n\nexpect(result.isValid).to.be.false\nexpect(result.error).to.include('localhost')",
                      "err": {},
                      "uuid": "05a7221f-7b15-4ab8-a326-ec05efb224ac",
                      "parentUUID": "3b94952c-2faf-42ba-aff8-0902a6ea6094",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should respect allowIpAddresses option when false",
                      "fullTitle": "URL Validators Unit Tests validateUrl() Configuration Options should respect allowIpAddresses option when false",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const ipUrl = 'http://192.168.1.1'\nconst result = validateUrl(ipUrl, { allowIpAddresses: false })\n\nexpect(result.isValid).to.be.false\nexpect(result.error).to.include('IP address')",
                      "err": {},
                      "uuid": "368ac203-2ef2-4b4f-a5a7-7b53b9855e74",
                      "parentUUID": "3b94952c-2faf-42ba-aff8-0902a6ea6094",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should allow localhost when allowLocalhost is true",
                      "fullTitle": "URL Validators Unit Tests validateUrl() Configuration Options should allow localhost when allowLocalhost is true",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const localhostUrl = 'http://localhost:3000'\nconst result = validateUrl(localhostUrl, { allowLocalhost: true })\n\nexpect(result.isValid).to.be.true",
                      "err": {},
                      "uuid": "80482a48-4b2b-438a-9614-9baa48a1e451",
                      "parentUUID": "3b94952c-2faf-42ba-aff8-0902a6ea6094",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should allow IP addresses when allowIpAddresses is true",
                      "fullTitle": "URL Validators Unit Tests validateUrl() Configuration Options should allow IP addresses when allowIpAddresses is true",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const ipUrl = 'http://192.168.1.1'\nconst result = validateUrl(ipUrl, { allowIpAddresses: true })\n\nexpect(result.isValid).to.be.true",
                      "err": {},
                      "uuid": "a857befc-ae19-418d-a4d0-45ab3cc592f1",
                      "parentUUID": "3b94952c-2faf-42ba-aff8-0902a6ea6094",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "05a7221f-7b15-4ab8-a326-ec05efb224ac",
                    "368ac203-2ef2-4b4f-a5a7-7b53b9855e74",
                    "80482a48-4b2b-438a-9614-9baa48a1e451",
                    "a857befc-ae19-418d-a4d0-45ab3cc592f1"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 1,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "f7dfdc80-e948-4085-8fe6-69dc9a419c5e",
              "title": "validateBulkUrls()",
              "fullFile": "/Users/andrew/Dev/url-shortner-ai-demo/test/utils/validators.test.js",
              "file": "/test/utils/validators.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should validate array of valid URLs",
                  "fullTitle": "URL Validators Unit Tests validateBulkUrls() should validate array of valid URLs",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const urls = [\n  'https://example.com',\n  'https://google.com',\n  'https://github.com'\n]\nconst result = validateBulkUrls(urls)\n\nexpect(result.isValid).to.be.true",
                  "err": {},
                  "uuid": "43dde771-ec99-407b-a668-182f2d95f260",
                  "parentUUID": "f7dfdc80-e948-4085-8fe6-69dc9a419c5e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should reject empty array",
                  "fullTitle": "URL Validators Unit Tests validateBulkUrls() should reject empty array",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result = validateBulkUrls([])\n\nexpect(result.isValid).to.be.false\nexpect(result.error).to.include('cannot be empty')",
                  "err": {},
                  "uuid": "69bda29a-6d3e-4f55-b4f5-306440418eec",
                  "parentUUID": "f7dfdc80-e948-4085-8fe6-69dc9a419c5e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should reject non-array input",
                  "fullTitle": "URL Validators Unit Tests validateBulkUrls() should reject non-array input",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const urls = 'not-an-array'\nconst result = validateBulkUrls(urls)\n\nexpect(result.isValid).to.be.false\nexpect(result.error).to.include('must be provided as an array')",
                  "err": {},
                  "uuid": "17934281-9059-4064-a292-4704e70d0437",
                  "parentUUID": "f7dfdc80-e948-4085-8fe6-69dc9a419c5e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should validate mixed valid and invalid URLs",
                  "fullTitle": "URL Validators Unit Tests validateBulkUrls() should validate mixed valid and invalid URLs",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const urls = [\n  'https://example.com',\n  'invalid-url',\n  'https://github.com',\n  ''\n]\nconst result = validateBulkUrls(urls)\n\nexpect(result.isValid).to.be.false\nexpect(result.failedUrls).to.have.length(2)",
                  "err": {},
                  "uuid": "51e658ec-4d96-4ca0-9b61-4161b51df21b",
                  "parentUUID": "f7dfdc80-e948-4085-8fe6-69dc9a419c5e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should reject array exceeding maximum count",
                  "fullTitle": "URL Validators Unit Tests validateBulkUrls() should reject array exceeding maximum count",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const urls = new Array(1001).fill('https://example.com')\nconst result = validateBulkUrls(urls, { maxCount: 1000 })\n\nexpect(result.isValid).to.be.false\nexpect(result.error).to.include('limited to 1000 URLs')",
                  "err": {},
                  "uuid": "40bd48dd-ea3a-4945-857f-d2f96848cee7",
                  "parentUUID": "f7dfdc80-e948-4085-8fe6-69dc9a419c5e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should validate array with custom options",
                  "fullTitle": "URL Validators Unit Tests validateBulkUrls() should validate array with custom options",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const urls = [\n  'https://example.com',\n  'https://google.com'\n]\nconst result = validateBulkUrls(urls)\n\nexpect(result.isValid).to.be.true\nexpect(result.validCount).to.equal(2)",
                  "err": {},
                  "uuid": "8fddc535-e06d-428d-a709-e9094dea5e15",
                  "parentUUID": "f7dfdc80-e948-4085-8fe6-69dc9a419c5e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle edge cases gracefully",
                  "fullTitle": "URL Validators Unit Tests validateBulkUrls() should handle edge cases gracefully",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(() => validateBulkUrls('not-an-array')).to.not.throw()\nexpect(() => validateBulkUrls(null)).to.not.throw()\nexpect(() => validateBulkUrls(undefined)).to.not.throw()",
                  "err": {},
                  "uuid": "129c71ca-7817-4486-879f-566437962a64",
                  "parentUUID": "f7dfdc80-e948-4085-8fe6-69dc9a419c5e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should provide detailed error information for invalid URLs",
                  "fullTitle": "URL Validators Unit Tests validateBulkUrls() should provide detailed error information for invalid URLs",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const urls = [\n  'https://example.com',\n  'invalid-url',\n  'ftp://unsupported.com'\n]\nconst result = validateBulkUrls(urls)\n\nexpect(result.isValid).to.be.false\nexpect(result.failedUrls).to.have.length(2)\nexpect(result.details).to.be.an('array')",
                  "err": {},
                  "uuid": "e1c4e848-5423-4579-8118-17a9e331f77b",
                  "parentUUID": "f7dfdc80-e948-4085-8fe6-69dc9a419c5e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle URLs with special characters and encoding",
                  "fullTitle": "URL Validators Unit Tests validateBulkUrls() should handle URLs with special characters and encoding",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const urls = [\n  'https://example.com/path?query=value&another=test',\n  'https://example.com/ünicode'\n]\nconst result = validateBulkUrls(urls)\n\nexpect(result.isValid).to.be.true",
                  "err": {},
                  "uuid": "5dab0583-da0d-4579-9274-963e995e8223",
                  "parentUUID": "f7dfdc80-e948-4085-8fe6-69dc9a419c5e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle performance testing with large arrays",
                  "fullTitle": "URL Validators Unit Tests validateBulkUrls() should handle performance testing with large arrays",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const urls = new Array(100).fill('https://example.com')\n\nconst startTime = Date.now()\nconst result = validateBulkUrls(urls)\nconst endTime = Date.now()\nexpect(result.isValid).to.be.true\nexpect(endTime - startTime).to.be.lessThan(1000) // Should complete within 1 second",
                  "err": {},
                  "uuid": "900f2e42-a6c8-4844-b96b-797d90c9f7f5",
                  "parentUUID": "f7dfdc80-e948-4085-8fe6-69dc9a419c5e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should provide detailed error information for mixed URLs",
                  "fullTitle": "URL Validators Unit Tests validateBulkUrls() should provide detailed error information for mixed URLs",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const urls = [\n  'https://example.com',\n  'invalid-url-1',\n  'http://valid.com',\n  'invalid-url-2'\n]\nconst result = validateBulkUrls(urls)\nexpect(result.isValid).to.be.false\nexpect(result.failedUrls).to.have.length(2)\nexpect(result.validCount).to.equal(2)\nexpect(result.totalCount).to.equal(4)",
                  "err": {},
                  "uuid": "505399b3-72b1-4360-b01a-124344cb69fd",
                  "parentUUID": "f7dfdc80-e948-4085-8fe6-69dc9a419c5e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "43dde771-ec99-407b-a668-182f2d95f260",
                "69bda29a-6d3e-4f55-b4f5-306440418eec",
                "17934281-9059-4064-a292-4704e70d0437",
                "51e658ec-4d96-4ca0-9b61-4161b51df21b",
                "40bd48dd-ea3a-4945-857f-d2f96848cee7",
                "8fddc535-e06d-428d-a709-e9094dea5e15",
                "129c71ca-7817-4486-879f-566437962a64",
                "e1c4e848-5423-4579-8118-17a9e331f77b",
                "5dab0583-da0d-4579-9274-963e995e8223",
                "900f2e42-a6c8-4844-b96b-797d90c9f7f5",
                "505399b3-72b1-4360-b01a-124344cb69fd"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "8768f257-002f-4536-b4c6-85fab726ce53",
              "title": "validateShortCode()",
              "fullFile": "/Users/andrew/Dev/url-shortner-ai-demo/test/utils/validators.test.js",
              "file": "/test/utils/validators.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should accept valid short codes",
                  "fullTitle": "URL Validators Unit Tests validateShortCode() should accept valid short codes",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const validCodes = ['abc12', 'XYZ99', 'aBc12']\n\nvalidCodes.forEach(code => {\n  const result = validateShortCode(code)\n  expect(result.isValid).to.be.true\n  expect(result.error).to.be.undefined\n})",
                  "err": {},
                  "uuid": "02eb7867-2739-4798-b534-51eb14db9d12",
                  "parentUUID": "8768f257-002f-4536-b4c6-85fab726ce53",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should reject invalid short codes",
                  "fullTitle": "URL Validators Unit Tests validateShortCode() should reject invalid short codes",
                  "timedOut": false,
                  "duration": 0,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const invalidCodes = [\n  '',           // empty\n  'a',          // too short \n  'abcdef',     // too long (default is 5 chars)\n  'abc!@',      // invalid characters\n  '12345'       // numbers only (depends on charset config)\n]\n\ninvalidCodes.forEach(code => {\n  const result = validateShortCode(code)\n  expect(result.isValid).to.be.false\n  expect(result.error).to.be.a('string')\n})",
                  "err": {
                    "message": "AssertionError: expected true to be false",
                    "estack": "AssertionError: expected true to be false\n    at file:///Users/andrew/Dev/url-shortner-ai-demo/test/utils/validators.test.js:300:37\n    at Array.forEach (<anonymous>)\n    at Context.<anonymous> (file:///Users/andrew/Dev/url-shortner-ai-demo/test/utils/validators.test.js:298:20)\n    at process.processImmediate (node:internal/timers:476:21)",
                    "diff": "- true\n+ false\n"
                  },
                  "uuid": "7e1a7a7a-caab-4f2b-8637-68d5a22abfdb",
                  "parentUUID": "8768f257-002f-4536-b4c6-85fab726ce53",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle null and undefined input",
                  "fullTitle": "URL Validators Unit Tests validateShortCode() should handle null and undefined input",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(validateShortCode(null).isValid).to.be.false\nexpect(validateShortCode(undefined).isValid).to.be.false\nexpect(validateShortCode().isValid).to.be.false",
                  "err": {},
                  "uuid": "691e83ba-3d73-4ab4-aa2b-c41559a190db",
                  "parentUUID": "8768f257-002f-4536-b4c6-85fab726ce53",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle non-string input",
                  "fullTitle": "URL Validators Unit Tests validateShortCode() should handle non-string input",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(validateShortCode(123).isValid).to.be.false\nexpect(validateShortCode({}).isValid).to.be.false\nexpect(validateShortCode([]).isValid).to.be.false",
                  "err": {},
                  "uuid": "255f610b-ad87-453a-bd96-642831ad1c21",
                  "parentUUID": "8768f257-002f-4536-b4c6-85fab726ce53",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should validate short code length",
                  "fullTitle": "URL Validators Unit Tests validateShortCode() should validate short code length",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const exactLength = 'abc12' // 5 characters (default expected length)\nconst result = validateShortCode(exactLength)\nexpect(result.isValid).to.be.true",
                  "err": {},
                  "uuid": "959584ec-d258-4e6e-aa2d-b34793c364d3",
                  "parentUUID": "8768f257-002f-4536-b4c6-85fab726ce53",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "02eb7867-2739-4798-b534-51eb14db9d12",
                "691e83ba-3d73-4ab4-aa2b-c41559a190db",
                "255f610b-ad87-453a-bd96-642831ad1c21",
                "959584ec-d258-4e6e-aa2d-b34793c364d3"
              ],
              "failures": [
                "7e1a7a7a-caab-4f2b-8637-68d5a22abfdb"
              ],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "262d6276-1432-474b-aa02-9eb0b57fd43f",
              "title": "validateRequestSize()",
              "fullFile": "/Users/andrew/Dev/url-shortner-ai-demo/test/utils/validators.test.js",
              "file": "/test/utils/validators.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should validate request body size limits",
                  "fullTitle": "URL Validators Unit Tests validateRequestSize() should validate request body size limits",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const requestBody = {\n  urls: new Array(50).fill('https://example.com')\n}\n\nconst result = validateRequestSize(requestBody)\nexpect(result.isValid).to.be.true",
                  "err": {},
                  "uuid": "a22f61c0-9517-4688-a89e-09cc0b89ae2b",
                  "parentUUID": "262d6276-1432-474b-aa02-9eb0b57fd43f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should reject request body exceeding URL count limit",
                  "fullTitle": "URL Validators Unit Tests validateRequestSize() should reject request body exceeding URL count limit",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const requestBody = {\n  urls: new Array(1001).fill('https://example.com')\n}\n\nconst result = validateRequestSize(requestBody, { maxUrlCount: 1000 })\nexpect(result.isValid).to.be.false\nexpect(result.error).to.include('limited to 1000 URLs')",
                  "err": {},
                  "uuid": "e3808c59-83b5-4f97-b1c0-04e6648240e8",
                  "parentUUID": "262d6276-1432-474b-aa02-9eb0b57fd43f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle non-object request body",
                  "fullTitle": "URL Validators Unit Tests validateRequestSize() should handle non-object request body",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const result = validateRequestSize('not-an-object')\nexpect(result.isValid).to.be.false\nexpect(result.error).to.include('must be a valid object')",
                  "err": {},
                  "uuid": "25ee96f1-4b1c-4a92-8345-a72d67e25ded",
                  "parentUUID": "262d6276-1432-474b-aa02-9eb0b57fd43f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a22f61c0-9517-4688-a89e-09cc0b89ae2b",
                "e3808c59-83b5-4f97-b1c0-04e6648240e8",
                "25ee96f1-4b1c-4a92-8345-a72d67e25ded"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "5f0ad426-2e58-46c7-bc98-238b20cc7117",
              "title": "createValidationErrorResponse()",
              "fullFile": "/Users/andrew/Dev/url-shortner-ai-demo/test/utils/validators.test.js",
              "file": "/test/utils/validators.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return null for valid results",
                  "fullTitle": "URL Validators Unit Tests createValidationErrorResponse() should return null for valid results",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const validResult = { isValid: true }\nconst result = createValidationErrorResponse(validResult)\nexpect(result).to.be.null",
                  "err": {},
                  "uuid": "b3dc376b-6bdd-4db6-90f2-dfca79dda0cb",
                  "parentUUID": "5f0ad426-2e58-46c7-bc98-238b20cc7117",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should format error response for invalid results",
                  "fullTitle": "URL Validators Unit Tests createValidationErrorResponse() should format error response for invalid results",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const invalidResult = {\n  isValid: false,\n  error: 'Test error',\n  details: ['Detail 1', 'Detail 2']\n}\n\nconst result = createValidationErrorResponse(invalidResult, 'test context')\nexpect(result.error).to.equal('Test error')\nexpect(result.details).to.be.an('array')\nexpect(result.context).to.equal('test context')",
                  "err": {},
                  "uuid": "f4b63dc6-df5d-4c33-a64a-0fb236b37dce",
                  "parentUUID": "5f0ad426-2e58-46c7-bc98-238b20cc7117",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b3dc376b-6bdd-4db6-90f2-dfca79dda0cb",
                "f4b63dc6-df5d-4c33-a64a-0fb236b37dce"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.8.2"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}